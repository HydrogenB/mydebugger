/**
 * Â© 2025 MyDebugger Contributors â€“ MIT License
 */
import React, { useEffect, useRef } from 'react';
import { Badge, BadgeVariant } from '../src/design-system/components/display/Badge';
import { Button } from '../src/design-system/components/inputs/Button';
import { Card } from '../src/design-system/components/layout/Card';
import { CodeBlock } from '../src/design-system/components/display/CodeBlock';
import { Collapsible } from '../src/design-system/components/layout/Collapsible';
import { TextInput } from '../src/design-system/components/inputs/TextInput';
import { SelectInput } from '../src/design-system/components/inputs/SelectInput';
import { InfoBox } from '../src/design-system/components/display/InfoBox';
import { TOOL_PANEL_CLASS } from '../src/design-system/foundations/layout';
import PreviewIframe from './PreviewIframe';
import { ValidationStatus } from '../model/pentest';

interface Props {
  url: string;
  setUrl: (v: string) => void;
  results: {
    https?: { status: ValidationStatus; details?: string };
    cors?: { status: ValidationStatus; details?: string };
    openRedirect?: { status: ValidationStatus; details?: string };
    xss?: { status: ValidationStatus; details?: string };
    clickjacking?: ValidationStatus;
  };
  redirectUrl: string;
  xssUrl: string;
  httpUrl: string;
  redirectParam: string;
  setRedirectParam: (v: string) => void;
  xssPayload: string;
  setXssPayload: (v: string) => void;
  history: string[];
  runTests: () => void;
  runId: number;
  setClickjacking: (s: ValidationStatus) => void;
  loading: boolean;
}

const statusColor: Record<ValidationStatus, BadgeVariant> = {
  passed: 'success',
  failed: 'danger',
  inconclusive: 'warning',
};

import { TabGroup } from '../src/design-system/components/navigation/TabGroup';
import { PentestResult } from '../src/design-system/components/display/PentestResult';

// ... (imports)

export function PentestSuiteView(...) {
  // ... (logic)

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-6">
      <div className="flex flex-col md:flex-row gap-4 items-start">
        <div className="flex-grow w-full">
          <TextInput
            label="Target URL"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            fullWidth
            list="pentest-history"
            autoFocus
            clearable
            placeholder="https://example.com"
          />
          <datalist id="pentest-history">
            {history.map((h) => (
              <option key={h} value={h} />
            ))}
          </datalist>
        </div>
        <Button onClick={runTests} isLoading={loading} disabled={loading} className="w-full md:w-auto">
          Run All Tests
        </Button>
      </div>

      <TabGroup
        tabs={[
          { label: 'Clickjacking', content: <PentestResult result={results.clickjacking} title="Clickjacking Validator" description="Tests if this site blocks iframe embedding." logs={results.clickjacking}><PreviewIframe src={url} className="w-full h-72 border" title="clickjacking-test" onAllowed={handleLoad} onBlocked={handleError} /></PentestResult> },
          { label: 'HTTPS Redirect', content: <PentestResult result={results.https} title="HTTPS Redirect Checker" description="Detects if http:// redirects to https://" logs={results.https?.details}><a href={httpUrl} target="_blank" rel="noopener noreferrer" className="text-blue-600 text-sm">Open HTTP Version</a></PentestResult> },
          { label: 'Open Redirect', content: <PentestResult result={results.openRedirect} title="Open Redirect Detector" description="Checks common redirect parameters." logs={results.openRedirect?.details}><div className="flex flex-col gap-2"><SelectInput value={redirectParam} onChange={setRedirectParam} options={[{ value: 'redirect', label: 'redirect' }, { value: 'next', label: 'next' }, { value: 'url', label: 'url' }, { value: 'to', label: 'to' }]} className="w-40" /><PreviewIframe src={redirectUrl} className="w-full h-64 border" title="open-redirect-test" /></div></PentestResult> },
          { label: 'XSS Reflection', content: <PentestResult result={results.xss} title="XSS Reflection Tester" description="Injects a basic payload via query string." logs={results.xss?.details}><div className="flex flex-col gap-2"><TextInput label="Payload" value={xssPayload} onChange={(e) => setXssPayload(e.target.value)} fullWidth /><PreviewIframe src={xssUrl} className="w-full h-64 border" title="xss-test" /></div></PentestResult> },
          { label: 'CORS', content: <PentestResult result={results.cors} title="CORS Validator" description="Attempts cross-origin fetch to the target." logs={results.cors?.details} /> },
          { label: 'Spoofing POC', content: <PentestResult title="Spoofing POC" description="This demonstrates a simple spoofing attack where a malicious link is disguised as a legitimate one."><div className="flex flex-col gap-2"><p className="text-sm">Click the link below to see the POC:</p><a href="https://www.google.com" onMouseOver={(e) => { e.currentTarget.href = 'https://www.bing.com'; }} className="text-blue-600">https://www.google.com</a><Collapsible title="Remediation" className="mt-2"><p className="text-sm">To prevent this, always verify the URL in the browser's status bar before clicking. On the server side, implement Content Security Policy (CSP) to restrict where resources can be loaded from.</p></Collapsible></div></PentestResult> },
        ]}
      />

      <InfoBox variant="warning" title="Aggressive tests">
        Some validators use iframes and redirects which may trigger network requests. Manual review is recommended for XSS payloads.
      </InfoBox>
      <div className="text-sm text-right text-gray-500 dark:text-gray-400">
        ðŸ§ª 5/5 Tests Available | ðŸ§© Coming Soon: CSRF, CSP Scanner
      </div>
    </div>
  );
};

export default PentestSuiteView;
