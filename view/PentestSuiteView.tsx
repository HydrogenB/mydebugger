/**
 * © 2025 MyDebugger Contributors – MIT License
 */
import React, { useEffect, useRef } from 'react';
import { Badge, BadgeVariant } from '../src/design-system/components/display/Badge';
import { Button } from '../src/design-system/components/inputs/Button';
import { TextInput } from '../src/design-system/components/inputs/TextInput';
import { SelectInput } from '../src/design-system/components/inputs/SelectInput';
import { Collapsible } from '../src/design-system/components/layout/Collapsible';
import { InfoBox } from '../src/design-system/components/display/InfoBox';
import { ValidationStatus } from '../model/pentest';

interface Props {
  url: string;
  setUrl: (v: string) => void;
  results: {
    https?: { status: ValidationStatus; details?: string };
    cors?: { status: ValidationStatus; details?: string };
    openRedirect?: { status: ValidationStatus; details?: string };
    xss?: { status: ValidationStatus; details?: string };
    clickjacking?: ValidationStatus;
  };
  redirectUrl: string;
  xssUrl: string;
  httpUrl: string;
  redirectParam: string;
  setRedirectParam: (v: string) => void;
  xssPayload: string;
  setXssPayload: (v: string) => void;
  history: string[];
  runTests: () => void;
  runId: number;
  setClickjacking: (s: ValidationStatus) => void;
}

const statusColor: Record<ValidationStatus, BadgeVariant> = {
  passed: 'success',
  failed: 'danger',
  inconclusive: 'warning',
};

export function PentestSuiteView({
  url,
  setUrl,
  results,
  redirectUrl,
  xssUrl,
  httpUrl,
  redirectParam,
  setRedirectParam,
  xssPayload,
  setXssPayload,
  history,
  runTests,
  runId,
  setClickjacking,
}: Props) {
  const iframeRef = useRef<HTMLIFrameElement>(null);

  useEffect(() => {
    if (!results.clickjacking || !iframeRef.current) {
      return undefined;
    }
    const timer = setTimeout(() => {
      if (results.clickjacking === 'inconclusive') {
        setClickjacking('passed');
      }
    }, 3000);
    return () => {
      clearTimeout(timer);
    };
  }, [results.clickjacking, runId, setClickjacking]);

  const handleLoad = () => {
    setClickjacking('failed');
  };
  const handleError = () => {
    setClickjacking('passed');
  };

  return (
    <div className="space-y-6">
      <div className="flex gap-2 items-end">
        <TextInput
          label="Target URL"
          value={url}
          onChange={(e) => setUrl(e.target.value)}
          fullWidth
          list="pentest-history"
        />
        <datalist id="pentest-history">
          {history.map((h) => (
            <option key={h} value={h} />
          ))}
        </datalist>
        <Button onClick={runTests}>Run All Tests</Button>
      </div>

      <div className="grid gap-4 md:grid-cols-2">
        {/* Clickjacking */}
        <div className="bg-white dark:bg-zinc-900 rounded-xl shadow p-4 space-y-3">
          <h2 className="text-lg font-bold">Clickjacking Validator</h2>
          {url && (
            <iframe
              ref={iframeRef}
              src={url}
              sandbox=""
              onLoad={handleLoad}
              onError={handleError}
              className="w-full h-72 border"
              title="clickjacking-test"
            />
          )}
          <p className="text-sm text-gray-400">Tests if this site blocks iframe embedding.</p>
          {results.clickjacking && (
            <Badge variant={statusColor[results.clickjacking]}>
              {results.clickjacking}
            </Badge>
          )}
          {results.clickjacking && results.clickjacking !== 'inconclusive' && (
            <Collapsible title="Logs" className="mt-2">
              {results.clickjacking}
            </Collapsible>
          )}
        </div>

        {/* HTTPS Redirect */}
        <div className="bg-white dark:bg-zinc-900 rounded-xl shadow p-4 space-y-3">
          <h2 className="text-lg font-bold">HTTPS Redirect Checker</h2>
          <p className="text-sm text-gray-400">Detects if http:// redirects to https://</p>
          {results.https && (
            <Badge variant={statusColor[results.https.status]}>
              {results.https.status}
            </Badge>
          )}
          {results.https?.details && (
            <Collapsible title="Logs" className="mt-2">
              {results.https.details}
            </Collapsible>
          )}
          {httpUrl && (
            <a href={httpUrl} target="_blank" rel="noopener noreferrer" className="text-blue-600 text-sm">Open HTTP Version</a>
          )}
        </div>

        {/* Open Redirect */}
        <div className="bg-white dark:bg-zinc-900 rounded-xl shadow p-4 space-y-3">
          <h2 className="text-lg font-bold">Open Redirect Detector</h2>
          <SelectInput
            value={redirectParam}
            onChange={setRedirectParam}
            options={[
              { value: 'redirect', label: 'redirect' },
              { value: 'next', label: 'next' },
              { value: 'url', label: 'url' },
              { value: 'to', label: 'to' },
            ]}
            className="w-40"
          />
          {redirectUrl && (
            <iframe src={redirectUrl} sandbox="" className="w-full h-64 border" title="open-redirect-test" />
          )}
          <p className="text-sm text-gray-400">Checks common redirect parameters.</p>
          {results.openRedirect && (
            <Badge variant={statusColor[results.openRedirect.status]}>
              {results.openRedirect.status}
            </Badge>
          )}
          {results.openRedirect?.details && (
            <Collapsible title="Logs" className="mt-2">
              {results.openRedirect.details}
            </Collapsible>
          )}
        </div>

        {/* XSS Reflection */}
        <div className="bg-white dark:bg-zinc-900 rounded-xl shadow p-4 space-y-3">
          <h2 className="text-lg font-bold">XSS Reflection Tester</h2>
          <TextInput
            label="Payload"
            value={xssPayload}
            onChange={(e) => setXssPayload(e.target.value)}
            fullWidth
          />
          {xssUrl && (
            <iframe src={xssUrl} sandbox="" className="w-full h-64 border" title="xss-test" />
          )}
          <p className="text-sm text-gray-400">Injects a basic payload via query string.</p>
          {results.xss && (
            <Badge variant={statusColor[results.xss.status]}>
              {results.xss.status}
            </Badge>
          )}
          {results.xss?.details && (
            <Collapsible title="Logs" className="mt-2">
              {results.xss.details}
            </Collapsible>
          )}
        </div>

        {/* CORS */}
        <div className="bg-white dark:bg-zinc-900 rounded-xl shadow p-4 space-y-3">
          <h2 className="text-lg font-bold">CORS Validator</h2>
          <p className="text-sm text-gray-400">Attempts cross-origin fetch to the target.</p>
          {results.cors && (
            <Badge variant={statusColor[results.cors.status]}>
              {results.cors.status}
            </Badge>
          )}
          {results.cors?.details && (
            <Collapsible title="Logs" className="mt-2">
              {results.cors.details}
            </Collapsible>
          )}
        </div>
      </div>
      <InfoBox variant="warning" title="Aggressive tests">
        Some validators use iframes and redirects which may trigger network requests. Manual review is recommended for XSS payloads.
      </InfoBox>
    </div>
  );
};

export default PentestSuiteView;
