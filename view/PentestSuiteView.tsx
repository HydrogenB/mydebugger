/**
 * ¬© 2025 MyDebugger Contributors ‚Äì MIT License
 */
import React, { useEffect, useRef } from 'react';
import { Badge, BadgeVariant } from '../src/design-system/components/display/Badge';
import { Button } from '../src/design-system/components/inputs/Button';
import { Card } from '../src/design-system/components/layout/Card';
import { CodeBlock } from '../src/design-system/components/display/CodeBlock';
import { Collapsible } from '../src/design-system/components/layout/Collapsible';
import { TextInput } from '../src/design-system/components/inputs/TextInput';
import { SelectInput } from '../src/design-system/components/inputs/SelectInput';
import { InfoBox } from '../src/design-system/components/display/InfoBox';
import { TOOL_PANEL_CLASS } from '../src/design-system/foundations/layout';
import PreviewIframe from './PreviewIframe';
import { ValidationStatus } from '../model/pentest';

interface Props {
  url: string;
  setUrl: (v: string) => void;
  results: {
    https?: { status: ValidationStatus; details?: string };
    cors?: { status: ValidationStatus; details?: string };
    openRedirect?: { status: ValidationStatus; details?: string };
    xss?: { status: ValidationStatus; details?: string };
    clickjacking?: ValidationStatus;
  };
  redirectUrl: string;
  xssUrl: string;
  httpUrl: string;
  redirectParam: string;
  setRedirectParam: (v: string) => void;
  xssPayload: string;
  setXssPayload: (v: string) => void;
  history: string[];
  runTests: () => void;
  runId: number;
  setClickjacking: (s: ValidationStatus) => void;
  loading: boolean;
}

const statusColor: Record<ValidationStatus, BadgeVariant> = {
  passed: 'success',
  failed: 'danger',
  inconclusive: 'warning',
};

export function PentestSuiteView({
  url,
  setUrl,
  results,
  redirectUrl,
  xssUrl,
  httpUrl,
  redirectParam,
  setRedirectParam,
  xssPayload,
  setXssPayload,
  history,
  runTests,
  runId,
  setClickjacking,
  loading,
}: Props) {
  const hasEvent = useRef(false);

  useEffect(() => {
    hasEvent.current = false;
    const timer = setTimeout(() => {
      if (!hasEvent.current && results.clickjacking === 'inconclusive') {
        setClickjacking('passed');
      }
    }, 3000);
    return () => clearTimeout(timer);
  }, [runId, results.clickjacking, setClickjacking]);

  const handleLoad = () => {
    hasEvent.current = true;
    setClickjacking('failed');
  };
  const handleError = () => {
    hasEvent.current = true;
    setClickjacking('passed');
  };

  const statuses = [
    results.https?.status,
    results.cors?.status,
    results.openRedirect?.status,
    results.xss?.status,
    results.clickjacking,
  ].filter(Boolean) as ValidationStatus[];

  const renderBadge = (s?: ValidationStatus) =>
    s ? <Badge variant={statusColor[s]}>{s}</Badge> : <span className="text-gray-500">-</span>;

  return (
    <div className="max-w-6xl mx-auto px-6 py-8 space-y-6">
      <div className="flex gap-2 items-end">
        <TextInput
          label="Target URL"
          value={url}
          onChange={(e) => setUrl(e.target.value)}
          fullWidth
          list="pentest-history"
          autoFocus
          clearable
          placeholder="https://example.com"
        />
        <datalist id="pentest-history">
          {history.map((h) => (
            <option key={h} value={h} />
          ))}
        </datalist>
        <Button onClick={runTests} isLoading={loading} disabled={loading}>
          Run All Tests
        </Button>
      </div>

      {Object.keys(results).length > 0 && (
        <div className="flex gap-2 text-sm">
          <Badge variant="success">üü¢ {statuses.filter((s) => s === 'passed').length} Passed</Badge>
          <Badge variant="warning">üü° {statuses.filter((s) => s === 'inconclusive').length} Inconclusive</Badge>
          <Badge variant="danger">üî¥ {statuses.filter((s) => s === 'failed').length} Failed</Badge>
        </div>
      )}

      <div className="grid gap-6 md:grid-cols-2">
        {/* Clickjacking */}
        <Card isElevated>
          <Card.Header
            title={
              <span className="flex items-center gap-2">
                üõ°Ô∏è <span>Clickjacking Validator</span>
              </span>
            }
            actions={
              results.clickjacking && (
                <Badge variant={statusColor[results.clickjacking]}>
                  {results.clickjacking}
                </Badge>
              )
            }
          />
          <Card.Body className="space-y-3">
            {url && (
              <PreviewIframe
                src={url}
                className="w-full h-72 border"
                title="clickjacking-test"
                onAllowed={handleLoad}
                onBlocked={handleError}
              />
            )}
            <p className="text-sm text-gray-500">Tests if this site blocks iframe embedding.</p>
            {results.clickjacking && results.clickjacking !== 'inconclusive' && (
              <Collapsible title="Logs" className="mt-2">
                <CodeBlock>{results.clickjacking}</CodeBlock>
              </Collapsible>
            )}
          </Card.Body>
        </Card>

        {/* HTTPS Redirect */}
        <Card isElevated>
          <Card.Header
            title={<span className="flex items-center gap-2">üîÅ <span>HTTPS Redirect Checker</span></span>}
            actions={
              results.https && (
                <Badge variant={statusColor[results.https.status]}>
                  {results.https.status}
                </Badge>
              )
            }
          />
          <Card.Body className="space-y-3">
            <p className="text-sm text-gray-400">Detects if http:// redirects to https://</p>
            {results.https?.details && (
              <Collapsible title="Logs" className="mt-2">
                <CodeBlock>{results.https.details}</CodeBlock>
              </Collapsible>
            )}
            {httpUrl && (
              <a href={httpUrl} target="_blank" rel="noopener noreferrer" className="text-blue-600 text-sm">Open HTTP Version</a>
            )}
          </Card.Body>
        </Card>

        {/* Open Redirect */}
        <Card isElevated>
          <Card.Header
            title={<span className="flex items-center gap-2">üöö <span>Open Redirect Detector</span></span>}
            actions={
              results.openRedirect && (
                <Badge variant={statusColor[results.openRedirect.status]}>
                  {results.openRedirect.status}
                </Badge>
              )
            }
          />
          <Card.Body className="space-y-3">
            <SelectInput
              value={redirectParam}
              onChange={setRedirectParam}
              options={[
                { value: 'redirect', label: 'redirect' },
                { value: 'next', label: 'next' },
                { value: 'url', label: 'url' },
                { value: 'to', label: 'to' },
              ]}
              className="w-40"
            />
            {redirectUrl && (
              <PreviewIframe src={redirectUrl} className="w-full h-64 border" title="open-redirect-test" />
            )}
            <p className="text-sm text-gray-400">Checks common redirect parameters.</p>
            {results.openRedirect?.details && (
              <Collapsible title="Logs" className="mt-2">
                <CodeBlock>{results.openRedirect.details}</CodeBlock>
              </Collapsible>
            )}
          </Card.Body>
        </Card>

        {/* XSS Reflection */}
        <Card isElevated>
          <Card.Header
            title={<span className="flex items-center gap-2">‚ö†Ô∏è <span>XSS Reflection Tester</span></span>}
            actions={
              results.xss && (
                <Badge variant={statusColor[results.xss.status]}>{results.xss.status}</Badge>
              )
            }
          />
          <Card.Body className="space-y-3">
            <TextInput
              label="Payload"
              value={xssPayload}
              onChange={(e) => setXssPayload(e.target.value)}
              fullWidth
            />
            {xssUrl && (
              <PreviewIframe src={xssUrl} className="w-full h-64 border" title="xss-test" />
            )}
            <p className="text-sm text-gray-400">Injects a basic payload via query string.</p>
            {results.xss?.details && (
              <Collapsible title="Logs" className="mt-2">
                <CodeBlock>{results.xss.details}</CodeBlock>
              </Collapsible>
            )}
          </Card.Body>
        </Card>

        {/* CORS */}
        <Card isElevated>
          <Card.Header
            title={<span className="flex items-center gap-2">üåê <span>CORS Validator</span></span>}
            actions={
              results.cors && (
                <Badge variant={statusColor[results.cors.status]}>{results.cors.status}</Badge>
              )
            }
          />
          <Card.Body className="space-y-3">
            <p className="text-sm text-gray-400">Attempts cross-origin fetch to the target.</p>
            {results.cors?.details && (
              <Collapsible title="Logs" className="mt-2">
                <CodeBlock>{results.cors.details}</CodeBlock>
              </Collapsible>
            )}
          </Card.Body>
        </Card>
      </div>

      {Object.keys(results).length > 0 && (
        <div className={`space-y-2 ${TOOL_PANEL_CLASS.replace('p-6', 'p-4')}`}>
          <h2 className="text-lg font-bold">Summary</h2>
          <ul className="space-y-1 text-sm">
            <li className="flex justify-between">
              <span>HTTPS Redirect</span>
              {renderBadge(results.https?.status)}
            </li>
            <li className="flex justify-between">
              <span>CORS</span>
              {renderBadge(results.cors?.status)}
            </li>
            <li className="flex justify-between">
              <span>Open Redirect</span>
              {renderBadge(results.openRedirect?.status)}
            </li>
            <li className="flex justify-between">
              <span>XSS Reflection</span>
              {renderBadge(results.xss?.status)}
            </li>
            <li className="flex justify-between">
              <span>Clickjacking</span>
              {renderBadge(results.clickjacking)}
            </li>
          </ul>
        </div>
      )}

      <InfoBox variant="warning" title="Aggressive tests">
        Some validators use iframes and redirects which may trigger network requests. Manual review is recommended for XSS payloads.
      </InfoBox>
      <div className="text-sm text-right text-gray-500 dark:text-gray-400">
        üß™ 4/4 Tests Available | üß© Coming Soon: CSRF, CORS, CSP Scanner
      </div>
    </div>
  );
};

export default PentestSuiteView;
