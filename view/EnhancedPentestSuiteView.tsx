/**
 * ¬© 2025 MyDebugger Contributors ‚Äì MIT License
 * 
 * Enhanced Pentest Suite with Interactive Windows and Edge Case Testing
 */
import React, { useState, useEffect } from 'react';

import { Badge } from '../src/design-system/components/display/Badge';
import { Button } from '../src/design-system/components/inputs/Button';
import { Card } from '../src/design-system/components/layout/Card';
import { TextInput } from '../src/design-system/components/inputs/TextInput';
import { InfoBox } from '../src/design-system/components/display/InfoBox';
import { PentestResult } from '../src/design-system/components/display/PentestResult';
import { StageWrapper, StageIndicator } from '../src/shared/components/StageWrapper';
import { useStageManager } from '../src/shared/hooks/useStageManager';
import PreviewIframe from './PreviewIframe';
import { ValidationStatus } from '../model/pentest';

interface WindowState {
  id: string;
  title: string;
  url: string;
  status: 'loading' | 'loaded' | 'error' | 'blocked';
  dimensions: { width: number; height: number };
  isResizable: boolean;
  isMinimized: boolean;
  lastActivity: number;
  errorDetails?: string;
  riskLevel?: 'low' | 'medium' | 'high';
  testCategory?: string;
}

interface PayloadTest {
  name: string;
  payload: string;
  category: 'xss' | 'sqli' | 'command' | 'path' | 'header';
  riskLevel: 'low' | 'medium' | 'high';
  description: string;
  expectedResult?: string;
  remediation?: string;
}

interface Props {
  url: string;
  setUrl: (url: string) => void;
  results: Record<string, any>;
  redirectUrl: string;
  xssUrl: string;
  httpUrl: string;
  redirectParam: string;
  setRedirectParam: (param: string) => void;
  xssPayload: string;
  setXssPayload: (payload: string) => void;
  history: string[];
  runId: number;
  loading: boolean;
  runTests: () => Promise<void>;
  setClickjacking: (status: ValidationStatus) => void;
  // Enhanced features
  windows: WindowState[];
  payloadTests: PayloadTest[];
  isAdvancedMode: boolean;
  setIsAdvancedMode: (enabled: boolean) => void;
  autoResize: boolean;
  setAutoResize: (enabled: boolean) => void;
  realPayloadMode: boolean;
  setRealPayloadMode: (enabled: boolean) => void;
  edgeCaseResults: Record<string, unknown>;
  activeWindow: string | null;
  setActiveWindow: (id: string | null) => void;
  createWindow: (id: string, title: string, url: string) => void;
  updateWindowStatus: (id: string, status: WindowState['status'], errorDetails?: string) => void;
  resizeWindow: (id: string, dimensions: { width: number; height: number }) => void;
  minimizeWindow: (id: string) => void;
  closeWindow: (id: string) => void;
  runPayloadTest: (payload: PayloadTest, target: string) => Promise<any>;
  exportResults: () => void;
}

function EnhancedPentestSuiteView(props: Props) {
  const {
    url,
    setUrl,
    results,
    redirectUrl,
    xssUrl,
    httpUrl,
    redirectParam,
    setRedirectParam,
    xssPayload,
    setXssPayload,
    history,
    runId,
    loading,
    runTests,
    setClickjacking,
    windows,
    payloadTests,
    isAdvancedMode,
    setIsAdvancedMode,
    autoResize,
    setAutoResize,
    realPayloadMode,
    setRealPayloadMode,
    edgeCaseResults,
    activeWindow,
    setActiveWindow,
    createWindow,
    updateWindowStatus,
    resizeWindow,
    minimizeWindow,
    closeWindow,
    runPayloadTest,
    exportResults
  } = props;

  const [showWindowManager, setShowWindowManager] = useState(false);
  const [showPayloadEditor, setShowPayloadEditor] = useState(false);
  const [customPayload, setCustomPayload] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<PayloadTest['category']>('xss');
  const { isFeatureEnabled } = useStageManager();

  // Auto-resize windows based on content
  useEffect(() => {
    if (autoResize && isFeatureEnabled('adaptive-behavior')) {
      windows.forEach(window => {
        if (window.status === 'loaded') {
          const optimalSize = calculateOptimalSize(window);
          if (optimalSize && 
              (Math.abs(optimalSize.width - window.dimensions.width) > 50 ||
               Math.abs(optimalSize.height - window.dimensions.height) > 50)) {
            resizeWindow(window.id, optimalSize);
          }
        }
      });
    }
  }, [windows, autoResize, resizeWindow, isFeatureEnabled]);

  // Calculate optimal window size based on content
  const calculateOptimalSize = (window: WindowState) => {
    const baseSize = { width: 800, height: 600 };
    
    switch (window.testCategory) {
      case 'xss':
        return { width: 900, height: 700 };
      case 'sql':
        return { width: 1000, height: 800 };
      case 'redirect':
        return { width: 800, height: 500 };
      default:
        return baseSize;
    }
  };

  const getRiskLevelColor = (level: PayloadTest['riskLevel']) => {
    switch (level) {
      case 'high': return 'text-red-600 bg-red-100 border-red-200';
      case 'medium': return 'text-yellow-600 bg-yellow-100 border-yellow-200';
      case 'low': return 'text-green-600 bg-green-100 border-green-200';
      default: return 'text-gray-600 bg-gray-100 border-gray-200';
    }
  };

  const runCustomPayloadTest = async () => {
    if (!customPayload.trim() || !url) return;
    
    const testPayload: PayloadTest = {
      name: `Custom ${selectedCategory.toUpperCase()} Test`,
      payload: customPayload,
      category: selectedCategory,
      riskLevel: 'medium',
      description: 'Custom payload test',
      expectedResult: 'Check for payload execution',
      remediation: 'Implement proper input validation and output encoding'
    };

    try {
      await runPayloadTest(testPayload, url);
    } catch (error) {
      console.error('Custom payload test failed:', error);
    }
  };

  return (
    <div className="space-y-6">
      {/* Stage Management */}
      <StageWrapper requiredFeature="enhanced-ui">
        <StageIndicator showProgress showDescription className="mb-4" />
      </StageWrapper>

      {/* Enhanced Header */}
      <Card>
        <Card.Header>
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
                Enhanced Pentest Suite
              </h2>
              <p className="text-gray-600 dark:text-gray-400 mt-1">
                Interactive security testing with real-time windows, edge case analysis, and adaptive behavior
              </p>
            </div>
            <div className="flex gap-2">
              <StageWrapper requiredFeature="advanced-settings">
                <Button
                  onClick={() => setShowWindowManager(!showWindowManager)}
                  variant={showWindowManager ? "primary" : "outline-primary"}
                  size="sm"
                >
                  ü™ü Windows ({windows.length})
                </Button>
              </StageWrapper>
              <StageWrapper requiredFeature="real-time-features">
                <Button
                  onClick={() => setShowPayloadEditor(!showPayloadEditor)}
                  variant={showPayloadEditor ? "primary" : "outline-secondary"}
                  size="sm"
                >
                  ‚ö° Payloads
                </Button>
              </StageWrapper>
            </div>
          </div>
        </Card.Header>
        
        <Card.Body>
          <div className="space-y-4">
            <TextInput
              id="target-url"
              label="Target URL"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              placeholder="https://example.com"
              fullWidth
            />

            {/* Enhanced Control Panel */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
              <div className="flex items-center gap-2">
                <input
                  type="checkbox"
                  id="advanced-mode"
                  checked={isAdvancedMode}
                  onChange={(e) => setIsAdvancedMode(e.target.checked)}
                  className="rounded"
                />
                <label htmlFor="advanced-mode" className="text-sm font-medium">
                  üî¨ Advanced Mode
                </label>
              </div>
              
              <div className="flex items-center gap-2">
                <input
                  type="checkbox"
                  id="auto-resize"
                  checked={autoResize}
                  onChange={(e) => setAutoResize(e.target.checked)}
                  className="rounded"
                />
                <label htmlFor="auto-resize" className="text-sm font-medium">
                  üìê Auto-resize Windows
                </label>
              </div>
              
              <div className="flex items-center gap-2">
                <input
                  type="checkbox"
                  id="real-payload"
                  checked={realPayloadMode}
                  onChange={(e) => setRealPayloadMode(e.target.checked)}
                  className="rounded"
                />
                <label htmlFor="real-payload" className="text-sm font-medium text-red-600">
                  ‚ö†Ô∏è Real Payload Mode
                </label>
              </div>
            </div>

            {/* Mode Information */}
            {isAdvancedMode ? (
              <InfoBox variant="info" title="Advanced Mode Enabled">
                Real-time test windows, edge case testing, and enhanced payload analysis are now active.
                Tests will run with comprehensive edge case coverage and detailed logging.
              </InfoBox>
            ) : null}

            {realPayloadMode ? (
              <InfoBox variant="warning" title="Real Payload Mode Active">
                ‚ö†Ô∏è This mode uses actual attack payloads for testing. Only use on sites you own or have permission to test.
                Real payloads may trigger security systems and should be used responsibly.
              </InfoBox>
            ) : null}

            {/* Test Configuration */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <TextInput
                id="redirect-param"
                label="Redirect Parameter"
                value={redirectParam}
                onChange={(e) => setRedirectParam(e.target.value)}
                placeholder="redirect"
              />
              <TextInput
                id="xss-payload"
                label="XSS Test Payload"
                value={xssPayload}
                onChange={(e) => setXssPayload(e.target.value)}
                placeholder="<script>alert('XSS')</script>"
              />
            </div>

            {/* Action Buttons */}
            <div className="flex flex-wrap gap-3">
              <Button
                onClick={runTests}
                isLoading={loading}
                className="bg-blue-600 hover:bg-blue-700 text-white"
              >
                {loading ? 'Running Tests...' : 'üöÄ Run Security Tests'}
              </Button>
              
              <StageWrapper requiredFeature="export-functionality">
                <Button
                  onClick={exportResults}
                  variant="outline-primary"
                  disabled={Object.keys(results).length === 0}
                >
                  üìä Export Results
                </Button>
              </StageWrapper>

              {/* Quick Test Buttons */}
              <StageWrapper requiredFeature="real-time-features">
                <Button
                  onClick={() => createWindow('quick-xss', 'XSS Test', xssUrl)}
                  variant="outline-secondary"
                  size="sm"
                  disabled={!url}
                >
                  ‚ö° Quick XSS
                </Button>
              </StageWrapper>
            </div>
          </div>
        </Card.Body>
      </Card>

      {/* Interactive Window Manager */}
      <StageWrapper requiredFeature="advanced-settings">
        {showWindowManager ? (
          <Card>
            <Card.Header>
              <h3 className="text-lg font-semibold">Interactive Test Windows</h3>
            </Card.Header>
            <Card.Body>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {windows.map(window => (
                  <div
                    key={window.id}
                    className={`p-4 border rounded-lg cursor-pointer transition-all ${
                      activeWindow === window.id 
                        ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' 
                        : 'border-gray-200 dark:border-gray-700 hover:border-gray-300'
                    }`}
                    onClick={() => setActiveWindow(window.id)}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-medium text-sm truncate">{window.title}</h4>
                      <Badge
                        variant={
                          window.status === 'loaded' ? 'success' :
                          window.status === 'error' ? 'danger' :
                          window.status === 'blocked' ? 'warning' : 'default'
                        }
                      >
                        {window.status}
                      </Badge>
                    </div>
                    
                    <div className="text-xs text-gray-500 mb-2 truncate">
                      {window.url}
                    </div>
                    
                    <div className="text-xs text-gray-400 mb-3">
                      {window.dimensions.width}√ó{window.dimensions.height}
                      {window.riskLevel ? (
                        <span className={`ml-2 px-1 rounded ${getRiskLevelColor(window.riskLevel)}`}>
                          {window.riskLevel}
                        </span>
                      ) : null}
                    </div>
                    
                    <div className="flex gap-1">
                      <Button
                        size="sm"
                        variant="outline-primary"
                        onClick={(e) => {
                          e.stopPropagation();
                          minimizeWindow(window.id);
                        }}
                      >
                        {window.isMinimized ? 'üìñ' : 'üìï'}
                      </Button>
                      
                      {autoResize ? (
                        <Button
                          size="sm"
                          variant="outline-secondary"
                          onClick={(e) => {
                            e.stopPropagation();
                            const newSize = calculateOptimalSize(window);
                            if (newSize) resizeWindow(window.id, newSize);
                          }}
                        >
                          üìê
                        </Button>
                      ) : null}
                      
                      <Button
                        size="sm"
                        variant="outline-secondary"
                        onClick={(e) => {
                          e.stopPropagation();
                          closeWindow(window.id);
                        }}
                      >
                        ‚ùå
                      </Button>
                    </div>
                    
                    {window.errorDetails ? (
                      <div className="mt-2 p-2 bg-red-50 dark:bg-red-900/20 rounded text-xs text-red-600 dark:text-red-400">
                        {window.errorDetails}
                      </div>
                    ) : null}
                  </div>
                ))}
                
                {windows.length === 0 ? (
                  <div className="col-span-full text-center text-gray-500 py-8">
                    No active test windows. Run tests to create interactive windows.
                  </div>
                ) : null}
              </div>
            </Card.Body>
          </Card>
        ) : null}
      </StageWrapper>

      {/* Enhanced Payload Editor */}
      <StageWrapper requiredFeature="real-time-features">
        {showPayloadEditor ? (
          <Card>
            <Card.Header>
              <h3 className="text-lg font-semibold">Payload Testing Laboratory</h3>
            </Card.Header>
            <Card.Body>
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Category</label>
                    <select
                      value={selectedCategory}
                      onChange={(e) => setSelectedCategory(e.target.value as PayloadTest['category'])}
                      className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="xss">Cross-Site Scripting (XSS)</option>
                      <option value="sqli">SQL Injection</option>
                      <option value="command">Command Injection</option>
                      <option value="path">Path Traversal</option>
                      <option value="header">Header Injection</option>
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-2">Custom Payload</label>
                    <textarea
                      value={customPayload}
                      onChange={(e) => setCustomPayload(e.target.value)}
                      placeholder="Enter your custom payload..."
                      className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 font-mono text-sm"
                      rows={3}
                    />
                  </div>
                </div>

                <div className="flex gap-2">
                  <Button
                    onClick={runCustomPayloadTest}
                    disabled={!customPayload.trim() || !url}
                    className="bg-orange-600 hover:bg-orange-700 text-white"
                  >
                    üß™ Test Custom Payload
                  </Button>
                  
                  <Button
                    onClick={() => setCustomPayload('')}
                    variant="outline-secondary"
                  >
                    üóëÔ∏è Clear
                  </Button>
                </div>

                {/* Predefined Payloads */}
                <div>
                  <h4 className="font-medium mb-3">Predefined Payloads</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 max-h-64 overflow-y-auto">
                    {payloadTests
                      .filter(p => p.category === selectedCategory)
                      .map((payload, index) => (
                        <div
                          key={index}
                          className={`p-3 border rounded-lg cursor-pointer hover:border-blue-300 ${getRiskLevelColor(payload.riskLevel)}`}
                          onClick={() => setCustomPayload(payload.payload)}
                        >
                          <div className="flex items-center justify-between mb-1">
                            <span className="font-medium text-sm">{payload.name}</span>
                            <Badge variant={
                              payload.riskLevel === 'high' ? 'danger' :
                              payload.riskLevel === 'medium' ? 'warning' : 'success'
                            }>
                              {payload.riskLevel}
                            </Badge>
                          </div>
                          <div className="text-xs text-gray-600 mb-2">{payload.description}</div>
                          <code className="text-xs bg-gray-100 dark:bg-gray-800 p-1 rounded break-all">
                            {payload.payload.length > 50 
                              ? `${payload.payload.substring(0, 50)}...` 
                              : payload.payload
                            }
                          </code>
                        </div>
                      ))}
                  </div>
                </div>
              </div>
            </Card.Body>
          </Card>
        ) : null}
      </StageWrapper>

      {/* Test Results */}
      {Object.keys(results).length > 0 ? (
        <Card>
          <Card.Header>
            <h3 className="text-lg font-semibold">Security Test Results</h3>
          </Card.Header>
          <Card.Body>
            <div className="space-y-4">
              {Object.entries(results).map(([key, result]) => (
                <PentestResult
                  key={key}
                  title={key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
                  result={result}
                />
              ))}
            </div>
          </Card.Body>
        </Card>
      ) : null}

      {/* Edge Case Results */}
      <StageWrapper requiredFeature="edge-case-handling">
        {Object.keys(edgeCaseResults).length > 0 ? (
          <Card>
            <Card.Header>
              <h3 className="text-lg font-semibold">Edge Case Analysis</h3>
            </Card.Header>
            <Card.Body>
              <div className="space-y-3">
                {Object.entries(edgeCaseResults).map(([key, result]) => (
                  <div key={key} className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <div className="font-medium text-sm mb-1">{key}</div>
                    <pre className="text-xs text-gray-600 dark:text-gray-400 overflow-x-auto">
                      {JSON.stringify(result, null, 2)}
                    </pre>
                  </div>
                ))}
              </div>
            </Card.Body>
          </Card>
        ) : null}
      </StageWrapper>

      {/* Active Window Preview */}
      <StageWrapper requiredFeature="interactive-previews">
        {activeWindow && windows.find(w => w.id === activeWindow) ? (
          <Card>
            <Card.Header>
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold">
                  Active Test Window: {windows.find(w => w.id === activeWindow)?.title}
                </h3>
                <Button
                  onClick={() => setActiveWindow(null)}
                  variant="outline-secondary"
                  size="sm"
                >
                  ‚ùå Close Preview
                </Button>
              </div>
            </Card.Header>
            <Card.Body>
              <div className="border rounded-lg overflow-hidden">
                <PreviewIframe
                  src={windows.find(w => w.id === activeWindow)?.url || ''}
                  onClickjacking={setClickjacking}
                  title={`Preview: ${windows.find(w => w.id === activeWindow)?.title}`}
                />
              </div>
            </Card.Body>
          </Card>
        ) : null}
      </StageWrapper>

      {/* Quick URL History */}
      {history.length > 0 ? (
        <Card>
          <Card.Header>
            <h3 className="text-lg font-semibold">Recent Targets</h3>
          </Card.Header>
          <Card.Body>
            <div className="flex flex-wrap gap-2">
              {history.slice(0, 5).map((historyUrl, i) => (
                <Button
                  key={i}
                  onClick={() => setUrl(historyUrl)}
                  variant="outline-secondary"
                  size="sm"
                  className="text-xs"
                >
                  {new URL(historyUrl).hostname}
                </Button>
              ))}
            </div>
          </Card.Body>
        </Card>
      ) : null}
    </div>
  );
}

export default EnhancedPentestSuiteView;
