{"version":3,"mappings":"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","names":["LZString","f","keyStrBase64","keyStrUriSafe","baseReverseDic","getBaseValue","alphabet","character","i","input","res","a","index","compressed","uncompressed","buf","TotalLen","current_value","result","c","bitsPerChar","getCharFromInt","value","context_dictionary","context_dictionaryToCreate","context_c","context_wc","context_w","context_enlargeIn","context_dictSize","context_numBits","context_data","context_data_val","context_data_position","ii","length","resetValue","getNextValue","dictionary","enlargeIn","dictSize","numBits","entry","w","bits","resb","maxpower","power","data","module","initialState","jwtReducer","state","action","item","JwtContext","createContext","JwtProvider","children","dispatch","useReducer","React","loadFromHash","e","savedHistory","decodeToken","token","decoded","cryptoWorker","warnings","jwtParts","label","_a","_b","analyzeToken","err","verifySignature","algorithm","key","isValid","issues","expiration","dayMs","nbfTime","shareToken","compressedToken","compressToEncodedURIComponent","hash","decompressedToken","decompressFromEncodedURIComponent","jsx","useJwt","context","useContext","Text","Component","size","weight","align","color","truncate","lineClamp","transform","italic","underline","lineThrough","adaptiveLeading","className","variant","error","lineHeight","m","mt","mb","ml","mr","mx","my","p","pt","pb","pl","pr","px","py","style","ElementType","effectiveColor","sizeClasses","getResponsiveSizeClasses","weightClasses","alignClasses","colorClasses","transformClasses","styleClasses","getTruncateClass","lineClampClass","lineHeightClass","getAdaptiveLeadingClass","textSize","getSpacingClasses","spacingClasses","textClasses","JwtDecoder","isVerified","verificationKey","securityIssues","parsingWarnings","jwtToken","setJwtToken","useState","secret","setSecret","copied","setCopied","copiedSection","setCopiedSection","activeTab","setActiveTab","selectedAlgorithm","setSelectedAlgorithm","showIterationTooltip","setShowIterationTooltip","useEffect","timeoutId","timer","handleCopyContent","content","section","handleReset","getIterationSuggestions","suggestions","_c","expTime","isExpired","_d","jsxs","handleGenerateExample","now","handleVerifySignature","formatDate","timestamp","exp","getClaimDescription","getTokenPartColor","part","getSeverityColor","severity","pageTitle","pageDescription","Fragment","Helmet","Card","Button","Tooltip","Badge","Alert","warning","issue","base64UrlEncode","str","base64UrlDecode","isPemFormat","extractPemContent","pem","matches","detectKeyTypeAndFormat","isPrivate","isRSA","isEC","normalizeToken","normalizedToken","decodeSafely","parts","tryParseJson","headerBase64","payloadBase64","signatureBase64","header","payload","headerJson","payloadJson","expDate","nbfDate","base64Str","json","keyToArrayBuffer","isBase64","pemContent","binaryStr","bytes","tryMultipleKeyFormats","alg","cryptoAlg","signedData","signature","isHmac","format","isPem","keyType","formats","keyData","cryptoKey","verifyToken","signToken","finalHeader","keyFormat","signatureArray","benchmarkAlgorithm","start","totalTime","sign","verify","decode","bench","analyze","BuilderWizard","activeStep","setActiveStep","setAlgorithm","keyId","setKeyId","type","setType","claims","setClaims","newClaimName","setNewClaimName","newClaimValue","setNewClaimValue","newClaimType","setNewClaimType","privateKey","setPrivateKey","generatedToken","setGeneratedToken","tokenSizeBytes","setTokenSizeBytes","isSigning","setIsSigning","signError","setSignError","updatePreview","claim","cryptoWorker.base64UrlEncode","previewToken","addClaim","removeClaim","updatedClaims","handleClaimChange","field","handleSignToken","cryptoWorker.sign","handleCopyToken","renderHeaderStep","TextInput","renderPayloadStep","renderSignatureStep","keyLabel","keyHelp","TabGroup","Tab","InspectorPane","secretKey","setSecretKey","securityScore","setSecurityScore","highIssues","mediumIssues","lowIssues","score","getSecurityScoreText","getSecurityScoreColor","handleTokenChange","newToken","handleGenerateDemo","demoToken","handleCopy","handleVerify","getSeverityIcon","renderSecurityIssues","infoIssues","TabPanel","JwksProbe","url","setUrl","urlType","setUrlType","isLoading","setIsLoading","jwksList","setJwksList","oidcConfig","setOidcConfig","setError","matchedKey","setMatchedKey","copiedItem","setCopiedItem","issuer","matchingKey","fetchJwks","response","fetchOidcConfig","configResponse","config","jwksResponse","jwksData","handleFetch","getSampleUrl","renderKeyCard","isMatched","keyJson","LoadingSpinner","configJson","scope","_e","ALGORITHMS","algFamilyDescriptions","getAlgorithmColor","formatNumber","num","BenchResult","isRunning","setIsRunning","currentAlgorithm","setCurrentAlgorithm","progress","setProgress","results","setResults","showDetailedResults","setShowDetailedResults","sortBy","setSortBy","useCallback","iterations","opsPerSecond","runBenchmarks","newResults","resolve","sortedResults","b","getFastestAlgorithm","fastest","current","getResultsByFamily","families","family","renderChart","maxOps","r","widthPercentage","isFastest","renderFamilyGroups","algResults","JwtRoutes","Routes","Route","Navigate","jwtTool","lazy","JwtToolkit","navigate","useNavigate","path","useLocation","tabItems","handleTabChange","tabId","ToolLayout","tab"],"sources":["../../node_modules/lz-string/libs/lz-string.js","../../src/tools/jwt/context/JwtContext.tsx","../../src/design-system/components/typography/Text.tsx","../../src/tools/jwt/JwtDecoder.tsx","../../src/tools/jwt/workers/cryptoWorker.ts","../../src/tools/jwt/components/BuilderWizard.tsx","../../src/tools/jwt/components/InspectorPane.tsx","../../src/tools/jwt/components/JwksProbe.tsx","../../src/tools/jwt/components/BenchResult.tsx","../../src/tools/jwt/routes.tsx","../../src/tools/jwt/JwtToolkit.tsx"],"sourcesContent":["// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.5\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n  define(function () { return LZString; });\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n} else if( typeof angular !== 'undefined' && angular != null ) {\n  angular.module('LZString', [])\n  .factory('LZString', function () {\n    return LZString;\n  });\n}\n","import React, { createContext, useContext, useState, useReducer, ReactNode } from 'react';\r\nimport { compressToEncodedURIComponent, decompressFromEncodedURIComponent } from 'lz-string';\r\n\r\n// Types for JWT parts\r\nexport interface JwtParts {\r\n  header: any;\r\n  payload: any;\r\n  signature: string;\r\n  raw: {\r\n    header: string;\r\n    payload: string;\r\n    signature: string;\r\n  }\r\n}\r\n\r\n// Types for the history item\r\nexport interface HistoryItem {\r\n  id: string;\r\n  token: string;\r\n  timestamp: number;\r\n  label: string;\r\n}\r\n\r\n// Interface for the context state\r\ninterface JwtState {\r\n  token: string;\r\n  decoded: JwtParts | null;\r\n  isVerified: boolean | null;\r\n  verificationKey: string;\r\n  error: string | null;\r\n  history: HistoryItem[];\r\n  securityIssues: SecurityIssue[];\r\n  parsingWarnings: string[];\r\n}\r\n\r\n// Interface for security findings\r\nexport interface SecurityIssue {\r\n  id: string;\r\n  severity: 'high' | 'medium' | 'low' | 'info';\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\n// Actions for the reducer\r\ntype JwtAction = \r\n  | { type: 'SET_TOKEN'; payload: string }\r\n  | { type: 'SET_DECODED'; payload: JwtParts | null }\r\n  | { type: 'SET_VERIFIED'; payload: boolean | null }\r\n  | { type: 'SET_VERIFICATION_KEY'; payload: string }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'ADD_HISTORY_ITEM'; payload: HistoryItem }\r\n  | { type: 'CLEAR_HISTORY' }\r\n  | { type: 'REMOVE_HISTORY_ITEM'; payload: string }\r\n  | { type: 'SET_SECURITY_ISSUES'; payload: SecurityIssue[] }\r\n  | { type: 'SET_PARSING_WARNINGS'; payload: string[] }\r\n  | { type: 'RESET' };\r\n\r\n// Initial state\r\nconst initialState: JwtState = {\r\n  token: '',\r\n  decoded: null,\r\n  isVerified: null,\r\n  verificationKey: '',\r\n  error: null,\r\n  history: [],\r\n  securityIssues: [],\r\n  parsingWarnings: [],\r\n};\r\n\r\n// State reducer\r\nfunction jwtReducer(state: JwtState, action: JwtAction): JwtState {\r\n  switch (action.type) {\r\n    case 'SET_TOKEN':\r\n      return { ...state, token: action.payload };\r\n    case 'SET_DECODED':\r\n      return { ...state, decoded: action.payload };\r\n    case 'SET_VERIFIED':\r\n      return { ...state, isVerified: action.payload };\r\n    case 'SET_VERIFICATION_KEY':\r\n      return { ...state, verificationKey: action.payload };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    case 'ADD_HISTORY_ITEM':\r\n      // Add and maintain most recent first, limit to 10 items\r\n      return { \r\n        ...state, \r\n        history: [action.payload, ...state.history.filter(item => item.id !== action.payload.id)].slice(0, 10) \r\n      };\r\n    case 'CLEAR_HISTORY':\r\n      return { ...state, history: [] };\r\n    case 'REMOVE_HISTORY_ITEM':\r\n      return { \r\n        ...state, \r\n        history: state.history.filter(item => item.id !== action.payload) \r\n      };\r\n    case 'SET_SECURITY_ISSUES':\r\n      return { ...state, securityIssues: action.payload };\r\n    case 'SET_PARSING_WARNINGS':\r\n      return { ...state, parsingWarnings: action.payload };\r\n    case 'RESET':\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Create the context\r\ntype JwtContextType = {\r\n  state: JwtState;\r\n  dispatch: React.Dispatch<JwtAction>;\r\n  // Helper functions\r\n  decodeToken: (token: string) => Promise<void>;\r\n  verifySignature: (algorithm: string, key: string) => Promise<void>;\r\n  analyzeToken: (token: string) => void;\r\n  shareToken: () => string;\r\n  loadFromHash: () => Promise<boolean>;\r\n};\r\n\r\nconst JwtContext = createContext<JwtContextType | undefined>(undefined);\r\n\r\n// Provider component\r\nexport const JwtProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(jwtReducer, initialState);\r\n\r\n  // Initialize from URL hash if present\r\n  React.useEffect(() => {\r\n    loadFromHash();\r\n  }, []);\r\n\r\n  // Save history to local storage\r\n  React.useEffect(() => {\r\n    try {\r\n      localStorage.setItem('jwt.history', JSON.stringify(state.history));\r\n    } catch (e) {\r\n      console.error('Failed to save JWT history:', e);\r\n    }\r\n  }, [state.history]);\r\n\r\n  // Load history from local storage on mount\r\n  React.useEffect(() => {\r\n    try {\r\n      const savedHistory = localStorage.getItem('jwt.history');\r\n      if (savedHistory) {\r\n        const history = JSON.parse(savedHistory) as HistoryItem[];\r\n        history.forEach(item => {\r\n          dispatch({ type: 'ADD_HISTORY_ITEM', payload: item });\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.error('Failed to load JWT history:', e);\r\n    }\r\n  }, []);\r\n\r\n  // Helper to decode a JWT token\r\n  const decodeToken = async (token: string): Promise<void> => {\r\n    if (!token) {\r\n      dispatch({ type: 'SET_DECODED', payload: null });\r\n      dispatch({ type: 'SET_ERROR', payload: null });\r\n      dispatch({ type: 'SET_VERIFIED', payload: null });\r\n      dispatch({ type: 'SET_PARSING_WARNINGS', payload: [] });\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Clean up the token - handle \"Bearer\" prefix and whitespace\r\n      token = token.trim();\r\n      if (token.toLowerCase().startsWith('bearer ')) {\r\n        token = token.substring(7).trim();\r\n      }\r\n      \r\n      // Try to import the worker if available\r\n      const cryptoWorker = await import('../workers/cryptoWorker');\r\n      const decoded = await cryptoWorker.decode(token);\r\n      \r\n      // Track warnings that are not fatal errors\r\n      const warnings: string[] = [];\r\n      if (decoded.error) {\r\n        warnings.push(decoded.error);\r\n      }\r\n      \r\n      // Convert DecodedJwt to JwtParts\r\n      if (decoded.header && decoded.payload && decoded.signature) {\r\n        const jwtParts: JwtParts = {\r\n          header: decoded.header,\r\n          payload: decoded.payload,\r\n          signature: decoded.signature,\r\n          raw: decoded.raw\r\n        };\r\n        \r\n        dispatch({ type: 'SET_TOKEN', payload: token });\r\n        dispatch({ type: 'SET_DECODED', payload: jwtParts });\r\n        dispatch({ type: 'SET_ERROR', payload: null });\r\n        dispatch({ type: 'SET_PARSING_WARNINGS', payload: warnings });\r\n        \r\n        // Reset verification status when token changes\r\n        dispatch({ type: 'SET_VERIFIED', payload: null });\r\n        \r\n        // Add to history with null checks for payload\r\n        const label = decoded.payload?.sub || decoded.payload?.name || \r\n          `Token ${new Date().toLocaleDateString()}`;\r\n        \r\n        dispatch({\r\n          type: 'ADD_HISTORY_ITEM',\r\n          payload: {\r\n            id: Math.random().toString(36).substring(2, 9),\r\n            token,\r\n            timestamp: Date.now(),\r\n            label\r\n          }\r\n        });\r\n        \r\n        // Analyze token for security issues\r\n        analyzeToken(token);\r\n      } else {\r\n        throw new Error('Failed to decode JWT: Invalid token structure');\r\n      }\r\n    } catch (err) {\r\n      dispatch({ \r\n        type: 'SET_ERROR', \r\n        payload: err instanceof Error ? err.message : 'Failed to decode JWT'\r\n      });\r\n      dispatch({ type: 'SET_DECODED', payload: null });\r\n      dispatch({ type: 'SET_VERIFIED', payload: null });\r\n      dispatch({ type: 'SET_PARSING_WARNINGS', payload: [] });\r\n    }\r\n  };\r\n\r\n  // Helper to verify the signature\r\n  const verifySignature = async (algorithm: string, key: string): Promise<void> => {\r\n    if (!state.token || !key) {\r\n      dispatch({ type: 'SET_VERIFIED', payload: null });\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Try to import the worker if available\r\n      const cryptoWorker = await import('../workers/cryptoWorker');\r\n      \r\n      // The cryptoWorker now has enhanced key format detection\r\n      // so we can directly pass the key as is\r\n      const isValid = await cryptoWorker.verify(\r\n        state.token,\r\n        key,\r\n        algorithm || (state.decoded?.header?.alg || 'HS256')\r\n      );\r\n      \r\n      dispatch({ type: 'SET_VERIFICATION_KEY', payload: key });\r\n      dispatch({ type: 'SET_VERIFIED', payload: isValid });\r\n      \r\n      // If verification failed, check if algorithm mismatch\r\n      if (!isValid && state.decoded && algorithm && state.decoded.header.alg !== algorithm) {\r\n        dispatch({ \r\n          type: 'SET_ERROR', \r\n          payload: `Algorithm mismatch: Token uses ${state.decoded.header.alg} but ${algorithm} was specified for verification`\r\n        });\r\n      } else if (!isValid) {\r\n        dispatch({ type: 'SET_ERROR', payload: 'Signature verification failed' });\r\n      } else {\r\n        dispatch({ type: 'SET_ERROR', payload: null });\r\n      }\r\n    } catch (err) {\r\n      dispatch({ \r\n        type: 'SET_ERROR', \r\n        payload: err instanceof Error ? err.message : 'Failed to verify signature'\r\n      });\r\n      dispatch({ type: 'SET_VERIFIED', payload: false });\r\n    }\r\n  };\r\n\r\n  // Analyze a token for potential security issues\r\n  const analyzeToken = (token: string) => {\r\n    if (!state.decoded) return;\r\n    \r\n    const issues: SecurityIssue[] = [];\r\n    \r\n    // Check for algorithm none\r\n    if (state.decoded.header.alg === 'none') {\r\n      issues.push({\r\n        id: 'alg-none',\r\n        severity: 'high',\r\n        title: 'UNSIGNED TOKEN',\r\n        description: 'The token uses algorithm \"none\" and has no signature. Do not accept in production.'\r\n      });\r\n    }\r\n    \r\n    // Check for expiration\r\n    if (state.decoded.payload.exp) {\r\n      const expiration = state.decoded.payload.exp * 1000; // Convert to milliseconds\r\n      \r\n      if (Date.now() > expiration) {\r\n        issues.push({\r\n          id: 'token-expired',\r\n          severity: 'medium',\r\n          title: 'Token Expired',\r\n          description: `Token expired on ${new Date(expiration).toLocaleString()}.`\r\n        });\r\n      }\r\n      \r\n      // Check if token expires within 24 hours\r\n      const dayMs = 24 * 60 * 60 * 1000;\r\n      if (expiration - Date.now() < dayMs && Date.now() < expiration) {\r\n        issues.push({\r\n          id: 'token-expiring',\r\n          severity: 'low',\r\n          title: 'Token Expiring Soon',\r\n          description: `Token will expire on ${new Date(expiration).toLocaleString()}.`\r\n        });\r\n      }\r\n    } else {\r\n      // No expiration time specified\r\n      issues.push({\r\n        id: 'no-expiration',\r\n        severity: 'medium',\r\n        title: 'No Expiration Time',\r\n        description: 'This token has no expiration time (exp claim), which is not recommended.'\r\n      });\r\n    }\r\n    \r\n    // Check for weak algorithm\r\n    if (state.decoded.header.alg) {\r\n      if (!['HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512', \r\n             'ES256', 'ES384', 'ES512', 'PS256', 'PS384', 'PS512'].includes(state.decoded.header.alg)) {\r\n        issues.push({\r\n          id: 'unsupported-algorithm',\r\n          severity: 'high',\r\n          title: 'Unsupported Algorithm',\r\n          description: `Algorithm ${state.decoded.header.alg} is not among the standard supported JWT algorithms.`\r\n        });\r\n      }\r\n      else if (['HS256', 'RS256'].includes(state.decoded.header.alg)) {\r\n        issues.push({\r\n          id: 'weak-algorithm',\r\n          severity: 'info',\r\n          title: 'Consider Stronger Algorithm',\r\n          description: `Algorithm ${state.decoded.header.alg} is widely used but consider stronger alternatives like ES256 or PS256 for better security.`\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Check for missing key ID in asymmetric algorithms\r\n    if (state.decoded.header.alg && \r\n        !state.decoded.header.alg.startsWith('HS') && \r\n        !state.decoded.header.kid) {\r\n      issues.push({\r\n        id: 'missing-kid',\r\n        severity: 'low',\r\n        title: 'Missing Key Identifier',\r\n        description: 'This token uses an asymmetric algorithm but has no \"kid\" (key ID) claim in the header.'\r\n      });\r\n    }\r\n    \r\n    // Check for proper values in standard claims\r\n    if (state.decoded.payload.iat && typeof state.decoded.payload.iat !== 'number') {\r\n      issues.push({\r\n        id: 'invalid-iat',\r\n        severity: 'medium',\r\n        title: 'Invalid Issued At Claim',\r\n        description: 'The \"iat\" claim should be a numeric timestamp.'\r\n      });\r\n    }\r\n    \r\n    if (state.decoded.payload.nbf) {\r\n      const nbfTime = state.decoded.payload.nbf * 1000;\r\n      if (nbfTime > Date.now()) {\r\n        issues.push({\r\n          id: 'future-nbf',\r\n          severity: 'medium',\r\n          title: 'Token Not Yet Valid',\r\n          description: `This token is not valid until ${new Date(nbfTime).toLocaleString()}.`\r\n        });\r\n      }\r\n    }\r\n    \r\n    dispatch({ type: 'SET_SECURITY_ISSUES', payload: issues });\r\n  };\r\n\r\n  // Generate a shareable URL with the token compressed in the hash\r\n  const shareToken = (): string => {\r\n    if (!state.token) return window.location.href.split('#')[0];\r\n    \r\n    const compressedToken = compressToEncodedURIComponent(state.token);\r\n    const url = `${window.location.href.split('#')[0]}#${compressedToken}`;\r\n    return url;\r\n  };\r\n\r\n  // Load token from URL hash\r\n  const loadFromHash = async (): Promise<boolean> => {\r\n    const hash = window.location.hash.substring(1);\r\n    if (hash) {\r\n      try {\r\n        const decompressedToken = decompressFromEncodedURIComponent(hash);\r\n        if (decompressedToken) {\r\n          await decodeToken(decompressedToken);\r\n          return true;\r\n        }\r\n      } catch (e) {\r\n        console.error('Failed to load token from URL hash:', e);\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <JwtContext.Provider \r\n      value={{ \r\n        state, \r\n        dispatch,\r\n        decodeToken,\r\n        verifySignature,\r\n        analyzeToken,\r\n        shareToken,\r\n        loadFromHash\r\n      }}\r\n    >\r\n      {children}\r\n    </JwtContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the JWT context\r\nexport const useJwt = () => {\r\n  const context = useContext(JwtContext);\r\n  if (context === undefined) {\r\n    throw new Error('useJwt must be used within a JwtProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Legacy simplified provider for backward compatibility\r\nexport const JwtContextProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  // Implementation using the enhanced JwtProvider\r\n  const jwtContext = useJwt();\r\n  \r\n  return <>{children}</>;\r\n};\r\n\r\nexport const useJwtContext = () => {\r\n  return useJwt();\r\n};","import React, { ReactNode } from 'react';\r\n\r\nexport type TextSize = 'xs' | 'sm' | 'base' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl' | '7xl' | '8xl' | '9xl';\r\nexport type TextWeight = 'thin' | 'extralight' | 'light' | 'normal' | 'medium' | 'semibold' | 'bold' | 'extrabold' | 'black';\r\nexport type TextAlign = 'left' | 'center' | 'right' | 'justify';\r\nexport type TextTransform = 'uppercase' | 'lowercase' | 'capitalize' | 'normal';\r\nexport type TextColor = \r\n  | 'default'\r\n  | 'primary'\r\n  | 'secondary'\r\n  | 'success'\r\n  | 'danger'\r\n  | 'warning'\r\n  | 'info'\r\n  | 'muted'\r\n  | 'white'\r\n  | 'black'\r\n  | 'error';\r\n\r\nexport interface ResponsiveTextSize {\r\n  base?: TextSize;\r\n  sm?: TextSize;\r\n  md?: TextSize;\r\n  lg?: TextSize;\r\n  xl?: TextSize;\r\n}\r\n\r\nexport interface TextProps {\r\n  /** The content to be displayed */\r\n  children: ReactNode;\r\n  /** Element to render as */\r\n  as?: 'p' | 'span' | 'div' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'label';\r\n  /** Text size that can be responsive across breakpoints */\r\n  size?: TextSize | ResponsiveTextSize;\r\n  /** Font weight */\r\n  weight?: TextWeight;\r\n  /** Text alignment */\r\n  align?: TextAlign;\r\n  /** Text color variant */\r\n  color?: TextColor;\r\n  /** Whether the text should be truncated with an ellipsis */\r\n  truncate?: boolean | number;\r\n  /** Maximum number of lines before truncation */\r\n  lineClamp?: number;\r\n  /** Text transform */\r\n  transform?: TextTransform;\r\n  /** Whether text is italic */\r\n  italic?: boolean;\r\n  /** Whether text has underline */\r\n  underline?: boolean;\r\n  /** Whether text has line-through */\r\n  lineThrough?: boolean;\r\n  /** Whether text should be rendered with adaptive leading (line-height) */\r\n  adaptiveLeading?: boolean;\r\n  /** Custom CSS class */\r\n  className?: string;\r\n  /** Alias for 'as' property - Semantic variant */\r\n  variant?: 'p' | 'span' | 'div' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'label';\r\n  /** Alias for color=\"danger\" */\r\n  error?: boolean;\r\n  /** Explicit line height */\r\n  lineHeight?: 'none' | 'tight' | 'snug' | 'normal' | 'relaxed' | 'loose';\r\n  /** Margin - shorthand for all margins */\r\n  m?: number | string;\r\n  /** Margin top */\r\n  mt?: number | string;\r\n  /** Margin bottom */\r\n  mb?: number | string;\r\n  /** Margin left */\r\n  ml?: number | string;\r\n  /** Margin right */\r\n  mr?: number | string;\r\n  /** Margin left & right */\r\n  mx?: number | string;\r\n  /** Margin top & bottom */\r\n  my?: number | string;\r\n  /** Padding - shorthand for all paddings */\r\n  p?: number | string;\r\n  /** Padding top */\r\n  pt?: number | string;\r\n  /** Padding bottom */\r\n  pb?: number | string;\r\n  /** Padding left */\r\n  pl?: number | string;\r\n  /** Padding right */\r\n  pr?: number | string;\r\n  /** Padding left & right */\r\n  px?: number | string;\r\n  /** Padding top & bottom */\r\n  py?: number | string;\r\n  /** Inline style object */\r\n  style?: React.CSSProperties;\r\n}\r\n\r\n/**\r\n * Text - A component for displaying text with consistent typography styles,\r\n * responsive sizing, and advanced display options.\r\n */\r\nexport const Text: React.FC<TextProps> = ({\r\n  children,\r\n  as: Component = 'p',\r\n  size = 'md',\r\n  weight = 'normal',\r\n  align,\r\n  color = 'default',\r\n  truncate = false,\r\n  lineClamp,\r\n  transform,\r\n  italic = false,\r\n  underline = false,\r\n  lineThrough = false,\r\n  adaptiveLeading = true,\r\n  className = '',\r\n  variant,\r\n  error = false,\r\n  lineHeight,\r\n  m,\r\n  mt,\r\n  mb,\r\n  ml,\r\n  mr,\r\n  mx,\r\n  my,\r\n  p,\r\n  pt,\r\n  pb,\r\n  pl,\r\n  pr,\r\n  px,\r\n  py,\r\n  style,\r\n}) => {\r\n  // Use variant as a fallback for Component if provided\r\n  const ElementType = variant || Component;\r\n  \r\n  // Use error prop to override color if true\r\n  const effectiveColor = error ? 'danger' : color;\r\n  \r\n  // Size classes\r\n  const sizeClasses = {\r\n    xs: 'text-xs',\r\n    sm: 'text-sm',\r\n    base: 'text-base',\r\n    md: 'text-base',\r\n    lg: 'text-lg',\r\n    xl: 'text-xl',\r\n    '2xl': 'text-2xl',\r\n    '3xl': 'text-3xl',\r\n    '4xl': 'text-4xl',\r\n    '5xl': 'text-5xl',\r\n    '6xl': 'text-6xl',\r\n    '7xl': 'text-7xl',\r\n    '8xl': 'text-8xl',\r\n    '9xl': 'text-9xl',\r\n  };\r\n\r\n  // Get responsive size classes\r\n  const getResponsiveSizeClasses = () => {\r\n    if (typeof size === 'string') {\r\n      return sizeClasses[size];\r\n    }\r\n\r\n    return [\r\n      size.base ? sizeClasses[size.base] : 'text-base',\r\n      size.sm ? `sm:${sizeClasses[size.sm]}` : '',\r\n      size.md ? `md:${sizeClasses[size.md]}` : '',\r\n      size.lg ? `lg:${sizeClasses[size.lg]}` : '',\r\n      size.xl ? `xl:${sizeClasses[size.xl]}` : '',\r\n    ].filter(Boolean).join(' ');\r\n  };\r\n\r\n  // Font weight classes\r\n  const weightClasses = {\r\n    thin: 'font-thin',\r\n    extralight: 'font-extralight',\r\n    light: 'font-light',\r\n    normal: 'font-normal',\r\n    medium: 'font-medium',\r\n    semibold: 'font-semibold',\r\n    bold: 'font-bold',\r\n    extrabold: 'font-extrabold',\r\n    black: 'font-black',\r\n  };\r\n\r\n  // Text alignment classes\r\n  const alignClasses = align ? {\r\n    left: 'text-left',\r\n    center: 'text-center',\r\n    right: 'text-right',\r\n    justify: 'text-justify',\r\n  }[align] : '';\r\n\r\n  // Color classes\r\n  const colorClasses = {\r\n    default: 'text-gray-800 dark:text-gray-200',\r\n    primary: 'text-primary-600 dark:text-primary-400',\r\n    secondary: 'text-secondary-600 dark:text-secondary-400',\r\n    success: 'text-green-600 dark:text-green-400',\r\n    danger: 'text-red-600 dark:text-red-400',\r\n    warning: 'text-yellow-600 dark:text-yellow-400',\r\n    info: 'text-blue-600 dark:text-blue-400',\r\n    muted: 'text-gray-500 dark:text-gray-500',\r\n    white: 'text-white',\r\n    black: 'text-black',\r\n    error: 'text-red-600 dark:text-red-400', // Added error property with same styling as danger\r\n  };\r\n\r\n  // Text transform classes\r\n  const transformClasses = transform ? {\r\n    uppercase: 'uppercase',\r\n    lowercase: 'lowercase',\r\n    capitalize: 'capitalize',\r\n    normal: 'normal-case',\r\n  }[transform] : '';\r\n\r\n  // Style classes\r\n  const styleClasses = [\r\n    italic ? 'italic' : '',\r\n    underline ? 'underline' : '',\r\n    lineThrough ? 'line-through' : '',\r\n  ].filter(Boolean).join(' ');\r\n\r\n  // Truncation and line clamp classes\r\n  const getTruncateClass = () => {\r\n    if (truncate === true) {\r\n      return 'truncate';\r\n    }\r\n    if (typeof truncate === 'number') {\r\n      return `overflow-hidden text-ellipsis whitespace-nowrap max-w-[${truncate}ch]`;\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const lineClampClass = lineClamp ? `line-clamp-${lineClamp}` : '';\r\n\r\n  // Line height classes (override adaptive leading if specified)\r\n  const lineHeightClass = lineHeight ? `leading-${lineHeight}` : '';\r\n\r\n  // Adaptive leading (line-height) - only if no explicit lineHeight provided\r\n  const getAdaptiveLeadingClass = () => {\r\n    if (lineHeightClass || !adaptiveLeading) return '';\r\n\r\n    const textSize = typeof size === 'string' ? size : size.base || 'md';\r\n    \r\n    // Apply appropriate line height based on text size\r\n    if (['xs', 'sm', 'md'].includes(textSize)) {\r\n      return 'leading-normal';\r\n    } else if (['lg', 'xl', '2xl'].includes(textSize)) {\r\n      return 'leading-relaxed';\r\n    } else {\r\n      return 'leading-tight';\r\n    }\r\n  };\r\n\r\n  // Generate spacing classes\r\n  const getSpacingClasses = () => {\r\n    const spacingClasses = [];\r\n    \r\n    // Margin classes\r\n    if (m !== undefined) spacingClasses.push(`m-${m}`);\r\n    if (mt !== undefined) spacingClasses.push(`mt-${mt}`);\r\n    if (mb !== undefined) spacingClasses.push(`mb-${mb}`);\r\n    if (ml !== undefined) spacingClasses.push(`ml-${ml}`);\r\n    if (mr !== undefined) spacingClasses.push(`mr-${mr}`);\r\n    if (mx !== undefined) spacingClasses.push(`mx-${mx}`);\r\n    if (my !== undefined) spacingClasses.push(`my-${my}`);\r\n    \r\n    // Padding classes\r\n    if (p !== undefined) spacingClasses.push(`p-${p}`);\r\n    if (pt !== undefined) spacingClasses.push(`pt-${pt}`);\r\n    if (pb !== undefined) spacingClasses.push(`pb-${pb}`);\r\n    if (pl !== undefined) spacingClasses.push(`pl-${pl}`);\r\n    if (pr !== undefined) spacingClasses.push(`pr-${pr}`);\r\n    if (px !== undefined) spacingClasses.push(`px-${px}`);\r\n    if (py !== undefined) spacingClasses.push(`py-${py}`);\r\n    \r\n    return spacingClasses.join(' ');\r\n  };\r\n\r\n  // Combine all classes\r\n  const textClasses = [\r\n    getResponsiveSizeClasses(),\r\n    weightClasses[weight],\r\n    alignClasses,\r\n    colorClasses[effectiveColor],\r\n    transformClasses,\r\n    styleClasses,\r\n    getTruncateClass(),\r\n    lineClampClass,\r\n    lineHeightClass || getAdaptiveLeadingClass(),\r\n    getSpacingClasses(),\r\n    className\r\n  ].filter(Boolean).join(' ');\r\n\r\n  return (\r\n    <ElementType className={textClasses} style={style}>\r\n      {children}\r\n    </ElementType>\r\n  );\r\n};\r\n\r\nexport default Text;","import React, { useState, useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport Card from '../../design-system/components/layout/Card';\r\nimport Button from '../../design-system/components/inputs/Button';\r\nimport { Alert } from '../../design-system/components/feedback/Alert';\r\nimport { Badge } from '../../design-system/components/display';\r\nimport { Tooltip } from '../../design-system/components/overlays';\r\nimport { useJwt } from './context/JwtContext';\r\nimport { Text } from '../../design-system/components/typography';\r\n\r\nconst JwtDecoder: React.FC = () => {\r\n  // Use the enhanced context instead of local state\r\n  const { state, decodeToken, verifySignature, analyzeToken } = useJwt();\r\n  const { token, decoded, error, isVerified, verificationKey, securityIssues, parsingWarnings } = state;\r\n  \r\n  const [jwtToken, setJwtToken] = useState<string>('');\r\n  const [secret, setSecret] = useState<string>('');\r\n  const [copied, setCopied] = useState<boolean>(false);\r\n  const [copiedSection, setCopiedSection] = useState<string | null>(null);\r\n  const [activeTab, setActiveTab] = useState<'json' | 'table'>('json');  // Setting default tab to JSON\r\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<string>('');\r\n  const [showIterationTooltip, setShowIterationTooltip] = useState<boolean>(false);\r\n  \r\n  // Update local state from context state\r\n  useEffect(() => {\r\n    setJwtToken(token);\r\n  }, [token]);\r\n  \r\n  useEffect(() => {\r\n    setSecret(verificationKey);\r\n  }, [verificationKey]);\r\n\r\n  // Decode JWT token when it changes in the textarea\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      if (jwtToken !== token) {\r\n        decodeToken(jwtToken);\r\n      }\r\n    }, 300); // Debounce\r\n    \r\n    return () => clearTimeout(timeoutId);\r\n  }, [jwtToken, token, decodeToken]);\r\n  \r\n  // Reset copied state after 2 seconds\r\n  useEffect(() => {\r\n    if (copied) {\r\n      const timer = setTimeout(() => {\r\n        setCopied(false);\r\n        setCopiedSection(null);\r\n      }, 2000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [copied]);\r\n\r\n  // Show iteration tooltip when token is successfully decoded\r\n  useEffect(() => {\r\n    if (decoded?.header && decoded?.payload) {\r\n      // Show tooltip with a slight delay for better UX\r\n      const timer = setTimeout(() => {\r\n        setShowIterationTooltip(true);\r\n      }, 1000);\r\n      return () => clearTimeout(timer);\r\n    } else {\r\n      setShowIterationTooltip(false);\r\n    }\r\n  }, [decoded]);\r\n  \r\n  const handleCopyContent = (content: string, section: string) => {\r\n    navigator.clipboard.writeText(content);\r\n    setCopied(true);\r\n    setCopiedSection(section);\r\n  };\r\n  \r\n  const handleReset = () => {\r\n    setJwtToken('');\r\n    setSecret('');\r\n    setSelectedAlgorithm('');\r\n  };\r\n\r\n  // Get next iteration suggestions based on current token state\r\n  const getIterationSuggestions = (): JSX.Element => {\r\n    const suggestions: JSX.Element[] = [];\r\n\r\n    // If token is decoded but not verified\r\n    if (decoded?.header && !isVerified) {\r\n      suggestions.push(\r\n        <li key=\"verify\">Try to verify the token signature with a secret or public key</li>\r\n      );\r\n    }\r\n\r\n    // If token uses an algorithm that might be vulnerable\r\n    if (decoded?.header?.alg === 'none' || decoded?.header?.alg === 'HS256') {\r\n      suggestions.push(\r\n        <li key=\"alg\">Test for algorithm confusion attacks by changing the algorithm</li>\r\n      );\r\n    }\r\n\r\n    // If token contains an expiration claim\r\n    if (decoded?.payload?.exp) {\r\n      const expTime = decoded.payload.exp as number;\r\n      if (isExpired(expTime)) {\r\n        suggestions.push(\r\n          <li key=\"exp\">Generate a new token with a future expiration time</li>\r\n        );\r\n      } else {\r\n        suggestions.push(\r\n          <li key=\"exp-test\">Test token rejection by using an expired token</li>\r\n        );\r\n      }\r\n    }\r\n\r\n    // If token doesn't have certain security claims\r\n    if (!decoded?.payload?.jti) {\r\n      suggestions.push(\r\n        <li key=\"jti\">Add a JWT ID (jti) claim for better security</li>\r\n      );\r\n    }\r\n\r\n    // If no specific suggestions, provide general ones\r\n    if (suggestions.length === 0) {\r\n      suggestions.push(\r\n        <li key=\"general-1\">Modify the payload to test how the application handles different claims</li>,\r\n        <li key=\"general-2\">Test token with different signature algorithms</li>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"text-sm\">\r\n        <Text weight=\"bold\" className=\"mb-1\">Next steps to try:</Text>\r\n        <ul className=\"list-disc pl-5 space-y-1\">\r\n          {suggestions}\r\n        </ul>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleGenerateExample = () => {\r\n    // Generate an example token that will expire in 1 hour\r\n    const now = Math.floor(Date.now() / 1000);\r\n    const header = { \r\n      alg: 'HS256', \r\n      typ: 'JWT',\r\n      kid: 'example-key-id'\r\n    };\r\n    const payload = {\r\n      // Standard JWT claims\r\n      sub: '1234567890',\r\n      name: 'John Doe',\r\n      email: 'john.doe@example.com',\r\n      iss: 'https://auth.example.com',\r\n      aud: 'client-id-123',\r\n      iat: now,\r\n      exp: now + 3600, // 1 hour from now\r\n      nbf: now,\r\n      jti: crypto.randomUUID().replace(/-/g, ''),\r\n      \r\n      // Additional common claims\r\n      given_name: 'John',\r\n      family_name: 'Doe',\r\n      nickname: 'Johnny',\r\n      preferred_username: 'john.doe',\r\n      picture: 'https://example.com/profile/johndoe.jpg',\r\n      website: 'https://johndoe.example.com',\r\n      gender: 'male',\r\n      birthdate: '1990-01-01',\r\n      phone_number: '+1-202-555-0123',\r\n      address: {\r\n        street_address: '123 Main St',\r\n        locality: 'Anytown',\r\n        region: 'State',\r\n        postal_code: '12345',\r\n        country: 'US'\r\n      },\r\n      roles: ['user', 'admin'],\r\n      scope: 'openid profile email',\r\n      auth_time: now - 300, // 5 minutes ago\r\n      sid: 'session_id_123456',\r\n      amr: ['pwd'], // Authentication Methods References\r\n      azp: 'authorized-party-123', // Authorized party\r\n    };\r\n    \r\n    // This is just a mock token for demonstration\r\n    const exampleToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImV4YW1wbGUta2V5LWlkIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiZW1haWwiOiJqb2huLmRvZUBleGFtcGxlLmNvbSIsImlzcyI6Imh0dHBzOi8vYXV0aC5leGFtcGxlLmNvbSIsImF1ZCI6ImNsaWVudC1pZC0xMjMiLCJpYXQiOjE2ODMyMDM1MjQsImV4cCI6MTY4MzIwNzEyNCwibmJmIjoxNjgzMjAzNTI0LCJqdGkiOiI4OTg5OGVlOGQ1YjI0ZjdkYjkzM2MwZGFiZDQzMWJjOCIsImdpdmVuX25hbWUiOiJKb2huIiwiZmFtaWx5X25hbWUiOiJEb2UiLCJuaWNrbmFtZSI6IkpvaG5ueSIsInByZWZlcnJlZF91c2VybmFtZSI6ImpvaG4uZG9lIiwicGljdHVyZSI6Imh0dHBzOi8vZXhhbXBsZS5jb20vcHJvZmlsZS9qb2huZG9lLmpwZyIsIndlYnNpdGUiOiJodHRwczovL2pvaG5kb2UuZXhhbXBsZS5jb20iLCJnZW5kZXIiOiJtYWxlIiwiYmlydGhkYXRlIjoiMTk5MC0wMS0wMSIsInBob25lX251bWJlciI6IisxLTIwMi01NTUtMDEyMyIsImFkZHJlc3MiOnsic3RyZWV0X2FkZHJlc3MiOiIxMjMgTWFpbiBTdCIsImxvY2FsaXR5IjoiQW55dG93biIsInJlZ2lvbiI6IlN0YXRlIiwicG9zdGFsX2NvZGUiOiIxMjM0NSIsImNvdW50cnkiOiJVUyJ9LCJyb2xlcyI6WyJ1c2VyIiwiYWRtaW4iXSwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsImF1dGhfdGltZSI6MTY4MzIwMzIyNCwic2lkIjoic2Vzc2lvbl9pZF8xMjM0NTYiLCJhbXIiOlsicHdkIl0sImF6cCI6ImF1dGhvcml6ZWQtcGFydHktMTIzIn0.xlj7zV5XM7XQg6qNTDxXkpnyb9-4k9JSbzWl6YCGrX4';\r\n    setJwtToken(exampleToken);\r\n  };\r\n  \r\n  const handleVerifySignature = () => {\r\n    verifySignature(selectedAlgorithm, secret);\r\n  };\r\n  \r\n  const formatDate = (timestamp: number): string => {\r\n    try {\r\n      return new Date(timestamp * 1000).toLocaleString();\r\n    } catch (e) {\r\n      return 'Invalid date';\r\n    }\r\n  };\r\n  \r\n  const isExpired = (exp: number): boolean => {\r\n    return Date.now() > exp * 1000;\r\n  };\r\n  \r\n  // Get a description for standard JWT claims\r\n  const getClaimDescription = (key: string): string => {\r\n    switch(key) {\r\n      case 'sub': return 'Subject (user) identifier';\r\n      case 'iss': return 'Issuer of the token';\r\n      case 'aud': return 'Audience the token is intended for';\r\n      case 'exp': return 'Expiration time (when token becomes invalid)';\r\n      case 'nbf': return 'Not before time (when token starts being valid)';\r\n      case 'iat': return 'Issued at time (when token was issued)';\r\n      case 'jti': return 'JWT ID (unique identifier for this token)';\r\n      case 'name': return 'User name';\r\n      case 'given_name': return 'User first name';\r\n      case 'family_name': return 'User last name';\r\n      case 'email': return 'User email address';\r\n      case 'roles': return 'User roles/permissions';\r\n      case 'scope': return 'OAuth 2.0 scopes';\r\n      case 'sid': return 'Session ID';\r\n      case 'auth_time': return 'Time when authentication occurred';\r\n      default: return 'Custom claim';\r\n    }\r\n  };\r\n  \r\n  // Get token part colors\r\n  const getTokenPartColor = (part: string): string => {\r\n    switch(part) {\r\n      case 'header': return 'text-blue-600 dark:text-blue-400';\r\n      case 'payload': return 'text-purple-600 dark:text-purple-400';\r\n      case 'signature': return 'text-red-600 dark:text-red-400';\r\n      default: return 'text-gray-600';\r\n    }\r\n  };\r\n\r\n  // Get security issue severity color\r\n  const getSeverityColor = (severity: string): string => {\r\n    switch(severity) {\r\n      case 'high': return 'text-red-600 dark:text-red-400';\r\n      case 'medium': return 'text-orange-600 dark:text-orange-400';\r\n      case 'low': return 'text-yellow-600 dark:text-yellow-400';\r\n      case 'info': return 'text-blue-600 dark:text-blue-400';\r\n      default: return 'text-gray-600 dark:text-gray-400';\r\n    }\r\n  };\r\n  \r\n  // SEO metadata\r\n  const pageTitle = \"JWT Decoder | MyDebugger\";\r\n  const pageDescription = \"Decode and verify JSON Web Tokens. Analyze headers, payload claims, and verify signatures securely in your browser.\";\r\n  \r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{pageTitle}</title>\r\n        <meta name=\"description\" content={pageDescription} />\r\n        <meta property=\"og:title\" content={pageTitle} />\r\n        <meta property=\"og:description\" content={pageDescription} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:url\" content=\"https://mydebugger.vercel.app/jwt\" />\r\n        <meta name=\"twitter:card\" content=\"summary\" />\r\n        <meta name=\"twitter:title\" content={pageTitle} />\r\n        <meta name=\"twitter:description\" content={pageDescription} />\r\n        <link rel=\"canonical\" href=\"https://mydebugger.vercel.app/jwt\" />\r\n      </Helmet>\r\n    \r\n      <div className=\"flex justify-center\">\r\n        <div className=\"w-full max-w-5xl px-4 py-6\">\r\n          <div className=\"text-center mb-8\">\r\n            <h1 className=\"text-3xl font-bold mb-2\">JSON Web Token (JWT) Debugger</h1>\r\n            <p className=\"text-gray-600 dark:text-gray-400\">\r\n              Decode, verify, and analyze JSON Web Tokens (JWT) instantly. All processing happens in your browser.\r\n            </p>\r\n          </div>\r\n          \r\n          <div className=\"mb-6 bg-yellow-50 dark:bg-yellow-900/20 p-4 border border-yellow-200 dark:border-yellow-800 rounded-md\">\r\n            <p className=\"text-yellow-800 dark:text-yellow-200 flex items-center justify-center\">\r\n              <span className=\"mr-2\">🔒</span>\r\n              <span className=\"font-bold\">For your protection:</span> All JWT debugging and validation happens entirely in your browser. \r\n              Your tokens and keys are never sent to any server.\r\n            </p>\r\n          </div>\r\n        \r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Left panel - Input */}\r\n            <div>\r\n              <Card isElevated className=\"h-full flex flex-col\">\r\n                <div className=\"p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center\">\r\n                  <h2 className=\"text-xl font-semibold\">Encoded JWT</h2>\r\n                  <Button onClick={handleGenerateExample} variant=\"light\" size=\"sm\">Generate example</Button>\r\n                </div>\r\n                \r\n                <div className=\"p-4 flex-1 flex flex-col\">\r\n                  <textarea\r\n                    id=\"jwt-input\"\r\n                    className=\"w-full font-mono text-sm rounded-md border border-gray-300 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-100 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50 flex-1 min-h-[300px]\"\r\n                    value={jwtToken}\r\n                    onChange={(e) => setJwtToken(e.target.value)}\r\n                    placeholder=\"Paste your JWT token here... (supports Bearer tokens and plain JWT)\"\r\n                    autoFocus\r\n                    spellCheck=\"false\"\r\n                  />\r\n                  \r\n                  {/* Continue to iterate tooltip */}\r\n                  {showIterationTooltip && decoded && (\r\n                    <div className=\"mt-4 flex justify-end\">\r\n                      <Tooltip\r\n                        content={getIterationSuggestions()}\r\n                        position=\"bottom\"\r\n                        size=\"lg\"\r\n                      >\r\n                        <Badge variant=\"warning\" className=\"cursor-help flex items-center\">\r\n                          <span>👉 Continue to iterate?</span>\r\n                        </Badge>\r\n                      </Tooltip>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {error && (\r\n                    <Alert type=\"error\" className=\"mt-4\">{error}</Alert>\r\n                  )}\r\n\r\n                  {parsingWarnings && parsingWarnings.length > 0 && (\r\n                    <Alert type=\"warning\" className=\"mt-4\">\r\n                      <div className=\"font-medium mb-1\">Parsing Warnings:</div>\r\n                      <ul className=\"list-disc pl-5 text-sm\">\r\n                        {parsingWarnings.map((warning, index) => (\r\n                          <li key={index}>{warning}</li>\r\n                        ))}\r\n                      </ul>\r\n                    </Alert>\r\n                  )}\r\n                  \r\n                  {decoded && (\r\n                    <div className=\"mt-4 bg-gray-50 dark:bg-gray-800 p-3 rounded-md border border-gray-200 dark:border-gray-700 font-mono text-sm overflow-x-auto break-all\">\r\n                      <div className=\"flex flex-col sm:flex-row\">\r\n                        <div className=\"sm:w-20 text-xs uppercase font-semibold text-gray-500 dark:text-gray-400 mb-1 sm:mb-0\">Header:</div>\r\n                        <div className={`${getTokenPartColor('header')} flex-1`}>{decoded.raw.header}</div>\r\n                      </div>\r\n                      <div className=\"flex flex-col sm:flex-row mt-2\">\r\n                        <div className=\"sm:w-20 text-xs uppercase font-semibold text-gray-500 dark:text-gray-400 mb-1 sm:mb-0\">Payload:</div>\r\n                        <div className={`${getTokenPartColor('payload')} flex-1`}>{decoded.raw.payload}</div>\r\n                      </div>\r\n                      <div className=\"flex flex-col sm:flex-row mt-2\">\r\n                        <div className=\"sm:w-20 text-xs uppercase font-semibold text-gray-500 dark:text-gray-400 mb-1 sm:mb-0\">Signature:</div>\r\n                        <div className={`${getTokenPartColor('signature')} flex-1`}>{decoded.raw.signature}</div>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  <div className=\"mt-4 flex justify-between\">\r\n                    <div>\r\n                      <Button onClick={handleReset} variant=\"light\">Reset</Button>\r\n                    </div>\r\n                    <div>\r\n                      <Button \r\n                        onClick={() => handleCopyContent(jwtToken, 'token')} \r\n                        variant=\"primary\"\r\n                        disabled={!jwtToken}\r\n                      >\r\n                        {copied && copiedSection === 'token' ? 'Copied!' : 'Copy Token'}\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n            </div>\r\n            \r\n            {/* Right panel - Decoded data */}\r\n            <div>\r\n              <Card isElevated className=\"h-full flex flex-col\">\r\n                <div className=\"p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center\">\r\n                  <h2 className=\"text-xl font-semibold\">Decoded Data</h2>\r\n                  <div className=\"flex border border-gray-200 dark:border-gray-700 rounded\">\r\n                    <button \r\n                      className={`px-3 py-1 text-sm rounded-l ${activeTab === 'json' ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300' : 'bg-gray-50 dark:bg-gray-800 text-gray-700 dark:text-gray-300'}`}\r\n                      onClick={() => setActiveTab('json')}\r\n                    >\r\n                      JSON\r\n                    </button>\r\n                    <button \r\n                      className={`px-3 py-1 text-sm rounded-r ${activeTab === 'table' ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300' : 'bg-gray-50 dark:bg-gray-800 text-gray-700 dark:text-gray-300'}`}\r\n                      onClick={() => setActiveTab('table')}\r\n                    >\r\n                      Table\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"p-4 flex-1 flex flex-col overflow-y-auto\">\r\n                  {!decoded ? (\r\n                    <div className=\"flex-1 flex items-center justify-center text-gray-500 dark:text-gray-400 text-center p-6\">\r\n                      <div>\r\n                        <div className=\"mb-2\">Paste a JWT token on the left to decode it</div>\r\n                        <div className=\"text-sm\">\r\n                          <Button onClick={handleGenerateExample} variant=\"light\" size=\"sm\">\r\n                            Or try an example token\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"flex-1\">\r\n                      <div>\r\n                        <h3 className=\"font-medium text-gray-800 dark:text-gray-200 mb-2 flex items-center\">\r\n                          <span className={getTokenPartColor('header')}>HEADER</span>\r\n                          <Button \r\n                            onClick={() => handleCopyContent(JSON.stringify(decoded.header, null, 2), 'header')} \r\n                            variant=\"light\" \r\n                            size=\"xs\" \r\n                            className=\"ml-2\"\r\n                          >\r\n                            {copied && copiedSection === 'header' ? 'Copied!' : 'Copy'}\r\n                          </Button>\r\n                        </h3>\r\n                        \r\n                        {activeTab === 'json' ? (\r\n                          <pre className=\"bg-gray-50 dark:bg-gray-800 p-3 rounded-md overflow-x-auto mb-4 text-sm\">\r\n                            {JSON.stringify(decoded.header, null, 2)}\r\n                          </pre>\r\n                        ) : (\r\n                          <div className=\"bg-gray-50 dark:bg-gray-800 rounded-md overflow-x-auto mb-4\">\r\n                            <table className=\"w-full text-sm\">\r\n                              <thead className=\"border-b border-gray-200 dark:border-gray-700\">\r\n                                <tr>\r\n                                  <th className=\"text-left py-2 px-3\">Name</th>\r\n                                  <th className=\"text-left py-2 px-3\">Value</th>\r\n                                </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                {Object.entries(decoded.header).map(([key, value]) => (\r\n                                  <tr key={key} className=\"border-b border-gray-100 dark:border-gray-800\">\r\n                                    <td className=\"py-2 px-3 font-medium\">{key}</td>\r\n                                    <td className=\"py-2 px-3\">\r\n                                      <Tooltip content={key === 'alg' ? `Algorithm used to sign the token` : key === 'typ' ? 'Token type' : `Header claim: ${key}`}>\r\n                                        <span className=\"cursor-help border-b border-dotted border-gray-400\">{String(value)}</span>\r\n                                      </Tooltip>\r\n                                    </td>\r\n                                  </tr>\r\n                                ))}\r\n                              </tbody>\r\n                            </table>\r\n                          </div>\r\n                        )}\r\n                        \r\n                        <h3 className=\"font-medium text-gray-800 dark:text-gray-200 mb-2 flex items-center\">\r\n                          <span className={getTokenPartColor('payload')}>PAYLOAD</span>\r\n                          <Button \r\n                            onClick={() => handleCopyContent(JSON.stringify(decoded.payload, null, 2), 'payload')} \r\n                            variant=\"light\" \r\n                            size=\"xs\" \r\n                            className=\"ml-2\"\r\n                          >\r\n                            {copied && copiedSection === 'payload' ? 'Copied!' : 'Copy'}\r\n                          </Button>\r\n                        </h3>\r\n                        \r\n                        {activeTab === 'json' ? (\r\n                          <pre className=\"bg-gray-50 dark:bg-gray-800 p-3 rounded-md overflow-x-auto text-sm\">\r\n                            {JSON.stringify(decoded.payload, null, 2)}\r\n                          </pre>\r\n                        ) : (\r\n                          <div className=\"bg-gray-50 dark:bg-gray-800 rounded-md overflow-x-auto\">\r\n                            <table className=\"w-full text-sm\">\r\n                              <thead className=\"border-b border-gray-200 dark:border-gray-700\">\r\n                                <tr>\r\n                                  <th className=\"text-left py-2 px-3\">Claim</th>\r\n                                  <th className=\"text-left py-2 px-3\">Value</th>\r\n                                </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                {Object.entries(decoded.payload).map(([key, value]) => (\r\n                                  <tr key={key} className=\"border-b border-gray-100 dark:border-gray-800\">\r\n                                    <td className=\"py-2 px-3 font-medium\">{key}</td>\r\n                                    <td className=\"py-2 px-3\">\r\n                                      <Tooltip content={getClaimDescription(key)}>\r\n                                        <span className=\"cursor-help border-b border-dotted border-gray-400\">\r\n                                          {key === 'exp' || key === 'iat' || key === 'nbf' ? (\r\n                                            <div>\r\n                                              <div>{String(value)}</div>\r\n                                              <div className={`text-xs mt-1 ${key === 'exp' && isExpired(value as number) ? 'text-red-600 dark:text-red-400' : 'text-gray-500 dark:text-gray-400'}`}>\r\n                                                {formatDate(value as number)}\r\n                                                {key === 'exp' && (\r\n                                                  <span className=\"ml-2\">\r\n                                                    {isExpired(value as number) \r\n                                                      ? <Badge color=\"danger\" size=\"sm\">Expired</Badge> \r\n                                                      : <Badge color=\"success\" size=\"sm\">Valid</Badge>}\r\n                                                  </span>\r\n                                                )}\r\n                                              </div>\r\n                                            </div>\r\n                                          ) : typeof value === 'boolean' ? (\r\n                                            <span className={value ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}>\r\n                                              {String(value)}\r\n                                            </span>\r\n                                          ) : typeof value === 'object' && value !== null ? (\r\n                                            <details>\r\n                                              <summary className=\"cursor-pointer\">View Object</summary>\r\n                                              <pre className=\"mt-2 p-2 bg-gray-100 dark:bg-gray-900 rounded text-xs overflow-auto max-h-40\">\r\n                                                {JSON.stringify(value, null, 2)}\r\n                                              </pre>\r\n                                            </details>\r\n                                          ) : (\r\n                                            String(value)\r\n                                          )}\r\n                                        </span>\r\n                                      </Tooltip>\r\n                                    </td>\r\n                                  </tr>\r\n                                ))}\r\n                              </tbody>\r\n                            </table>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      \r\n                      {/* Continue to iterate tooltip */}\r\n                      {showIterationTooltip && (\r\n                        <div className=\"relative ml-4\">\r\n                          <Button \r\n                            variant=\"outline-info\" \r\n                            onClick={() => setShowIterationTooltip(false)}\r\n                            size=\"sm\"\r\n                            className=\"animate-pulse\"\r\n                          >\r\n                            Next steps\r\n                          </Button>\r\n                        </div>\r\n                      )}\r\n                      \r\n                      <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n                        <h3 className=\"font-medium text-gray-800 dark:text-gray-200 mb-2 flex items-center\">\r\n                          <span className={getTokenPartColor('signature')}>SIGNATURE</span>\r\n                          <Badge \r\n                            color={isVerified === true ? \"success\" : isVerified === false ? \"danger\" : \"light\"}\r\n                            className=\"ml-2\"\r\n                          >\r\n                            {isVerified === true ? \"Verified\" : isVerified === false ? \"Invalid\" : \"Not verified\"}\r\n                          </Badge>\r\n                        </h3>\r\n                        \r\n                        <div className=\"bg-gray-50 dark:bg-gray-800 p-3 rounded-md text-sm\">\r\n                          <p className=\"text-gray-600 dark:text-gray-400 mb-2\">\r\n                            Signature algorithm: <span className=\"font-medium\">{decoded.header.alg || 'HS256'}</span>\r\n                          </p>\r\n                          \r\n                          <div className=\"flex flex-col\">\r\n                            <div className=\"flex-grow mb-2\">\r\n                              <label htmlFor=\"algorithm-select\" className=\"block text-xs font-medium text-gray-600 dark:text-gray-400 mb-1\">\r\n                                Algorithm (optional, override header)\r\n                              </label>\r\n                              <select\r\n                                id=\"algorithm-select\"\r\n                                className=\"w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-100\"\r\n                                value={selectedAlgorithm}\r\n                                onChange={(e) => setSelectedAlgorithm(e.target.value)}\r\n                              >\r\n                                <option value=\"\">Use algorithm from header</option>\r\n                                <optgroup label=\"HMAC\">\r\n                                  <option value=\"HS256\">HS256</option>\r\n                                  <option value=\"HS384\">HS384</option>\r\n                                  <option value=\"HS512\">HS512</option>\r\n                                </optgroup>\r\n                                <optgroup label=\"RSA\">\r\n                                  <option value=\"RS256\">RS256</option>\r\n                                  <option value=\"RS384\">RS384</option>\r\n                                  <option value=\"RS512\">RS512</option>\r\n                                </optgroup>\r\n                                <optgroup label=\"RSA-PSS\">\r\n                                  <option value=\"PS256\">PS256</option>\r\n                                  <option value=\"PS384\">PS384</option>\r\n                                  <option value=\"PS512\">PS512</option>\r\n                                </optgroup>\r\n                                <optgroup label=\"ECDSA\">\r\n                                  <option value=\"ES256\">ES256</option>\r\n                                  <option value=\"ES384\">ES384</option>\r\n                                  <option value=\"ES512\">ES512</option>\r\n                                </optgroup>\r\n                              </select>\r\n                            </div>\r\n\r\n                            <div className=\"flex-grow mb-2\">\r\n                              <label htmlFor=\"secret-key\" className=\"block text-xs font-medium text-gray-600 dark:text-gray-400 mb-1\">\r\n                                Secret/Verification key\r\n                              </label>\r\n                              <textarea\r\n                                id=\"secret-key\"\r\n                                rows={3}\r\n                                className=\"w-full font-mono text-xs rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-100\"\r\n                                value={secret}\r\n                                onChange={(e) => setSecret(e.target.value)}\r\n                                placeholder={\r\n                                  decoded.header.alg?.startsWith('HS') \r\n                                  ? \"Enter your secret key... (raw string or base64 encoded)\" \r\n                                  : decoded.header.alg?.startsWith('RS') || decoded.header.alg?.startsWith('PS') \r\n                                  ? \"Enter your RSA public key (PEM format supported)\"\r\n                                  : \"Enter your verification key...\"\r\n                                }\r\n                              />\r\n                            </div>\r\n                            \r\n                            <div className=\"flex justify-end\">\r\n                              <Button \r\n                                onClick={handleVerifySignature} \r\n                                variant=\"primary\"\r\n                                size=\"sm\"\r\n                                disabled={!secret}\r\n                              >\r\n                                Verify\r\n                              </Button>\r\n                            </div>\r\n                          </div>\r\n                          \r\n                          {isVerified !== null && (\r\n                            <div className={`mt-3 p-2 rounded-md text-sm ${\r\n                              isVerified \r\n                                ? 'bg-green-50 dark:bg-green-900/20 text-green-800 dark:text-green-300' \r\n                                : 'bg-red-50 dark:bg-red-900/20 text-red-800 dark:text-red-300'\r\n                            }`}>\r\n                              <div className=\"flex items-center\">\r\n                                <svg\r\n                                  className=\"h-4 w-4 mr-2\"\r\n                                  fill=\"none\"\r\n                                  viewBox=\"0 0 24 24\"\r\n                                  stroke=\"currentColor\"\r\n                                >\r\n                                  {isVerified ? (\r\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n                                  ) : (\r\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n                                  )}\r\n                                </svg>\r\n                                <span>{isVerified ? 'Signature verified successfully' : 'Invalid signature'}</span>\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n\r\n                      {/* Security Issues */}\r\n                      {securityIssues && securityIssues.length > 0 && (\r\n                        <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n                          <h3 className=\"font-medium text-gray-800 dark:text-gray-200 mb-2 flex items-center\">\r\n                            <span>SECURITY ANALYSIS</span>\r\n                            <Badge \r\n                              color={securityIssues.some(i => i.severity === 'high') \r\n                                ? \"danger\" \r\n                                : securityIssues.some(i => i.severity === 'medium') \r\n                                  ? \"warning\" \r\n                                  : \"info\"}\r\n                              className=\"ml-2\"\r\n                            >\r\n                              {securityIssues.length} Issue{securityIssues.length !== 1 ? 's' : ''}\r\n                            </Badge>\r\n                          </h3>\r\n\r\n                          <div className=\"bg-gray-50 dark:bg-gray-800 rounded-md text-sm\">\r\n                            {securityIssues.map((issue) => (\r\n                              <div \r\n                                key={issue.id}\r\n                                className=\"p-3 border-b last:border-b-0 border-gray-100 dark:border-gray-700\"\r\n                              >\r\n                                <div className=\"flex justify-between items-center mb-1\">\r\n                                  <h4 className={`font-medium ${getSeverityColor(issue.severity)}`}>\r\n                                    {issue.title}\r\n                                  </h4>\r\n                                  <Badge \r\n                                    color={\r\n                                      issue.severity === 'high' ? \"danger\" :\r\n                                      issue.severity === 'medium' ? \"warning\" :\r\n                                      issue.severity === 'low' ? \"info\" : \"info\"\r\n                                    }\r\n                                    size=\"sm\"\r\n                                  >\r\n                                    {issue.severity}\r\n                                  </Badge>\r\n                                </div>\r\n                                <p className=\"text-gray-600 dark:text-gray-400\">\r\n                                  {issue.description}\r\n                                </p>\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n\r\n                      {/* Continue to iterate tooltip */}\r\n                      {showIterationTooltip && (\r\n                        <div className=\"relative ml-4\">\r\n                          <Button \r\n                            variant=\"outline-info\" \r\n                            onClick={() => setShowIterationTooltip(false)}\r\n                            size=\"sm\"\r\n                            className=\"animate-pulse\"\r\n                          >\r\n                            Next steps\r\n                          </Button>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </Card>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"mt-8\">\r\n            <Card>\r\n              <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\r\n                <h2 className=\"text-lg font-semibold\">About JWT</h2>\r\n              </div>\r\n              <div className=\"p-4 text-sm\">\r\n                <p className=\"text-gray-700 dark:text-gray-300 mb-3\">\r\n                  JSON Web Tokens (JWTs) are an open, industry standard RFC 7519 method for representing claims securely between two parties.\r\n                </p>\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\r\n                  <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-md\">\r\n                    <h3 className={`font-medium mb-1 ${getTokenPartColor('header')}`}>Header</h3>\r\n                    <p className=\"text-gray-600 dark:text-gray-400\">Contains metadata about the token's type and the signing algorithm.</p>\r\n                  </div>\r\n                  <div className=\"bg-purple-50 dark:bg-purple-900/20 p-3 rounded-md\">\r\n                    <h3 className={`font-medium mb-1 ${getTokenPartColor('payload')}`}>Payload</h3>\r\n                    <p className=\"text-gray-600 dark:text-gray-400\">Contains the token claims - statements about the user and additional metadata.</p>\r\n                  </div>\r\n                  <div className=\"bg-red-50 dark:bg-red-900/20 p-3 rounded-md\">\r\n                    <h3 className={`font-medium mb-1 ${getTokenPartColor('signature')}`}>Signature</h3>\r\n                    <p className=\"text-gray-600 dark:text-gray-400\">Used to verify that the token wasn't changed along the way and came from an authentic source.</p>\r\n                  </div>\r\n                </div>\r\n                <p className=\"text-gray-600 dark:text-gray-400 mt-3\">\r\n                  <a \r\n                    href=\"https://jwt.io/introduction\" \r\n                    target=\"_blank\" \r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 inline-flex items-center\"\r\n                  >\r\n                    Learn more about JWT\r\n                    <svg className=\"h-4 w-4 ml-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\" />\r\n                    </svg>\r\n                  </a>\r\n                </p>\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JwtDecoder;","/**\r\n * JWT Crypto Worker\r\n * \r\n * Handles all JWT cryptographic operations using Web Crypto API with fallbacks\r\n * All heavy crypto operations run in a separate thread when supported\r\n * Enhanced with support for edge cases, key format detection, and better error handling\r\n */\r\n\r\n// Define types that were previously imported from JwtContext\r\nexport interface JwtHeader {\r\n  alg: string;\r\n  typ?: string;\r\n  kid?: string;\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface JwtPayload {\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface DecodedJwt {\r\n  header: JwtHeader | null;\r\n  payload: JwtPayload | null;\r\n  signature: string | null;\r\n  isValid: boolean;\r\n  raw: {\r\n    header: string;\r\n    payload: string;\r\n    signature: string;\r\n  };\r\n  error?: string;\r\n  parsingWarnings?: string[];\r\n}\r\n\r\nexport interface SecurityIssue {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  severity: 'high' | 'medium' | 'low' | 'info';\r\n}\r\n\r\n// Check if we can use Web Workers in this environment\r\nconst supportsWorkers = typeof Worker !== 'undefined';\r\n\r\n/**\r\n * Base64Url encoding/decoding utilities with enhanced error handling\r\n */\r\nexport const base64UrlEncode = (str: string): string => {\r\n  return btoa(str)\r\n    .replace(/\\+/g, '-')\r\n    .replace(/\\//g, '_')\r\n    .replace(/=+$/, '');\r\n};\r\n\r\nexport const base64UrlDecode = (str: string): string => {\r\n  // Add padding if needed\r\n  str = str.replace(/-/g, '+').replace(/_/g, '/');\r\n  switch (str.length % 4) {\r\n    case 0: break;\r\n    case 2: str += '=='; break;\r\n    case 3: str += '='; break;\r\n    default: throw new Error('Invalid base64url string');\r\n  }\r\n  \r\n  try {\r\n    return decodeURIComponent(escape(atob(str)));\r\n  } catch (e) {\r\n    // Handle binary data that can't be decoded as UTF-8\r\n    try {\r\n      return atob(str);\r\n    } catch (e2) {\r\n      throw new Error('Invalid base64 content');\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Check if a string is likely PEM format\r\n */\r\nconst isPemFormat = (str: string): boolean => {\r\n  return /^-----BEGIN ([A-Z\\s]+)-----/.test(str) && /-----END ([A-Z\\s]+)-----$/.test(str);\r\n};\r\n\r\n/**\r\n * Extract raw base64 from PEM format\r\n */\r\nconst extractPemContent = (pem: string): string => {\r\n  const matches = pem.match(/^-----BEGIN [^-]+-----\\s*([A-Za-z0-9+\\/=\\s]+)-----END [^-]+-----$/s);\r\n  if (!matches || !matches[1]) {\r\n    throw new Error('Invalid PEM format');\r\n  }\r\n  return matches[1].replace(/[\\n\\r\\s]/g, '');\r\n};\r\n\r\n/**\r\n * Detect key type and format to help with proper import\r\n */\r\nconst detectKeyTypeAndFormat = (key: string): { \r\n  format: string, \r\n  isBase64: boolean,\r\n  isPem: boolean,\r\n  keyType: string\r\n} => {\r\n  // Check for PEM format first\r\n  if (isPemFormat(key)) {\r\n    // Determine key type from header\r\n    const isPrivate = key.includes('PRIVATE KEY');\r\n    const isPublic = key.includes('PUBLIC KEY');\r\n    const isRSA = key.includes('RSA');\r\n    const isEC = key.includes('EC') || key.includes('ECDSA');\r\n    \r\n    return {\r\n      format: isPrivate ? 'pkcs8' : 'spki',\r\n      isBase64: false,\r\n      isPem: true,\r\n      keyType: isRSA ? 'RSA' : isEC ? 'EC' : 'unknown'\r\n    };\r\n  }\r\n  \r\n  // Check for likely base64 format (might be DER-encoded key)\r\n  const isLikelyBase64 = /^[A-Za-z0-9+/=]+$/.test(key.trim());\r\n  \r\n  // Try to heuristically determine if this is a raw secret or encoded key\r\n  return {\r\n    format: 'raw', // Default to raw, we'll try other formats if this fails\r\n    isBase64: isLikelyBase64,\r\n    isPem: false,\r\n    keyType: key.length > 100 ? 'RSA' : 'HMAC' // Rough heuristic\r\n  };\r\n};\r\n\r\n/**\r\n * Try to normalize a token, handling common edge cases\r\n * - Trim whitespace\r\n * - Remove \"Bearer \" prefix\r\n * - Handle tokens with escaped newlines\r\n * - Handle tokens with actual newlines\r\n * - Fix padding issues\r\n */\r\nconst normalizeToken = (token: string): { token: string; warnings: string[] } => {\r\n  const warnings: string[] = [];\r\n  let normalizedToken = token;\r\n  \r\n  // Check original format to detect issues\r\n  if (token !== token.trim()) {\r\n    warnings.push('Token contains extra whitespace that was removed');\r\n  }\r\n  \r\n  // Trim whitespace\r\n  normalizedToken = normalizedToken.trim();\r\n  \r\n  // Handle Bearer prefix\r\n  if (normalizedToken.toLowerCase().startsWith('bearer ')) {\r\n    normalizedToken = normalizedToken.substring(7).trim();\r\n    warnings.push('Bearer prefix was removed from token');\r\n  }\r\n  \r\n  // Handle escaped newlines\r\n  if (normalizedToken.includes('\\\\n')) {\r\n    normalizedToken = normalizedToken.replace(/\\\\n/g, '');\r\n    warnings.push('Escaped newlines were removed from token');\r\n  }\r\n  \r\n  // Handle actual newlines\r\n  if (normalizedToken.includes('\\n')) {\r\n    normalizedToken = normalizedToken.replace(/\\n/g, '');\r\n    warnings.push('Newlines were removed from token');\r\n  }\r\n  \r\n  return { token: normalizedToken, warnings };\r\n};\r\n\r\n/**\r\n * Safely decode a JWT token without verifying signature\r\n * Enhanced with better error handling and warning detection\r\n */\r\nexport const decodeSafely = async (token: string): Promise<DecodedJwt> => {\r\n  try {\r\n    // Normalize the token and collect any warnings\r\n    const { token: normalizedToken, warnings } = normalizeToken(token);\r\n    token = normalizedToken;\r\n    \r\n    // Handle empty token\r\n    if (!token) {\r\n      return {\r\n        header: null,\r\n        payload: null,\r\n        signature: null,\r\n        isValid: false,\r\n        raw: {\r\n          header: '',\r\n          payload: '',\r\n          signature: ''\r\n        },\r\n        error: 'Empty token',\r\n        parsingWarnings: warnings\r\n      };\r\n    }\r\n    \r\n    const parts = token.split('.');\r\n    \r\n    // Handle malformed token with wrong number of parts\r\n    if (parts.length !== 3) {\r\n      warnings.push(`Token has ${parts.length} parts instead of the expected 3 parts`);\r\n      \r\n      // Try to extract what we can\r\n      return {\r\n        header: parts.length > 0 ? tryParseJson(parts[0]) : null,\r\n        payload: parts.length > 1 ? tryParseJson(parts[1]) : null,\r\n        signature: parts.length > 2 ? parts[2] : null,\r\n        isValid: false,\r\n        raw: {\r\n          header: parts.length > 0 ? parts[0] : '',\r\n          payload: parts.length > 1 ? parts[1] : '',\r\n          signature: parts.length > 2 ? parts[2] : ''\r\n        },\r\n        error: 'Invalid JWT format: expected 3 parts',\r\n        parsingWarnings: warnings\r\n      };\r\n    }\r\n\r\n    const [headerBase64, payloadBase64, signatureBase64] = parts;\r\n    \r\n    // Handle potential decoding errors for each part separately\r\n    let header: JwtHeader | null = null;\r\n    let payload: JwtPayload | null = null;\r\n    let error: string | undefined;\r\n    \r\n    // Try to decode the header\r\n    try {\r\n      const headerJson = base64UrlDecode(headerBase64);\r\n      header = JSON.parse(headerJson);\r\n      \r\n      // Check required fields\r\n      if (header && !header.alg) {\r\n        warnings.push('Token header is missing the \"alg\" field');\r\n      }\r\n      \r\n      if (header && !header.typ && warnings.indexOf('Token header is missing the \"typ\" field') === -1) {\r\n        warnings.push('Token header is missing the \"typ\" field');\r\n      }\r\n    } catch (e) {\r\n      warnings.push('Failed to decode header as JSON');\r\n      error = 'Invalid JWT header: failed to parse';\r\n    }\r\n    \r\n    // Try to decode the payload\r\n    try {\r\n      const payloadJson = base64UrlDecode(payloadBase64);\r\n      payload = JSON.parse(payloadJson);\r\n      \r\n      // Check for timestamps and validate them\r\n      if (payload) {\r\n        if (typeof payload.exp !== 'undefined') {\r\n          const expDate = new Date(payload.exp * 1000);\r\n          const now = new Date();\r\n          if (expDate < now) {\r\n            warnings.push(`Token is expired (exp: ${expDate.toISOString()}, now: ${now.toISOString()})`);\r\n          }\r\n        } else {\r\n          warnings.push('Token payload is missing the \"exp\" field');\r\n        }\r\n        \r\n        if (typeof payload.nbf !== 'undefined') {\r\n          const nbfDate = new Date(payload.nbf * 1000);\r\n          const now = new Date();\r\n          if (nbfDate > now) {\r\n            warnings.push(`Token is not yet valid (nbf: ${nbfDate.toISOString()}, now: ${now.toISOString()})`);\r\n          }\r\n        }\r\n        \r\n        if (typeof payload.iat === 'undefined') {\r\n          warnings.push('Token payload is missing the \"iat\" field');\r\n        }\r\n      }\r\n    } catch (e) {\r\n      warnings.push('Failed to decode payload as JSON');\r\n      error = error || 'Invalid JWT payload: failed to parse';\r\n    }\r\n    \r\n    // Return decoded structure with parsing results and warnings\r\n    return {\r\n      header,\r\n      payload,\r\n      signature: signatureBase64,\r\n      isValid: false, // Signature not verified yet\r\n      raw: {\r\n        header: headerBase64,\r\n        payload: payloadBase64,\r\n        signature: signatureBase64\r\n      },\r\n      error,\r\n      parsingWarnings: warnings.length > 0 ? warnings : undefined\r\n    };\r\n  } catch (err) {\r\n    return {\r\n      header: null,\r\n      payload: null,\r\n      signature: null,\r\n      isValid: false,\r\n      raw: {\r\n        header: '',\r\n        payload: '',\r\n        signature: ''\r\n      },\r\n      error: err instanceof Error ? err.message : 'Unknown error decoding token'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Helper to try parsing JSON with better error handling\r\n */\r\nfunction tryParseJson(base64Str: string): any {\r\n  try {\r\n    const json = base64UrlDecode(base64Str);\r\n    return JSON.parse(json);\r\n  } catch (e) {\r\n    // Return null on parse failure\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Helper to convert string keys to ArrayBuffer for Web Crypto API\r\n * Supports multiple formats: raw string, base64, PEM\r\n * With enhanced error handling and format detection\r\n */\r\nconst keyToArrayBuffer = (key: string, isBase64: boolean = false): ArrayBuffer => {\r\n  // Handle PEM format first\r\n  if (isPemFormat(key)) {\r\n    try {\r\n      const pemContent = extractPemContent(key);\r\n      const binaryStr = atob(pemContent);\r\n      const bytes = new Uint8Array(binaryStr.length);\r\n      for (let i = 0; i < binaryStr.length; i++) {\r\n        bytes[i] = binaryStr.charCodeAt(i);\r\n      }\r\n      return bytes.buffer;\r\n    } catch (e) {\r\n      console.error('PEM parsing failed:', e);\r\n      throw new Error('Invalid PEM format key');\r\n    }\r\n  }\r\n  \r\n  if (isBase64) {\r\n    // Handle base64 encoded key\r\n    try {\r\n      const binaryStr = atob(key);\r\n      const bytes = new Uint8Array(binaryStr.length);\r\n      for (let i = 0; i < binaryStr.length; i++) {\r\n        bytes[i] = binaryStr.charCodeAt(i);\r\n      }\r\n      return bytes.buffer;\r\n    } catch (e) {\r\n      console.error('Base64 parsing failed:', e);\r\n      throw new Error('Invalid base64 encoded key');\r\n    }\r\n  } else {\r\n    // Handle plain text key\r\n    const encoder = new TextEncoder();\r\n    return encoder.encode(key).buffer;\r\n  }\r\n};\r\n\r\n// Add proper typing for algorithm parameters\r\ninterface HmacAlgorithm extends Algorithm {\r\n  name: string;\r\n  hash: string | Algorithm;\r\n}\r\n\r\ninterface RsaAlgorithm extends Algorithm {\r\n  name: string;\r\n  hash: string | Algorithm;\r\n}\r\n\r\ninterface EcdsaAlgorithm extends Algorithm {\r\n  name: string;\r\n  hash: string | Algorithm;\r\n  namedCurve?: string;\r\n}\r\n\r\ntype JwtAlgorithm = HmacAlgorithm | RsaAlgorithm | EcdsaAlgorithm;\r\n\r\n/**\r\n * Try multiple key formats for verification\r\n * Attempts different formats to find one that works\r\n */\r\nconst tryMultipleKeyFormats = async (\r\n  token: string,\r\n  key: string,\r\n  alg: string,\r\n  cryptoAlg: JwtAlgorithm,\r\n  signedData: string,\r\n  signature: Uint8Array,\r\n  isHmac: boolean\r\n): Promise<boolean> => {\r\n  // First, detect the key type and format\r\n  const { format, isBase64, isPem, keyType } = detectKeyTypeAndFormat(key);\r\n  \r\n  // Different formats to try based on algorithm type\r\n  const formats = [\r\n    // Start with detected format\r\n    { isBase64: isBase64, keyFormat: format },\r\n    // Then try standard formats\r\n    { isBase64: false, keyFormat: isHmac ? 'raw' : 'spki' },\r\n    { isBase64: true, keyFormat: isHmac ? 'raw' : 'spki' }\r\n  ];\r\n  \r\n  // For HMAC, also try UTF-8 and base64 decoded regardless of what we detected\r\n  if (isHmac) {\r\n    // Add additional formats specific to HMAC\r\n    formats.push(\r\n      { isBase64: false, keyFormat: 'raw' }, // UTF-8 encoded raw key\r\n      { isBase64: true, keyFormat: 'raw' }  // base64 decoded key\r\n    );\r\n  } else if (alg.startsWith('RS') || alg.startsWith('PS')) {\r\n    // For RSA, try both SPKI and PKCS8 formats\r\n    formats.push(\r\n      { isBase64: false, keyFormat: 'spki' },\r\n      { isBase64: isPem, keyFormat: 'spki' }\r\n    );\r\n  } else if (alg.startsWith('ES')) {\r\n    // For ECDSA, try both SPKI and raw formats\r\n    formats.push(\r\n      { isBase64: false, keyFormat: 'spki' },\r\n      { isBase64: isPem, keyFormat: 'spki' }\r\n    );\r\n  }\r\n  \r\n  for (const format of formats) {\r\n    try {\r\n      const keyData = keyToArrayBuffer(key, format.isBase64);\r\n      const cryptoKey = await window.crypto.subtle.importKey(\r\n        format.keyFormat as any,\r\n        keyData,\r\n        cryptoAlg,\r\n        false,\r\n        ['verify']\r\n      );\r\n      \r\n      const encoder = new TextEncoder();\r\n      const data = encoder.encode(signedData);\r\n      \r\n      const isValid = await window.crypto.subtle.verify(\r\n        cryptoAlg,\r\n        cryptoKey,\r\n        signature,\r\n        data\r\n      );\r\n      \r\n      if (isValid) {\r\n        return true;\r\n      }\r\n    } catch (e) {\r\n      // Continue trying other formats\r\n      console.log(`Key format ${format.keyFormat} (base64: ${format.isBase64}) failed:`, e);\r\n    }\r\n  }\r\n  \r\n  return false;\r\n};\r\n\r\n/**\r\n * Verify a JWT token signature with enhanced error handling\r\n */\r\nexport const verifyToken = async (\r\n  token: string, \r\n  key: string,\r\n  algorithm?: string\r\n): Promise<boolean> => {\r\n  try {\r\n    // Normalize the token\r\n    const { token: normalizedToken } = normalizeToken(token);\r\n    token = normalizedToken;\r\n    \r\n    const parts = token.split('.');\r\n    if (parts.length !== 3) {\r\n      throw new Error('Invalid JWT format');\r\n    }\r\n\r\n    const [headerBase64, payloadBase64, signatureBase64] = parts;\r\n    const signedData = `${headerBase64}.${payloadBase64}`;\r\n    \r\n    // Decode the header to get the algorithm if not provided\r\n    let alg = algorithm;\r\n    if (!alg) {\r\n      try {\r\n        const headerJson = base64UrlDecode(headerBase64);\r\n        const header = JSON.parse(headerJson);\r\n        alg = header.alg;\r\n      } catch (e) {\r\n        throw new Error('Failed to parse JWT header');\r\n      }\r\n    }\r\n\r\n    // Handle 'none' algorithm\r\n    if (alg === 'none') {\r\n      return false; // Always consider 'none' algorithm as invalid for security reasons\r\n    }\r\n\r\n    // Convert the signature from base64url to ArrayBuffer\r\n    const signature = Uint8Array.from(\r\n      atob(signatureBase64.replace(/-/g, '+').replace(/_/g, '/')), \r\n      c => c.charCodeAt(0)\r\n    );\r\n\r\n    // Use the appropriate algorithm\r\n    let cryptoAlg: JwtAlgorithm;\r\n    let isHmac = false;\r\n\r\n    switch (alg) {\r\n      case 'HS256':\r\n        cryptoAlg = { name: 'HMAC', hash: 'SHA-256' };\r\n        isHmac = true;\r\n        break;\r\n      case 'HS384':\r\n        cryptoAlg = { name: 'HMAC', hash: 'SHA-384' };\r\n        isHmac = true;\r\n        break;\r\n      case 'HS512':\r\n        cryptoAlg = { name: 'HMAC', hash: 'SHA-512' };\r\n        isHmac = true;\r\n        break;\r\n      case 'RS256':\r\n        cryptoAlg = { name: 'RSASSA-PKCS1-v1_5', hash: 'SHA-256' };\r\n        break;\r\n      case 'RS384':\r\n        cryptoAlg = { name: 'RSASSA-PKCS1-v1_5', hash: 'SHA-384' };\r\n        break;\r\n      case 'RS512':\r\n        cryptoAlg = { name: 'RSASSA-PKCS1-v1_5', hash: 'SHA-512' };\r\n        break;\r\n      case 'PS256':\r\n        cryptoAlg = { name: 'RSA-PSS', hash: 'SHA-256' };\r\n        break;\r\n      case 'PS384':\r\n        cryptoAlg = { name: 'RSA-PSS', hash: 'SHA-384' };\r\n        break;\r\n      case 'PS512':\r\n        cryptoAlg = { name: 'RSA-PSS', hash: 'SHA-512' };\r\n        break;\r\n      case 'ES256':\r\n        cryptoAlg = { name: 'ECDSA', hash: 'SHA-256', namedCurve: 'P-256' };\r\n        break;\r\n      case 'ES384':\r\n        cryptoAlg = { name: 'ECDSA', hash: 'SHA-384', namedCurve: 'P-384' };\r\n        break;\r\n      case 'ES512':\r\n        cryptoAlg = { name: 'ECDSA', hash: 'SHA-512', namedCurve: 'P-521' };\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported algorithm: ${alg}`);\r\n    }\r\n\r\n    // Try multiple key formats for verification\r\n    return await tryMultipleKeyFormats(\r\n      token,\r\n      key,\r\n      alg,\r\n      cryptoAlg,\r\n      signedData,\r\n      signature,\r\n      isHmac\r\n    );\r\n  } catch (error) {\r\n    console.error('JWT verification error:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Sign a JWT token\r\n */\r\nexport const signToken = async (\r\n  header: JwtHeader,\r\n  payload: JwtPayload,\r\n  key: string\r\n): Promise<string> => {\r\n  try {\r\n    // Ensure header has alg and typ\r\n    const finalHeader = {\r\n      typ: 'JWT',\r\n      ...header\r\n    };\r\n    \r\n    const alg = finalHeader.alg;\r\n    if (!alg) {\r\n      throw new Error('Algorithm is required in header');\r\n    }\r\n    \r\n    // Encode header and payload\r\n    const headerBase64 = base64UrlEncode(JSON.stringify(finalHeader));\r\n    const payloadBase64 = base64UrlEncode(JSON.stringify(payload));\r\n    const signedData = `${headerBase64}.${payloadBase64}`;\r\n    \r\n    // Handle 'none' algorithm\r\n    if (alg === 'none') {\r\n      return `${signedData}.`;\r\n    }\r\n    \r\n    // Prepare algorithm parameters\r\n    let cryptoAlg: JwtAlgorithm;\r\n    let isHmac = false;\r\n    \r\n    switch (alg) {\r\n      case 'HS256':\r\n        cryptoAlg = { name: 'HMAC', hash: 'SHA-256' };\r\n        isHmac = true;\r\n        break;\r\n      case 'HS384':\r\n        cryptoAlg = { name: 'HMAC', hash: 'SHA-384' };\r\n        isHmac = true;\r\n        break;\r\n      case 'HS512':\r\n        cryptoAlg = { name: 'HMAC', hash: 'SHA-512' };\r\n        isHmac = true;\r\n        break;\r\n      case 'RS256':\r\n        cryptoAlg = { name: 'RSASSA-PKCS1-v1_5', hash: 'SHA-256' };\r\n        break;\r\n      case 'RS384':\r\n        cryptoAlg = { name: 'RSASSA-PKCS1-v1_5', hash: 'SHA-384' };\r\n        break;\r\n      case 'RS512':\r\n        cryptoAlg = { name: 'RSASSA-PKCS1-v1_5', hash: 'SHA-512' };\r\n        break;\r\n      case 'PS256':\r\n        cryptoAlg = { name: 'RSA-PSS', hash: 'SHA-256' };\r\n        break;\r\n      case 'PS384':\r\n        cryptoAlg = { name: 'RSA-PSS', hash: 'SHA-384' };\r\n        break;\r\n      case 'PS512':\r\n        cryptoAlg = { name: 'RSA-PSS', hash: 'SHA-512' };\r\n        break;\r\n      case 'ES256':\r\n        cryptoAlg = { name: 'ECDSA', hash: 'SHA-256', namedCurve: 'P-256' };\r\n        break;\r\n      case 'ES384':\r\n        cryptoAlg = { name: 'ECDSA', hash: 'SHA-384', namedCurve: 'P-384' };\r\n        break;\r\n      case 'ES512':\r\n        cryptoAlg = { name: 'ECDSA', hash: 'SHA-512', namedCurve: 'P-521' };\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported algorithm: ${alg}`);\r\n    }\r\n    \r\n    // Handle potential PEM encoded keys for RSA and ECDSA algorithms\r\n    const { format: keyFormat, isBase64, isPem } = detectKeyTypeAndFormat(key);\r\n    let keyData: ArrayBuffer;\r\n    \r\n    if (isPem) {\r\n      keyData = keyToArrayBuffer(key, false);\r\n    } else {\r\n      keyData = keyToArrayBuffer(key, isBase64);\r\n    }\r\n    \r\n    // Import the key\r\n    const cryptoKey = await window.crypto.subtle.importKey(\r\n      keyFormat as any,\r\n      keyData,\r\n      cryptoAlg,\r\n      false,\r\n      ['sign']\r\n    );\r\n    \r\n    // Sign the data\r\n    const encoder = new TextEncoder();\r\n    const data = encoder.encode(signedData);\r\n    const signature = await window.crypto.subtle.sign(\r\n      cryptoAlg,\r\n      cryptoKey,\r\n      data\r\n    );\r\n    \r\n    // Convert the signature to base64url\r\n    const signatureArray = new Uint8Array(signature);\r\n    let signatureBase64 = '';\r\n    for (let i = 0; i < signatureArray.length; i++) {\r\n      signatureBase64 += String.fromCharCode(signatureArray[i]);\r\n    }\r\n    signatureBase64 = base64UrlEncode(signatureBase64);\r\n    \r\n    // Return the complete JWT\r\n    return `${signedData}.${signatureBase64}`;\r\n  } catch (error) {\r\n    console.error('JWT signing error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Analyze a token for security issues\r\n */\r\nexport const analyzeToken = async (token: string): Promise<SecurityIssue[]> => {\r\n  const issues: SecurityIssue[] = [];\r\n  \r\n  try {\r\n    const decoded = await decodeSafely(token);\r\n    if (!decoded.header) {\r\n      issues.push({\r\n        id: 'malformed-token',\r\n        title: 'Malformed Token',\r\n        description: 'The token could not be parsed correctly.',\r\n        severity: 'high'\r\n      });\r\n      return issues;\r\n    }\r\n    \r\n    // Check algorithm security\r\n    const alg = decoded.header.alg;\r\n    if (!alg) {\r\n      issues.push({\r\n        id: 'missing-alg',\r\n        title: 'Missing Algorithm',\r\n        description: 'The token header is missing the required \"alg\" field.',\r\n        severity: 'high'\r\n      });\r\n    } else {\r\n      // Check for insecure algorithms\r\n      if (alg === 'none') {\r\n        issues.push({\r\n          id: 'alg-none',\r\n          title: 'Insecure \"none\" Algorithm',\r\n          description: 'The token uses the \"none\" algorithm which is insecure and vulnerable to signature bypass attacks.',\r\n          severity: 'high'\r\n        });\r\n      }\r\n      \r\n      if (alg === 'HS256') {\r\n        issues.push({\r\n          id: 'weak-hs256',\r\n          title: 'Consider Stronger Algorithm',\r\n          description: 'While acceptable, HS256 offers lower security than HS384 or HS512. Consider using a stronger algorithm for sensitive applications.',\r\n          severity: 'info'\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Check signature presence\r\n    if (!decoded.signature || decoded.signature.length === 0) {\r\n      issues.push({\r\n        id: 'missing-signature',\r\n        title: 'Missing Signature',\r\n        description: 'The token has no signature, making it unverifiable and insecure.',\r\n        severity: 'high'\r\n      });\r\n    }\r\n    \r\n    // Check payload claims\r\n    if (decoded.payload) {\r\n      // Check expiration\r\n      if (!decoded.payload.exp) {\r\n        issues.push({\r\n          id: 'no-exp',\r\n          title: 'No Expiration',\r\n          description: 'The token does not have an expiration time (exp claim) which is a security risk.',\r\n          severity: 'medium'\r\n        });\r\n      } else {\r\n        const now = Math.floor(Date.now() / 1000);\r\n        if (decoded.payload.exp < now) {\r\n          issues.push({\r\n            id: 'token-expired',\r\n            title: 'Token Expired',\r\n            description: `The token expired on ${new Date(decoded.payload.exp * 1000).toLocaleString()}.`,\r\n            severity: 'medium'\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Check issuance time\r\n      if (!decoded.payload.iat) {\r\n        issues.push({\r\n          id: 'no-iat',\r\n          title: 'No Issuance Time',\r\n          description: 'The token does not have an issuance time (iat claim). This makes token revocation more difficult.',\r\n          severity: 'low'\r\n        });\r\n      }\r\n      \r\n      // Check audience\r\n      if (!decoded.payload.aud) {\r\n        issues.push({\r\n          id: 'no-aud',\r\n          title: 'No Audience',\r\n          description: 'The token does not specify an audience (aud claim). This could lead to token misuse across different services.',\r\n          severity: 'low'\r\n        });\r\n      }\r\n      \r\n      // Check issuer\r\n      if (!decoded.payload.iss) {\r\n        issues.push({\r\n          id: 'no-iss',\r\n          title: 'No Issuer',\r\n          description: 'The token does not specify an issuer (iss claim). This could lead to confusion about token origin.',\r\n          severity: 'low'\r\n        });\r\n      }\r\n      \r\n      // Check not before\r\n      if (!decoded.payload.nbf) {\r\n        issues.push({\r\n          id: 'no-nbf',\r\n          title: 'No \"Not Before\" Time',\r\n          description: 'The token does not specify a \"not before\" time (nbf claim). While not critical, this helps prevent token use before intended.',\r\n          severity: 'info'\r\n        });\r\n      } else {\r\n        const now = Math.floor(Date.now() / 1000);\r\n        if (decoded.payload.nbf > now) {\r\n          issues.push({\r\n            id: 'not-valid-yet',\r\n            title: 'Token Not Valid Yet',\r\n            description: `The token becomes valid on ${new Date(decoded.payload.nbf * 1000).toLocaleString()}.`,\r\n            severity: 'medium'\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Check JWT ID\r\n      if (!decoded.payload.jti) {\r\n        issues.push({\r\n          id: 'no-jti',\r\n          title: 'No JWT ID',\r\n          description: 'The token does not have a JWT ID (jti claim). This makes token revocation and tracking more difficult.',\r\n          severity: 'info'\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Check for missing type\r\n    if (!decoded.header.typ) {\r\n      issues.push({\r\n        id: 'no-typ',\r\n        title: 'No Token Type',\r\n        description: 'The token does not specify a type (typ claim) in the header. This is recommended for interoperability.',\r\n        severity: 'info'\r\n      });\r\n    } else if (decoded.header.typ !== 'JWT') {\r\n      issues.push({\r\n        id: 'unusual-typ',\r\n        title: 'Unusual Token Type',\r\n        description: `The token specifies an unusual type: \"${decoded.header.typ}\" instead of the standard \"JWT\".`,\r\n        severity: 'info'\r\n      });\r\n    }\r\n    \r\n    // Check for kid (key id)\r\n    if (!decoded.header.kid) {\r\n      issues.push({\r\n        id: 'no-kid',\r\n        title: 'No Key ID',\r\n        description: 'The token does not specify a key ID (kid header). This is recommended when multiple keys are used.',\r\n        severity: 'info'\r\n      });\r\n    }\r\n  } catch (error) {\r\n    issues.push({\r\n      id: 'parse-error',\r\n      title: 'Token Parse Error',\r\n      description: error instanceof Error ? error.message : 'Unknown error parsing token',\r\n      severity: 'high'\r\n    });\r\n  }\r\n  \r\n  return issues;\r\n};\r\n\r\n/**\r\n * Run a benchmark for the given algorithm\r\n */\r\nexport const benchmarkAlgorithm = async (algorithm: string): Promise<number> => {\r\n  // For now, this is a simplified benchmark\r\n  // In a real implementation, we would use benchmark.js or a similar library\r\n  const sampleSize = 100; // Number of operations to perform\r\n  const payloadSize = 1024; // Size of the payload in bytes\r\n  \r\n  // Create a random payload\r\n  const payload = {\r\n    sub: '1234567890',\r\n    name: 'John Doe',\r\n    iat: Math.floor(Date.now() / 1000),\r\n    exp: Math.floor(Date.now() / 1000) + 3600,\r\n    data: Array(payloadSize).fill('a').join('') // Add bulk data\r\n  };\r\n  \r\n  const header = {\r\n    alg: algorithm,\r\n    typ: 'JWT'\r\n  };\r\n  \r\n  // Generate a random key\r\n  const key = Array(32).fill(0).map(() => Math.floor(Math.random() * 256).toString(16).padStart(2, '0')).join('');\r\n  \r\n  // Measure signing time\r\n  const start = performance.now();\r\n  \r\n  for (let i = 0; i < sampleSize; i++) {\r\n    try {\r\n      await signToken(header, { ...payload, nonce: i }, key);\r\n    } catch (e) {\r\n      console.error(`Error benchmarking algorithm ${algorithm}:`, e);\r\n      return 0;\r\n    }\r\n  }\r\n  \r\n  const end = performance.now();\r\n  const totalTime = end - start;\r\n  \r\n  // Return operations per second\r\n  return Math.floor(sampleSize / (totalTime / 1000));\r\n};\r\n\r\n// Add missing functions referenced by other files\r\nexport const sign = signToken;\r\nexport const verify = verifyToken;\r\nexport const decode = decodeSafely;\r\nexport const bench = benchmarkAlgorithm;\r\nexport const analyze = analyzeToken;","import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Card, \r\n  Button, \r\n  TextInput,\r\n  TabGroup,\r\n  Tab,\r\n  TabPanel,\r\n  Badge\r\n} from '../../../design-system';\r\nimport * as cryptoWorker from '../workers/cryptoWorker';\r\n\r\ntype AlgorithmType = 'HS256' | 'HS384' | 'HS512' | 'RS256' | 'RS384' | 'RS512' | 'ES256' | 'ES384' | 'ES512' | 'none';\r\n\r\ninterface ClaimValue {\r\n  name: string;\r\n  value: string;\r\n  type: 'string' | 'number' | 'boolean' | 'json';\r\n}\r\n\r\n/**\r\n * JWT Builder component - handles step-by-step JWT creation\r\n */\r\nexport const BuilderWizard: React.FC = () => {\r\n  // Wizard states\r\n  const [activeStep, setActiveStep] = useState<'header' | 'payload' | 'signature'>('header');\r\n  \r\n  // Header configuration\r\n  const [algorithm, setAlgorithm] = useState<AlgorithmType>('HS256');\r\n  const [keyId, setKeyId] = useState<string>('');\r\n  const [type, setType] = useState<string>('JWT');\r\n  \r\n  // Payload configuration\r\n  const [claims, setClaims] = useState<ClaimValue[]>([\r\n    { name: 'sub', value: '1234567890', type: 'string' },\r\n    { name: 'name', value: 'John Doe', type: 'string' },\r\n    { name: 'iat', value: String(Math.floor(Date.now() / 1000)), type: 'number' }\r\n  ]);\r\n  const [newClaimName, setNewClaimName] = useState<string>('');\r\n  const [newClaimValue, setNewClaimValue] = useState<string>('');\r\n  const [newClaimType, setNewClaimType] = useState<'string' | 'number' | 'boolean' | 'json'>('string');\r\n  \r\n  // Signature configuration\r\n  const [privateKey, setPrivateKey] = useState<string>('your-256-bit-secret');\r\n  \r\n  // Result\r\n  const [generatedToken, setGeneratedToken] = useState<string>('');\r\n  const [tokenSizeBytes, setTokenSizeBytes] = useState<number>(0);\r\n  const [isSigning, setIsSigning] = useState<boolean>(false);\r\n  const [signError, setSignError] = useState<string | null>(null);\r\n  const [copied, setCopied] = useState<boolean>(false);\r\n  \r\n  // Reset the copied state after 2 seconds\r\n  useEffect(() => {\r\n    if (copied) {\r\n      const timer = setTimeout(() => setCopied(false), 2000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [copied]);\r\n  \r\n  // Update example token when anything changes\r\n  useEffect(() => {\r\n    updatePreview();\r\n  }, [algorithm, keyId, type, claims]);\r\n  \r\n  const updatePreview = async () => {\r\n    try {\r\n      // Prepare header\r\n      const header: Record<string, any> = { \r\n        alg: algorithm, \r\n        typ: type \r\n      };\r\n      \r\n      if (keyId) {\r\n        header.kid = keyId;\r\n      }\r\n      \r\n      // Prepare payload\r\n      const payload: Record<string, any> = {};\r\n      for (const claim of claims) {\r\n        try {\r\n          // Convert claim values to the appropriate type\r\n          switch(claim.type) {\r\n            case 'string':\r\n              payload[claim.name] = claim.value;\r\n              break;\r\n            case 'number':\r\n              payload[claim.name] = Number(claim.value);\r\n              break;\r\n            case 'boolean':\r\n              payload[claim.name] = claim.value.toLowerCase() === 'true';\r\n              break;\r\n            case 'json':\r\n              payload[claim.name] = JSON.parse(claim.value);\r\n              break;\r\n          }\r\n        } catch (e) {\r\n          // If parsing fails, just use the raw value\r\n          payload[claim.name] = claim.value;\r\n        }\r\n      }\r\n      \r\n      // Generate a preview token with a dummy signature (not cryptographically valid)\r\n      const headerBase64 = cryptoWorker.base64UrlEncode(JSON.stringify(header));\r\n      const payloadBase64 = cryptoWorker.base64UrlEncode(JSON.stringify(payload));\r\n      \r\n      const previewToken = `${headerBase64}.${payloadBase64}.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`;\r\n      setGeneratedToken(previewToken);\r\n      setTokenSizeBytes(new TextEncoder().encode(previewToken).length);\r\n    } catch (e) {\r\n      console.error('Error generating token preview:', e);\r\n    }\r\n  };\r\n  \r\n  const addClaim = () => {\r\n    if (!newClaimName || !newClaimName.trim()) return;\r\n    \r\n    setClaims([\r\n      ...claims,\r\n      {\r\n        name: newClaimName.trim(),\r\n        value: newClaimValue,\r\n        type: newClaimType\r\n      }\r\n    ]);\r\n    \r\n    setNewClaimName('');\r\n    setNewClaimValue('');\r\n  };\r\n  \r\n  const removeClaim = (index: number) => {\r\n    const updatedClaims = [...claims];\r\n    updatedClaims.splice(index, 1);\r\n    setClaims(updatedClaims);\r\n  };\r\n  \r\n  const handleClaimChange = (index: number, field: keyof ClaimValue, value: string) => {\r\n    const updatedClaims = [...claims];\r\n    if (field === 'type') {\r\n      updatedClaims[index][field] = value as 'string' | 'number' | 'boolean' | 'json';\r\n    } else {\r\n      updatedClaims[index][field] = value;\r\n    }\r\n    setClaims(updatedClaims);\r\n  };\r\n  \r\n  const handleSignToken = async () => {\r\n    setIsSigning(true);\r\n    setSignError(null);\r\n    \r\n    try {\r\n      // Prepare header as JwtHeader type with required alg property\r\n      const header: cryptoWorker.JwtHeader = { \r\n        alg: algorithm, \r\n        typ: type \r\n      };\r\n      \r\n      if (keyId) {\r\n        header.kid = keyId;\r\n      }\r\n      \r\n      // Prepare payload\r\n      const payload: Record<string, any> = {};\r\n      for (const claim of claims) {\r\n        try {\r\n          switch(claim.type) {\r\n            case 'string':\r\n              payload[claim.name] = claim.value;\r\n              break;\r\n            case 'number':\r\n              payload[claim.name] = Number(claim.value);\r\n              break;\r\n            case 'boolean':\r\n              payload[claim.name] = claim.value.toLowerCase() === 'true';\r\n              break;\r\n            case 'json':\r\n              payload[claim.name] = JSON.parse(claim.value);\r\n              break;\r\n          }\r\n        } catch (e) {\r\n          payload[claim.name] = claim.value;\r\n        }\r\n      }\r\n      \r\n      // Sign the token\r\n      const token = await cryptoWorker.sign(header, payload, privateKey);\r\n      setGeneratedToken(token);\r\n      setTokenSizeBytes(new TextEncoder().encode(token).length);\r\n    } catch (e) {\r\n      setSignError(`Error signing token: ${e instanceof Error ? e.message : String(e)}`);\r\n    }\r\n    \r\n    setIsSigning(false);\r\n  };\r\n  \r\n  const handleCopyToken = () => {\r\n    navigator.clipboard.writeText(generatedToken);\r\n    setCopied(true);\r\n  };\r\n  \r\n  // Render header configuration step\r\n  const renderHeaderStep = () => (\r\n    <div className=\"p-4\">\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        <div>\r\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n            Algorithm (alg)\r\n          </label>\r\n          <select \r\n            value={algorithm}\r\n            onChange={(e) => setAlgorithm(e.target.value as AlgorithmType)}\r\n            className=\"w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800\"\r\n          >\r\n            <optgroup label=\"HMAC\">\r\n              <option value=\"HS256\">HS256 (HMAC + SHA256)</option>\r\n              <option value=\"HS384\">HS384 (HMAC + SHA384)</option>\r\n              <option value=\"HS512\">HS512 (HMAC + SHA512)</option>\r\n            </optgroup>\r\n            <optgroup label=\"RSA\">\r\n              <option value=\"RS256\">RS256 (RSA + SHA256)</option>\r\n              <option value=\"RS384\">RS384 (RSA + SHA384)</option>\r\n              <option value=\"RS512\">RS512 (RSA + SHA512)</option>\r\n            </optgroup>\r\n            <optgroup label=\"ECDSA\">\r\n              <option value=\"ES256\">ES256 (ECDSA + SHA256)</option>\r\n              <option value=\"ES384\">ES384 (ECDSA + SHA384)</option>\r\n              <option value=\"ES512\">ES512 (ECDSA + SHA512)</option>\r\n            </optgroup>\r\n            <optgroup label=\"Unsafe\">\r\n              <option value=\"none\">none (Unsigned Token)</option>\r\n            </optgroup>\r\n          </select>\r\n          \r\n          {algorithm === 'none' && (\r\n            <div className=\"mt-2 text-red-600 dark:text-red-400 text-sm\">\r\n              Warning: The \"none\" algorithm creates unsigned tokens which provide no security.\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div>\r\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n            Token Type (typ)\r\n          </label>\r\n          <TextInput\r\n            value={type}\r\n            onChange={(e) => setType(e.target.value)}\r\n            placeholder=\"JWT\"\r\n          />\r\n          <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\r\n            Usually \"JWT\" for JSON Web Token\r\n          </p>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"mt-4\">\r\n        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n          Key ID (kid)\r\n        </label>\r\n        <TextInput\r\n          value={keyId}\r\n          onChange={(e) => setKeyId(e.target.value)}\r\n          placeholder=\"Optional Key ID\"\r\n        />\r\n        <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\r\n          Optional identifier for the key used to sign this token\r\n        </p>\r\n      </div>\r\n      \r\n      <div className=\"mt-6 flex justify-between\">\r\n        <div></div>\r\n        <Button \r\n          variant=\"primary\"\r\n          onClick={() => setActiveStep('payload')}\r\n        >\r\n          Continue to Payload\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n  // Render payload configuration step\r\n  const renderPayloadStep = () => (\r\n    <div className=\"p-4\">\r\n      <div className=\"mb-4 bg-gray-50 dark:bg-gray-800 p-3 rounded-md border border-gray-200 dark:border-gray-700\">\r\n        <h4 className=\"font-medium text-gray-800 dark:text-gray-200 mb-2\">Current Claims</h4>\r\n        \r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"w-full text-sm\">\r\n            <thead className=\"border-b border-gray-200 dark:border-gray-700\">\r\n              <tr>\r\n                <th className=\"text-left py-2 px-3\">Claim</th>\r\n                <th className=\"text-left py-2 px-3\">Type</th>\r\n                <th className=\"text-left py-2 px-3\">Value</th>\r\n                <th className=\"text-right py-2 px-3\">Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {claims.map((claim, index) => (\r\n                <tr key={index} className=\"border-b border-gray-100 dark:border-gray-800\">\r\n                  <td className=\"py-2 px-3\">\r\n                    <TextInput \r\n                      value={claim.name}\r\n                      onChange={(e) => handleClaimChange(index, 'name', e.target.value)}\r\n                      size=\"sm\"\r\n                    />\r\n                  </td>\r\n                  <td className=\"py-2 px-3\">\r\n                    <select \r\n                      value={claim.type}\r\n                      onChange={(e) => handleClaimChange(index, 'type', e.target.value)}\r\n                      className=\"p-1 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-800\"\r\n                    >\r\n                      <option value=\"string\">String</option>\r\n                      <option value=\"number\">Number</option>\r\n                      <option value=\"boolean\">Boolean</option>\r\n                      <option value=\"json\">JSON</option>\r\n                    </select>\r\n                  </td>\r\n                  <td className=\"py-2 px-3\">\r\n                    <TextInput \r\n                      value={claim.value}\r\n                      onChange={(e) => handleClaimChange(index, 'value', e.target.value)}\r\n                      size=\"sm\"\r\n                    />\r\n                  </td>\r\n                  <td className=\"py-2 px-3 text-right\">\r\n                    <Button \r\n                      variant=\"light\" \r\n                      size=\"sm\"\r\n                      onClick={() => removeClaim(index)}\r\n                    >\r\n                      Remove\r\n                    </Button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        \r\n        <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n          <h4 className=\"font-medium text-gray-800 dark:text-gray-200 mb-2\">Add Claim</h4>\r\n          <div className=\"grid grid-cols-3 gap-2\">\r\n            <div>\r\n              <label className=\"block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1\">Name</label>\r\n              <TextInput \r\n                value={newClaimName}\r\n                onChange={(e) => setNewClaimName(e.target.value)}\r\n                placeholder=\"Claim name\"\r\n                size=\"sm\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1\">Type</label>\r\n              <select \r\n                value={newClaimType}\r\n                onChange={(e) => setNewClaimType(e.target.value as 'string' | 'number' | 'boolean' | 'json')}\r\n                className=\"w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-sm\"\r\n              >\r\n                <option value=\"string\">String</option>\r\n                <option value=\"number\">Number</option>\r\n                <option value=\"boolean\">Boolean</option>\r\n                <option value=\"json\">JSON</option>\r\n              </select>\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1\">Value</label>\r\n              <div className=\"flex items-center\">\r\n                <TextInput \r\n                  value={newClaimValue}\r\n                  onChange={(e) => setNewClaimValue(e.target.value)}\r\n                  placeholder=\"Value\"\r\n                  size=\"sm\"\r\n                  className=\"flex-grow\"\r\n                />\r\n                <Button \r\n                  variant=\"primary\"\r\n                  size=\"sm\"\r\n                  className=\"ml-2\"\r\n                  onClick={addClaim}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"mt-4\">\r\n          <h4 className=\"font-medium text-gray-800 dark:text-gray-200 mb-1\">Common Claims</h4>\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            <Button \r\n              variant=\"light\" \r\n              size=\"sm\"\r\n              onClick={() => {\r\n                if (!claims.some(c => c.name === 'exp')) {\r\n                  setClaims([\r\n                    ...claims,\r\n                    {\r\n                      name: 'exp',\r\n                      value: String(Math.floor(Date.now() / 1000) + 3600), // 1 hour from now\r\n                      type: 'number'\r\n                    }\r\n                  ]);\r\n                }\r\n              }}\r\n            >\r\n              Add exp (Expiry)\r\n            </Button>\r\n            <Button \r\n              variant=\"light\" \r\n              size=\"sm\" \r\n              onClick={() => {\r\n                if (!claims.some(c => c.name === 'iat')) {\r\n                  setClaims([\r\n                    ...claims,\r\n                    {\r\n                      name: 'iat',\r\n                      value: String(Math.floor(Date.now() / 1000)),\r\n                      type: 'number'\r\n                    }\r\n                  ]);\r\n                }\r\n              }}\r\n            >\r\n              Add iat (Issued At)\r\n            </Button>\r\n            <Button \r\n              variant=\"light\" \r\n              size=\"sm\"\r\n              onClick={() => {\r\n                if (!claims.some(c => c.name === 'nbf')) {\r\n                  setClaims([\r\n                    ...claims,\r\n                    {\r\n                      name: 'nbf',\r\n                      value: String(Math.floor(Date.now() / 1000)),\r\n                      type: 'number'\r\n                    }\r\n                  ]);\r\n                }\r\n              }}\r\n            >\r\n              Add nbf (Not Before)\r\n            </Button>\r\n            <Button \r\n              variant=\"light\" \r\n              size=\"sm\"\r\n              onClick={() => {\r\n                if (!claims.some(c => c.name === 'iss')) {\r\n                  setClaims([\r\n                    ...claims,\r\n                    {\r\n                      name: 'iss',\r\n                      value: 'https://example.com',\r\n                      type: 'string'\r\n                    }\r\n                  ]);\r\n                }\r\n              }}\r\n            >\r\n              Add iss (Issuer)\r\n            </Button>\r\n            <Button \r\n              variant=\"light\" \r\n              size=\"sm\"\r\n              onClick={() => {\r\n                if (!claims.some(c => c.name === 'aud')) {\r\n                  setClaims([\r\n                    ...claims,\r\n                    {\r\n                      name: 'aud',\r\n                      value: 'client-id',\r\n                      type: 'string'\r\n                    }\r\n                  ]);\r\n                }\r\n              }}\r\n            >\r\n              Add aud (Audience)\r\n            </Button>\r\n            <Button\r\n              variant=\"light\"\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                if (!claims.some(c => c.name === 'jti')) {\r\n                  setClaims([\r\n                    ...claims,\r\n                    {\r\n                      name: 'jti',\r\n                      value: crypto.randomUUID(),\r\n                      type: 'string'\r\n                    }\r\n                  ]);\r\n                }\r\n              }}\r\n            >\r\n              Add jti (JWT ID)\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"mt-6 flex justify-between\">\r\n        <Button \r\n          variant=\"light\"\r\n          onClick={() => setActiveStep('header')}\r\n        >\r\n          Back to Header\r\n        </Button>\r\n        <Button \r\n          variant=\"primary\"\r\n          onClick={() => setActiveStep('signature')}\r\n        >\r\n          Continue to Signature\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n  // Render signature configuration step\r\n  const renderSignatureStep = () => {\r\n    let keyLabel = \"Secret Key\";\r\n    let keyHelp = \"Enter the secret key for HMAC signing\";\r\n    \r\n    if (algorithm.startsWith('RS')) {\r\n      keyLabel = \"Private Key (PKCS#8)\";\r\n      keyHelp = \"Enter the PEM-formatted RSA private key\";\r\n    } else if (algorithm.startsWith('ES')) {\r\n      keyLabel = \"Private Key (PKCS#8)\";\r\n      keyHelp = \"Enter the PEM-formatted EC private key\";\r\n    } else if (algorithm === 'none') {\r\n      keyLabel = \"No Key Required\";\r\n      keyHelp = \"The 'none' algorithm does not use a key\";\r\n    }\r\n    \r\n    return (\r\n      <div className=\"p-4\">\r\n        <div className=\"mb-4 bg-blue-50 dark:bg-blue-900/20 p-3 rounded-md border border-blue-200 dark:border-blue-800\">\r\n          <p className=\"text-blue-800 dark:text-blue-200 text-sm flex items-center\">\r\n            <span className=\"mr-2\">ℹ️</span>\r\n            You're creating a token with algorithm <strong>{algorithm}</strong> and {claims.length} claims.\r\n            {algorithm === 'none' && (\r\n              <span className=\"text-red-600 dark:text-red-400 ml-1\"> (Unsigned Token - Not secure)</span>\r\n            )}\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"mt-4\">\r\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n            {keyLabel}\r\n          </label>\r\n          <textarea\r\n            value={privateKey}\r\n            onChange={(e) => setPrivateKey(e.target.value)}\r\n            placeholder={algorithm === 'none' ? 'No key needed for \"none\" algorithm' : 'Enter key here...'}\r\n            disabled={algorithm === 'none'}\r\n            className=\"w-full font-mono h-32 p-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 dark:text-gray-200\"\r\n          />\r\n          <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\r\n            {keyHelp}\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"mt-4\">\r\n          <Button\r\n            variant=\"primary\"\r\n            className=\"w-full\"\r\n            onClick={handleSignToken}\r\n            disabled={isSigning || (algorithm !== 'none' && !privateKey)}\r\n          >\r\n            {isSigning ? 'Signing...' : 'Sign Token'}\r\n          </Button>\r\n        </div>\r\n        \r\n        {signError && (\r\n          <div className=\"mt-4 bg-red-50 dark:bg-red-900/20 p-3 rounded-md border border-red-200 dark:border-red-800\">\r\n            <p className=\"text-red-800 dark:text-red-300 text-sm\">{signError}</p>\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"mt-6 flex justify-between\">\r\n          <Button \r\n            variant=\"light\"\r\n            onClick={() => setActiveStep('payload')}\r\n          >\r\n            Back to Payload\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"flex justify-center\">\r\n        <div className=\"w-full max-w-5xl px-4 py-6\">\r\n          <div className=\"text-center mb-8\">\r\n            <h1 className=\"text-3xl font-bold mb-2\">JWT Builder</h1>\r\n            <p className=\"text-gray-600 dark:text-gray-400\">\r\n              Create and sign custom JSON Web Tokens with our step-by-step wizard.\r\n            </p>\r\n          </div>\r\n      \r\n          <Card className=\"mb-6\">\r\n            <TabGroup>\r\n              <div className=\"border-b border-gray-200 dark:border-gray-700\">\r\n                <Tab \r\n                  id=\"header-tab\"\r\n                  isActive={activeStep === 'header'} \r\n                  onClick={() => setActiveStep('header')}\r\n                >\r\n                  1. Header\r\n                </Tab>\r\n                <Tab \r\n                  id=\"payload-tab\"\r\n                  isActive={activeStep === 'payload'} \r\n                  onClick={() => setActiveStep('payload')}\r\n                >\r\n                  2. Payload\r\n                </Tab>\r\n                <Tab \r\n                  id=\"signature-tab\"\r\n                  isActive={activeStep === 'signature'} \r\n                  onClick={() => setActiveStep('signature')}\r\n                >\r\n                  3. Signature\r\n                </Tab>\r\n              </div>\r\n              \r\n              {activeStep === 'header' && renderHeaderStep()}\r\n              {activeStep === 'payload' && renderPayloadStep()}\r\n              {activeStep === 'signature' && renderSignatureStep()}\r\n            </TabGroup>\r\n          </Card>\r\n          \r\n          <Card>\r\n            <div className=\"p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center\">\r\n              <h3 className=\"text-lg font-semibold\">Generated Token</h3>\r\n              <Badge color=\"info\">Size: {tokenSizeBytes} bytes</Badge>\r\n            </div>\r\n            \r\n            <div className=\"p-4\">\r\n              <div className=\"bg-gray-50 dark:bg-gray-800 p-3 rounded-md border border-gray-200 dark:border-gray-700 font-mono text-sm overflow-x-auto whitespace-nowrap\">\r\n                {generatedToken || 'Your token will appear here...'}\r\n              </div>\r\n              \r\n              <div className=\"mt-4 flex justify-end\">\r\n                <Button \r\n                  onClick={handleCopyToken}\r\n                  variant=\"primary\"\r\n                  disabled={!generatedToken}\r\n                >\r\n                  {copied ? 'Copied!' : 'Copy Token'}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { useJwt, SecurityIssue } from '../context/JwtContext';\r\nimport { \r\n  Card, \r\n  Button, \r\n  Alert,\r\n  Badge,\r\n  TabGroup,\r\n  Tab,\r\n  TabPanel,\r\n  TextInput,\r\n  Tooltip\r\n} from '../../../design-system';\r\n\r\n/**\r\n * JWT Inspector component - handles token decoding, verification, and security analysis\r\n */\r\nexport const InspectorPane: React.FC = () => {\r\n  const { state, dispatch, decodeToken, verifySignature, analyzeToken } = useJwt();\r\n  const { token, decoded, isVerified, error, securityIssues } = state;\r\n  \r\n  const [secretKey, setSecretKey] = useState('');\r\n  const [activeTab, setActiveTab] = useState<'json' | 'claims'>('json');\r\n  const [copied, setCopied] = useState(false);\r\n  const [copiedSection, setCopiedSection] = useState<string | null>(null);\r\n  const [showVerifyModal, setShowVerifyModal] = useState(false);\r\n  const [securityScore, setSecurityScore] = useState<number | null>(null);\r\n  \r\n  // Reset the copied state after 2 seconds\r\n  useEffect(() => {\r\n    if (copied) {\r\n      const timer = setTimeout(() => {\r\n        setCopied(false);\r\n        setCopiedSection(null);\r\n      }, 2000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [copied]);\r\n  \r\n  // Calculate security score when security issues change\r\n  useEffect(() => {\r\n    if (securityIssues.length > 0 && decoded) {\r\n      // Calculate a security score from 0-100 based on issues\r\n      const highIssues = securityIssues.filter(issue => issue.severity === 'high').length;\r\n      const mediumIssues = securityIssues.filter(issue => issue.severity === 'medium').length;\r\n      const lowIssues = securityIssues.filter(issue => issue.severity === 'low').length;\r\n      \r\n      // More serious issues have bigger impact on score\r\n      const score = Math.max(0, 100 - (highIssues * 25 + mediumIssues * 10 + lowIssues * 5));\r\n      setSecurityScore(score);\r\n    } else {\r\n      setSecurityScore(null);\r\n    }\r\n  }, [securityIssues, decoded]);\r\n  \r\n  // Get security score text based on score value\r\n  const getSecurityScoreText = (score: number): string => {\r\n    if (score >= 90) return \"Excellent\";\r\n    if (score >= 80) return \"Good\";\r\n    if (score >= 60) return \"Moderate\";\r\n    if (score >= 40) return \"Poor\";\r\n    return \"Critical\";\r\n  };\r\n\r\n  // Get security score color based on score value\r\n  const getSecurityScoreColor = (score: number): string => {\r\n    if (score >= 90) return \"bg-green-100 text-green-800\";\r\n    if (score >= 80) return \"bg-green-50 text-green-600\";\r\n    if (score >= 60) return \"bg-yellow-100 text-yellow-800\";\r\n    if (score >= 40) return \"bg-orange-100 text-orange-800\";\r\n    return \"bg-red-100 text-red-800\";\r\n  };\r\n  \r\n  // Security Score Visualization Component\r\n  interface SecurityScoreGaugeProps {\r\n    score: number;\r\n  }\r\n\r\n  const SecurityScoreGauge: React.FC<SecurityScoreGaugeProps> = ({ score }) => {\r\n    const scoreText = getSecurityScoreText(score);\r\n    const colorClass = getSecurityScoreColor(score);\r\n    \r\n    return (\r\n      <div className=\"flex flex-col items-center\">\r\n        <div className=\"relative w-32 h-32\">\r\n          <svg viewBox=\"0 0 100 100\" className=\"w-full h-full\">\r\n            {/* Background circle */}\r\n            <circle \r\n              cx=\"50\" \r\n              cy=\"50\" \r\n              r=\"45\" \r\n              fill=\"none\" \r\n              stroke=\"#e5e7eb\" \r\n              strokeWidth=\"10\" \r\n            />\r\n            \r\n            {/* Progress arc - calculate stroke-dasharray based on score */}\r\n            <circle \r\n              cx=\"50\" \r\n              cy=\"50\" \r\n              r=\"45\" \r\n              fill=\"none\" \r\n              stroke={score >= 90 ? \"#10b981\" : \r\n                     score >= 80 ? \"#34d399\" :\r\n                     score >= 60 ? \"#fbbf24\" :\r\n                     score >= 40 ? \"#f97316\" : \"#ef4444\"}\r\n              strokeWidth=\"10\" \r\n              strokeDasharray={`${score * 2.83} 283`}\r\n              strokeDashoffset=\"0\"\r\n              strokeLinecap=\"round\"\r\n              transform=\"rotate(-90 50 50)\"\r\n            />\r\n          </svg>\r\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\r\n            <span className=\"text-3xl font-bold\">{score}</span>\r\n            <span className=\"text-sm opacity-80\">/100</span>\r\n          </div>\r\n        </div>\r\n        <div className={`mt-2 px-3 py-1 rounded-full font-medium ${colorClass}`}>\r\n          {scoreText}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Handle token input change\r\n  const handleTokenChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const newToken = e.target.value.trim();\r\n    if (newToken !== token) {\r\n      decodeToken(newToken);\r\n      if (newToken) {\r\n        analyzeToken(newToken);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Generate a demo token for testing\r\n  const handleGenerateDemo = () => {\r\n    // Create demo token with security issues for demonstration\r\n    const demoToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNjE2MjM5MDIyLCJleHAiOjE5MTYyMzkwMjIsInJvbGUiOiJhZG1pbiJ9.8TT2jkQV3a9lQfNSJz7USP9vgKzlhWPMnDxCQfFgj3w';\r\n    decodeToken(demoToken);\r\n    analyzeToken(demoToken);\r\n  };\r\n  \r\n  // Reset the inspector\r\n  const handleReset = () => {\r\n    dispatch({ type: 'RESET' });\r\n    setSecretKey('');\r\n    setSecurityScore(null);\r\n  };\r\n  \r\n  // Copy content to clipboard\r\n  const handleCopy = (content: string, section: string = 'token') => {\r\n    navigator.clipboard.writeText(content);\r\n    setCopied(true);\r\n    setCopiedSection(section);\r\n  };\r\n  \r\n  // Handle signature verification\r\n  const handleVerify = () => {\r\n    if (!decoded || !secretKey) return;\r\n    verifySignature(decoded.header.alg, secretKey);\r\n  };\r\n  \r\n  // Format JWT dates (exp, iat, nbf)\r\n  const formatDate = (timestamp: number): string => {\r\n    try {\r\n      return new Date(timestamp * 1000).toLocaleString();\r\n    } catch (e) {\r\n      return 'Invalid date';\r\n    }\r\n  };\r\n  \r\n  // Check if token is expired\r\n  const isExpired = (exp: number): boolean => {\r\n    return Date.now() > exp * 1000;\r\n  };\r\n  \r\n  // Get a description for standard JWT claims\r\n  const getClaimDescription = (key: string): string => {\r\n    switch(key) {\r\n      case 'sub': return 'Subject (user) identifier';\r\n      case 'iss': return 'Issuer of the token';\r\n      case 'aud': return 'Audience the token is intended for';\r\n      case 'exp': return 'Expiration time (when token becomes invalid)';\r\n      case 'nbf': return 'Not before time (when token starts being valid)';\r\n      case 'iat': return 'Issued at time (when token was issued)';\r\n      case 'jti': return 'JWT ID (unique identifier for this token)';\r\n      case 'name': return 'User name';\r\n      case 'given_name': return 'User first name';\r\n      case 'family_name': return 'User last name';\r\n      case 'email': return 'User email address';\r\n      case 'roles': return 'User roles/permissions';\r\n      case 'scope': return 'OAuth 2.0 scopes';\r\n      case 'sid': return 'Session ID';\r\n      case 'auth_time': return 'Time when authentication occurred';\r\n      default: return 'Custom claim';\r\n    }\r\n  };\r\n  \r\n  // Get severity badge color based on severity level\r\n  const getSeverityColor = (severity: string): string => {\r\n    switch (severity) {\r\n      case 'high': return 'danger';\r\n      case 'medium': return 'warning';\r\n      case 'low': return 'info';\r\n      default: return 'light';\r\n    }\r\n  };\r\n  \r\n  // Get severity icon based on severity level\r\n  const getSeverityIcon = (severity: string): string => {\r\n    switch (severity) {\r\n      case 'high': return '⚠️';\r\n      case 'medium': return '⚠';\r\n      case 'low': return 'ℹ️';\r\n      default: return 'ℹ️';\r\n    }\r\n  };\r\n  \r\n  // Get token part colors\r\n  const getTokenPartColor = (part: string): string => {\r\n    switch(part) {\r\n      case 'header': return 'text-blue-600 dark:text-blue-400';\r\n      case 'payload': return 'text-purple-600 dark:text-purple-400';\r\n      case 'signature': return 'text-red-600 dark:text-red-400';\r\n      default: return 'text-gray-600';\r\n    }\r\n  };\r\n  \r\n  // Render security issues alerts\r\n  const renderSecurityIssues = () => {\r\n    if (!securityIssues || securityIssues.length === 0) return null;\r\n    \r\n    // Group issues by severity for better organization\r\n    const highIssues = securityIssues.filter(issue => issue.severity === 'high');\r\n    const mediumIssues = securityIssues.filter(issue => issue.severity === 'medium');\r\n    const lowIssues = securityIssues.filter(issue => issue.severity === 'low');\r\n    const infoIssues = securityIssues.filter(issue => issue.severity === 'info');\r\n    \r\n    return (\r\n      <Card className=\"mb-6\">\r\n        <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\r\n          <h3 className=\"text-lg font-semibold flex items-center\">\r\n            Security Analysis\r\n            {securityScore !== null && (\r\n              <div className=\"ml-auto flex items-center\">\r\n                <div className=\"text-sm mr-2\">Security Score:</div>\r\n                <div className={`rounded-full w-10 h-10 flex items-center justify-center ${getSecurityScoreColor(securityScore)}`}>\r\n                  {securityScore}\r\n                </div>\r\n                <div className=\"ml-2 text-sm font-medium\">\r\n                  {getSecurityScoreText(securityScore)}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </h3>\r\n        </div>\r\n        <div className=\"p-4\">\r\n          {highIssues.length > 0 && (\r\n            <div className=\"mb-4\">\r\n              <h4 className=\"text-red-600 dark:text-red-400 font-medium mb-2\">Critical Issues</h4>\r\n              {highIssues.map((issue) => (\r\n                <Alert \r\n                  key={issue.id}\r\n                  type=\"error\"\r\n                  className=\"mb-2\"\r\n                >\r\n                  <div className=\"flex items-start\">\r\n                    <span className=\"mr-2 mt-0.5\">{getSeverityIcon(issue.severity)}</span>\r\n                    <div>\r\n                      <div className=\"font-medium\">{issue.title}</div>\r\n                      <div className=\"text-sm\">{issue.description}</div>\r\n                    </div>\r\n                  </div>\r\n                </Alert>\r\n              ))}\r\n            </div>\r\n          )}\r\n          \r\n          {mediumIssues.length > 0 && (\r\n            <div className=\"mb-4\">\r\n              <h4 className=\"text-yellow-600 dark:text-yellow-400 font-medium mb-2\">Warning Issues</h4>\r\n              {mediumIssues.map((issue) => (\r\n                <Alert \r\n                  key={issue.id}\r\n                  type=\"warning\"\r\n                  className=\"mb-2\"\r\n                >\r\n                  <div className=\"flex items-start\">\r\n                    <span className=\"mr-2 mt-0.5\">{getSeverityIcon(issue.severity)}</span>\r\n                    <div>\r\n                      <div className=\"font-medium\">{issue.title}</div>\r\n                      <div className=\"text-sm\">{issue.description}</div>\r\n                    </div>\r\n                  </div>\r\n                </Alert>\r\n              ))}\r\n            </div>\r\n          )}\r\n          \r\n          {(lowIssues.length > 0 || infoIssues.length > 0) && (\r\n            <div>\r\n              <h4 className=\"text-blue-600 dark:text-blue-400 font-medium mb-2\">Informational</h4>\r\n              {[...lowIssues, ...infoIssues].map((issue) => (\r\n                <Alert \r\n                  key={issue.id}\r\n                  type=\"info\"\r\n                  className=\"mb-2\"\r\n                >\r\n                  <div className=\"flex items-start\">\r\n                    <span className=\"mr-2 mt-0.5\">{getSeverityIcon(issue.severity)}</span>\r\n                    <div>\r\n                      <div className=\"font-medium\">{issue.title}</div>\r\n                      <div className=\"text-sm\">{issue.description}</div>\r\n                    </div>\r\n                  </div>\r\n                </Alert>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Card>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"flex justify-center\">\r\n        <div className=\"w-full max-w-5xl px-4 py-6\">\r\n          <div className=\"text-center mb-8\">\r\n            <h1 className=\"text-3xl font-bold mb-2\">JWT Token Inspector</h1>\r\n            <p className=\"text-gray-600 dark:text-gray-400\">\r\n              Decode, verify, and analyze JSON Web Tokens with advanced security analysis.\r\n            </p>\r\n          </div>\r\n          \r\n          <Card className=\"mb-6\">\r\n            <div className=\"p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center\">\r\n              <h3 className=\"text-lg font-semibold\">JWT Token</h3>\r\n              <Button onClick={handleGenerateDemo} size=\"sm\" variant=\"light\">\r\n                Generate Demo\r\n              </Button>\r\n            </div>\r\n            \r\n            <div className=\"p-4\">\r\n              <div className=\"bg-yellow-50 dark:bg-yellow-900/20 p-3 rounded-md border border-yellow-200 dark:border-yellow-800 mb-4\">\r\n                <p className=\"text-yellow-800 dark:text-yellow-200 text-sm flex items-center\">\r\n                  <span className=\"mr-2\">🔒</span>\r\n                  All JWT processing happens locally in your browser. Your tokens are never sent to a server.\r\n                </p>\r\n              </div>\r\n              \r\n              <textarea\r\n                className=\"w-full font-mono text-sm p-3 rounded-md border border-gray-300 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-100 h-28 focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\r\n                value={token}\r\n                onChange={handleTokenChange}\r\n                placeholder=\"Paste your JWT token here...\"\r\n                spellCheck=\"false\"\r\n              />\r\n              \r\n              {error && (\r\n                <Alert type=\"error\" className=\"mt-4\">{error}</Alert>\r\n              )}\r\n              \r\n              {decoded && (\r\n                <div className=\"mt-4 bg-gray-50 dark:bg-gray-800 p-3 rounded-md border border-gray-200 dark:border-gray-700 font-mono text-sm overflow-x-auto break-all\">\r\n                  <div className=\"flex flex-col sm:flex-row\">\r\n                    <div className=\"sm:w-20 text-xs uppercase font-semibold text-gray-500 dark:text-gray-400 mb-1 sm:mb-0\">Header:</div>\r\n                    <div className={`${getTokenPartColor('header')} flex-1`}>{decoded.raw.header}</div>\r\n                  </div>\r\n                  <div className=\"flex flex-col sm:flex-row mt-2\">\r\n                    <div className=\"sm:w-20 text-xs uppercase font-semibold text-gray-500 dark:text-gray-400 mb-1 sm:mb-0\">Payload:</div>\r\n                    <div className={`${getTokenPartColor('payload')} flex-1`}>{decoded.raw.payload}</div>\r\n                  </div>\r\n                  <div className=\"flex flex-col sm:flex-row mt-2\">\r\n                    <div className=\"sm:w-20 text-xs uppercase font-semibold text-gray-500 dark:text-gray-400 mb-1 sm:mb-0\">Signature:</div>\r\n                    <div className={`${getTokenPartColor('signature')} flex-1`}>{decoded.raw.signature}</div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              <div className=\"mt-4 flex justify-between\">\r\n                <div>\r\n                  <Button onClick={handleReset} variant=\"light\">Reset</Button>\r\n                </div>\r\n                <Button onClick={() => handleCopy(token)} variant=\"primary\">\r\n                  {copied && copiedSection === 'token' ? 'Copied!' : 'Copy Token'}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n          \r\n          {renderSecurityIssues()}\r\n          \r\n          {decoded && (\r\n            <>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n                <div className=\"md:col-span-2\">\r\n                  <Card>\r\n                    <TabGroup>\r\n                      <div className=\"border-b border-gray-200 dark:border-gray-700\">\r\n                        <Tab \r\n                          id=\"tab-json\"\r\n                          isActive={activeTab === 'json'} \r\n                          onClick={() => setActiveTab('json')}\r\n                        >\r\n                          JSON\r\n                        </Tab>\r\n                        <Tab \r\n                          id=\"tab-claims\"\r\n                          isActive={activeTab === 'claims'} \r\n                          onClick={() => setActiveTab('claims')}\r\n                        >\r\n                          Claims Table\r\n                        </Tab>\r\n                      </div>\r\n                      \r\n                      <div className=\"p-4\">\r\n                        <h3 className=\"font-medium text-gray-800 dark:text-gray-200 mb-2 flex items-center\">\r\n                          <span className={getTokenPartColor('header')}>HEADER</span>\r\n                          <Button \r\n                            onClick={() => handleCopy(JSON.stringify(decoded.header, null, 2), 'header')} \r\n                            variant=\"light\" \r\n                            size=\"xs\" \r\n                            className=\"ml-2\"\r\n                          >\r\n                            {copied && copiedSection === 'header' ? 'Copied!' : 'Copy'}\r\n                          </Button>\r\n                        </h3>\r\n                        \r\n                        <TabPanel id=\"panel-json-header\" isActive={activeTab === 'json'}>\r\n                          <div className=\"bg-gray-50 dark:bg-gray-800 p-3 rounded-md overflow-x-auto mb-4\">\r\n                            <pre className=\"text-sm\">{JSON.stringify(decoded.header, null, 2)}</pre>\r\n                          </div>\r\n                        </TabPanel>\r\n                        \r\n                        <TabPanel id=\"panel-claims-header\" isActive={activeTab === 'claims'}>\r\n                          <div className=\"bg-gray-50 dark:bg-gray-800 p-3 rounded-md overflow-x-auto mb-4\">\r\n                            <table className=\"w-full text-sm\">\r\n                              <thead className=\"border-b border-gray-200 dark:border-gray-700\">\r\n                                <tr>\r\n                                  <th className=\"text-left py-2 px-3\">Name</th>\r\n                                  <th className=\"text-left py-2 px-3\">Value</th>\r\n                                </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                {Object.entries(decoded.header).map(([key, value]) => (\r\n                                  <tr key={key} className=\"border-b border-gray-100 dark:border-gray-800\">\r\n                                    <td className=\"py-2 px-3 font-medium\">{key}</td>\r\n                                    <td className=\"py-2 px-3\">\r\n                                      <Tooltip content={key === 'alg' ? `Algorithm used to sign the token` : key === 'typ' ? 'Token type' : key === 'kid' ? 'Key identifier' : `Header claim: ${key}`}>\r\n                                        <span className=\"cursor-help border-b border-dotted border-gray-400\">{String(value)}</span>\r\n                                      </Tooltip>\r\n                                    </td>\r\n                                  </tr>\r\n                                ))}\r\n                              </tbody>\r\n                            </table>\r\n                          </div>\r\n                        </TabPanel>\r\n                        \r\n                        <h3 className=\"font-medium text-gray-800 dark:text-gray-200 mb-2 flex items-center\">\r\n                          <span className={getTokenPartColor('payload')}>PAYLOAD</span>\r\n                          <Button \r\n                            onClick={() => handleCopy(JSON.stringify(decoded.payload, null, 2), 'payload')} \r\n                            variant=\"light\" \r\n                            size=\"xs\" \r\n                            className=\"ml-2\"\r\n                          >\r\n                            {copied && copiedSection === 'payload' ? 'Copied!' : 'Copy'}\r\n                          </Button>\r\n                        </h3>\r\n                        \r\n                        <TabPanel id=\"panel-json-payload\" isActive={activeTab === 'json'}>\r\n                          <div className=\"bg-gray-50 dark:bg-gray-800 p-3 rounded-md overflow-x-auto\">\r\n                            <pre className=\"text-sm\">{JSON.stringify(decoded.payload, null, 2)}</pre>\r\n                          </div>\r\n                        </TabPanel>\r\n                        \r\n                        <TabPanel id=\"panel-claims-payload\" isActive={activeTab === 'claims'}>\r\n                          <div className=\"bg-gray-50 dark:bg-gray-800 p-3 rounded-md overflow-x-auto\">\r\n                            <table className=\"w-full text-sm\">\r\n                              <thead className=\"border-b border-gray-200 dark:border-gray-700\">\r\n                                <tr>\r\n                                  <th className=\"text-left py-2 px-3\">Claim</th>\r\n                                  <th className=\"text-left py-2 px-3\">Value</th>\r\n                                </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                {Object.entries(decoded.payload).map(([key, value]) => (\r\n                                  <tr key={key} className=\"border-b border-gray-100 dark:border-gray-800\">\r\n                                    <td className=\"py-2 px-3 font-medium\">{key}</td>\r\n                                    <td className=\"py-2 px-3\">\r\n                                      <Tooltip content={getClaimDescription(key)}>\r\n                                        <span className=\"cursor-help border-b border-dotted border-gray-400\">\r\n                                          {key === 'exp' || key === 'iat' || key === 'nbf' ? (\r\n                                            <div>\r\n                                              <div>{String(value)}</div>\r\n                                              <div className={`text-xs mt-1 ${key === 'exp' && isExpired(value as number) ? 'text-red-600 dark:text-red-400' : 'text-gray-500 dark:text-gray-400'}`}>\r\n                                                {formatDate(value as number)}\r\n                                                {key === 'exp' && (\r\n                                                  <span className=\"ml-2\">\r\n                                                    {isExpired(value as number) \r\n                                                      ? <Badge color=\"danger\" size=\"sm\">Expired</Badge> \r\n                                                      : <Badge color=\"success\" size=\"sm\">Valid</Badge>}\r\n                                                  </span>\r\n                                                )}\r\n                                              </div>\r\n                                            </div>\r\n                                          ) : typeof value === 'boolean' ? (\r\n                                            <span className={value ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}>\r\n                                              {String(value)}\r\n                                            </span>\r\n                                          ) : (\r\n                                            String(value)\r\n                                          )}\r\n                                        </span>\r\n                                      </Tooltip>\r\n                                    </td>\r\n                                  </tr>\r\n                                ))}\r\n                              </tbody>\r\n                            </table>\r\n                          </div>\r\n                        </TabPanel>\r\n                      </div>\r\n                    </TabGroup>\r\n                  </Card>\r\n                </div>\r\n                \r\n                <div>\r\n                  <Card className=\"mb-6\">\r\n                    <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\r\n                      <h3 className=\"font-semibold\">Signature Verification</h3>\r\n                    </div>\r\n                    <div className=\"p-4\">\r\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\r\n                        Verify the signature using your secret key. Algorithm: {decoded.header.alg || 'unknown'}\r\n                      </p>\r\n                      \r\n                      <div className=\"mt-2\">\r\n                        <label htmlFor=\"secret-key\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                          Secret/Public Key\r\n                        </label>\r\n                        <TextInput\r\n                          id=\"secret-key\"\r\n                          value={secretKey}\r\n                          onChange={(e) => setSecretKey(e.target.value)}\r\n                          placeholder=\"Enter secret key or paste public key...\"\r\n                          className=\"font-mono\"\r\n                        />\r\n                      </div>\r\n                      \r\n                      <Button \r\n                        onClick={handleVerify}\r\n                        variant=\"primary\"\r\n                        className=\"w-full mt-3\"\r\n                        disabled={!secretKey}\r\n                      >\r\n                        Verify Signature\r\n                      </Button>\r\n                      \r\n                      {isVerified !== null && (\r\n                        <div className={`mt-4 p-3 rounded-md ${\r\n                          isVerified \r\n                            ? 'bg-green-50 dark:bg-green-900/20 text-green-800 dark:text-green-300' \r\n                            : 'bg-red-50 dark:bg-red-900/20 text-red-800 dark:text-red-300'\r\n                        }`}>\r\n                          <div className=\"flex items-center\">\r\n                            <span className=\"mr-2\">\r\n                              {isVerified ? '✅' : '❌'}\r\n                            </span>\r\n                            <span className=\"font-medium\">\r\n                              {isVerified ? 'Signature Verified' : 'Invalid Signature'}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </Card>\r\n                  \r\n                  {decoded.payload.exp && (\r\n                    <Card>\r\n                      <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\r\n                        <h3 className=\"font-semibold\">Token Status</h3>\r\n                      </div>\r\n                      <div className=\"p-4\">\r\n                        <div className={`p-3 rounded-md ${\r\n                          isExpired(decoded.payload.exp as number) \r\n                            ? 'bg-red-50 dark:bg-red-900/20' \r\n                            : 'bg-green-50 dark:bg-green-900/20'\r\n                        }`}>\r\n                          <div className=\"font-medium\">\r\n                            {isExpired(decoded.payload.exp as number) ? '🕒 Expired' : '✅ Valid'}\r\n                          </div>\r\n                          <div className=\"text-sm mt-1\">\r\n                            {formatDate(decoded.payload.exp as number)}\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        {decoded.payload.iat && (\r\n                          <div className=\"mt-3\">\r\n                            <div className=\"font-medium text-gray-700 dark:text-gray-300\">Issued at:</div>\r\n                            <div className=\"text-sm\">{formatDate(decoded.payload.iat as number)}</div>\r\n                          </div>\r\n                        )}\r\n                        \r\n                        {decoded.payload.nbf && (\r\n                          <div className=\"mt-3\">\r\n                            <div className=\"font-medium text-gray-700 dark:text-gray-300\">Not valid before:</div>\r\n                            <div className=\"text-sm\">{formatDate(decoded.payload.nbf as number)}</div>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </Card>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n          \r\n          <div className=\"mt-8\">\r\n            <Card>\r\n              <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\r\n                <h2 className=\"text-lg font-semibold\">JWT Security Best Practices</h2>\r\n              </div>\r\n              <div className=\"p-4 text-sm\">\r\n                <ul className=\"space-y-3\">\r\n                  <li className=\"flex\">\r\n                    <span className=\"text-green-600 dark:text-green-400 mr-2\">✓</span>\r\n                    <span>Use short-lived tokens with expiration times (exp claim)</span>\r\n                  </li>\r\n                  <li className=\"flex\">\r\n                    <span className=\"text-green-600 dark:text-green-400 mr-2\">✓</span>\r\n                    <span>Prefer asymmetric algorithms (RS256, ES256) over symmetric ones (HS256) for public clients</span>\r\n                  </li>\r\n                  <li className=\"flex\">\r\n                    <span className=\"text-green-600 dark:text-green-400 mr-2\">✓</span>\r\n                    <span>Include audience (aud) and issuer (iss) claims to prevent token misuse</span>\r\n                  </li>\r\n                  <li className=\"flex\">\r\n                    <span className=\"text-green-600 dark:text-green-400 mr-2\">✓</span>\r\n                    <span>Use strong, unique keys for signing tokens</span>\r\n                  </li>\r\n                  <li className=\"flex\">\r\n                    <span className=\"text-red-600 dark:text-red-400 mr-2\">✗</span>\r\n                    <span>Never store sensitive data like passwords or API keys in tokens</span>\r\n                  </li>\r\n                  <li className=\"flex\">\r\n                    <span className=\"text-red-600 dark:text-red-400 mr-2\">✗</span>\r\n                    <span>Never use the 'none' algorithm in production</span>\r\n                  </li>\r\n                  <li className=\"flex\">\r\n                    <span className=\"text-red-600 dark:text-red-400 mr-2\">✗</span>\r\n                    <span>Avoid very long-lived tokens (&gt; 24 hours) for sensitive operations</span>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Card, \r\n  Button, \r\n  TextInput,\r\n  Alert,\r\n  Badge,\r\n  LoadingSpinner\r\n} from '../../../design-system';\r\nimport { useJwt } from '../context/JwtContext';\r\n\r\ninterface JwkData {\r\n  kty: string;\r\n  kid?: string;\r\n  alg?: string;\r\n  use?: string;\r\n  key_ops?: string[];\r\n  n?: string;\r\n  e?: string;\r\n  x?: string;\r\n  y?: string;\r\n  crv?: string;\r\n}\r\n\r\ninterface OidcConfig {\r\n  issuer?: string;\r\n  jwks_uri?: string;\r\n  token_endpoint?: string;\r\n  authorization_endpoint?: string;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * JWKS Probe component - fetches and displays JWKS information\r\n */\r\nexport const JwksProbe: React.FC = () => {\r\n  const { state } = useJwt();\r\n  const { decoded } = state;\r\n  \r\n  const [url, setUrl] = useState<string>('');\r\n  const [urlType, setUrlType] = useState<'jwks' | 'oidc'>('jwks');\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [jwksList, setJwksList] = useState<JwkData[]>([]);\r\n  const [oidcConfig, setOidcConfig] = useState<OidcConfig | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [matchedKey, setMatchedKey] = useState<JwkData | null>(null);\r\n  const [copied, setCopied] = useState<boolean>(false);\r\n  const [copiedItem, setCopiedItem] = useState<string | null>(null);\r\n  \r\n  // Try to extract the issuer from the token if available\r\n  useEffect(() => {\r\n    if (decoded?.payload?.iss && !url) {\r\n      // Common formats for discovery endpoints\r\n      const issuer = decoded.payload.iss as string;\r\n      if (issuer.endsWith('/')) {\r\n        setUrl(`${issuer}.well-known/openid-configuration`);\r\n      } else {\r\n        setUrl(`${issuer}/.well-known/openid-configuration`);\r\n      }\r\n      setUrlType('oidc');\r\n    }\r\n  }, [decoded]);\r\n\r\n  // Reset the copied state after 2 seconds\r\n  useEffect(() => {\r\n    if (copied) {\r\n      const timer = setTimeout(() => {\r\n        setCopied(false);\r\n        setCopiedItem(null);\r\n      }, 2000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [copied]);\r\n\r\n  // Try to match the token with a key from the JWKS\r\n  useEffect(() => {\r\n    if (decoded?.header?.kid && jwksList.length > 0) {\r\n      const keyId = decoded.header.kid;\r\n      const matchingKey = jwksList.find(key => key.kid === keyId);\r\n      setMatchedKey(matchingKey || null);\r\n    } else {\r\n      setMatchedKey(null);\r\n    }\r\n  }, [decoded, jwksList]);\r\n  \r\n  // Fetch JWKS directly\r\n  const fetchJwks = async () => {\r\n    if (!url) return;\r\n    \r\n    setIsLoading(true);\r\n    setError(null);\r\n    setJwksList([]);\r\n    setOidcConfig(null);\r\n    \r\n    try {\r\n      const response = await fetch(url);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error: ${response.status} ${response.statusText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      // Store in session storage for later use\r\n      try {\r\n        sessionStorage.setItem(`jwks_${url}`, JSON.stringify(data));\r\n      } catch (e) {\r\n        console.warn('Failed to cache JWKS in sessionStorage:', e);\r\n      }\r\n      \r\n      if (data.keys) {\r\n        setJwksList(data.keys);\r\n      } else {\r\n        throw new Error('No keys found in the JWKS response');\r\n      }\r\n    } catch (err) {\r\n      setError(`Failed to fetch JWKS: ${err instanceof Error ? err.message : String(err)}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Fetch OIDC config and then JWKS\r\n  const fetchOidcConfig = async () => {\r\n    if (!url) return;\r\n    \r\n    setIsLoading(true);\r\n    setError(null);\r\n    setJwksList([]);\r\n    setOidcConfig(null);\r\n    \r\n    try {\r\n      // First, fetch the OIDC config\r\n      const configResponse = await fetch(url);\r\n      \r\n      if (!configResponse.ok) {\r\n        throw new Error(`HTTP error: ${configResponse.status} ${configResponse.statusText}`);\r\n      }\r\n      \r\n      const config = await configResponse.json();\r\n      setOidcConfig(config);\r\n      \r\n      // Store in session storage\r\n      try {\r\n        sessionStorage.setItem(`oidc_${url}`, JSON.stringify(config));\r\n      } catch (e) {\r\n        console.warn('Failed to cache OIDC config in sessionStorage:', e);\r\n      }\r\n      \r\n      if (!config.jwks_uri) {\r\n        throw new Error('No JWKS URI found in the OIDC configuration');\r\n      }\r\n      \r\n      // Now fetch the JWKS from the URI in the config\r\n      const jwksResponse = await fetch(config.jwks_uri);\r\n      \r\n      if (!jwksResponse.ok) {\r\n        throw new Error(`HTTP error fetching JWKS: ${jwksResponse.status} ${jwksResponse.statusText}`);\r\n      }\r\n      \r\n      const jwksData = await jwksResponse.json();\r\n      \r\n      // Store in session storage\r\n      try {\r\n        sessionStorage.setItem(`jwks_${config.jwks_uri}`, JSON.stringify(jwksData));\r\n      } catch (e) {\r\n        console.warn('Failed to cache JWKS in sessionStorage:', e);\r\n      }\r\n      \r\n      if (jwksData.keys) {\r\n        setJwksList(jwksData.keys);\r\n      } else {\r\n        throw new Error('No keys found in the JWKS response');\r\n      }\r\n    } catch (err) {\r\n      setError(`Failed to fetch OIDC configuration or JWKS: ${err instanceof Error ? err.message : String(err)}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Handle the fetch button click\r\n  const handleFetch = () => {\r\n    if (urlType === 'jwks') {\r\n      fetchJwks();\r\n    } else {\r\n      fetchOidcConfig();\r\n    }\r\n  };\r\n\r\n  // Handle copy to clipboard\r\n  const handleCopy = (content: string, item: string) => {\r\n    navigator.clipboard.writeText(content);\r\n    setCopied(true);\r\n    setCopiedItem(item);\r\n  };\r\n  \r\n  // Try loading from cached data first\r\n  const tryLoadFromCache = () => {\r\n    try {\r\n      if (urlType === 'jwks') {\r\n        const cachedJwks = sessionStorage.getItem(`jwks_${url}`);\r\n        if (cachedJwks) {\r\n          const data = JSON.parse(cachedJwks);\r\n          if (data.keys) {\r\n            setJwksList(data.keys);\r\n            return true;\r\n          }\r\n        }\r\n      } else {\r\n        const cachedOidcConfig = sessionStorage.getItem(`oidc_${url}`);\r\n        if (cachedOidcConfig) {\r\n          const config = JSON.parse(cachedOidcConfig);\r\n          setOidcConfig(config);\r\n          \r\n          const cachedJwks = sessionStorage.getItem(`jwks_${config.jwks_uri}`);\r\n          if (cachedJwks) {\r\n            const jwksData = JSON.parse(cachedJwks);\r\n            if (jwksData.keys) {\r\n              setJwksList(jwksData.keys);\r\n              return true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.error('Error loading from cache:', e);\r\n    }\r\n    return false;\r\n  };\r\n  \r\n  // Get a sample URL for the selected URL type\r\n  const getSampleUrl = () => {\r\n    if (urlType === 'jwks') {\r\n      setUrl('https://www.googleapis.com/oauth2/v3/certs');\r\n    } else {\r\n      setUrl('https://accounts.google.com/.well-known/openid-configuration');\r\n    }\r\n  };\r\n  \r\n  // Render a key information card\r\n  const renderKeyCard = (key: JwkData, index: number) => {\r\n    const isMatched = decoded?.header?.kid && key.kid === decoded.header.kid;\r\n    const keyJson = JSON.stringify(key, null, 2);\r\n    \r\n    return (\r\n      <Card key={key.kid || index} className={`mb-4 ${isMatched ? 'border-green-500 dark:border-green-500' : ''}`}>\r\n        <div className=\"p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center\">\r\n          <h4 className=\"font-semibold flex items-center\">\r\n            {isMatched && <span className=\"mr-2 text-green-500\">✓ </span>}\r\n            Key {key.kid ? `ID: ${key.kid}` : index + 1}\r\n          </h4>\r\n          <div className=\"flex gap-2\">\r\n            {key.alg && <Badge color=\"primary\">{key.alg}</Badge>}\r\n            <Badge color=\"info\">{key.kty}</Badge>\r\n            {key.use && <Badge color=\"success\">{key.use}</Badge>}\r\n          </div>\r\n        </div>\r\n        <div className=\"p-4\">\r\n          <div className=\"mb-2\">\r\n            <span className=\"font-medium\">Type:</span> {key.kty}\r\n          </div>\r\n          \r\n          {key.alg && (\r\n            <div className=\"mb-2\">\r\n              <span className=\"font-medium\">Algorithm:</span> {key.alg}\r\n            </div>\r\n          )}\r\n          \r\n          {key.use && (\r\n            <div className=\"mb-2\">\r\n              <span className=\"font-medium\">Use:</span> {key.use}\r\n            </div>\r\n          )}\r\n          \r\n          {key.key_ops && (\r\n            <div className=\"mb-2\">\r\n              <span className=\"font-medium\">Operations:</span> {key.key_ops.join(', ')}\r\n            </div>\r\n          )}\r\n          \r\n          {/* RSA specific fields */}\r\n          {key.kty === 'RSA' && key.n && (\r\n            <div className=\"mb-2\">\r\n              <span className=\"font-medium\">Modulus (n):</span>\r\n              <div className=\"mt-1 font-mono text-xs bg-gray-50 dark:bg-gray-800 p-1 rounded-md break-all\">\r\n                {key.n}\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {key.kty === 'RSA' && key.e && (\r\n            <div className=\"mb-2\">\r\n              <span className=\"font-medium\">Exponent (e):</span> {key.e}\r\n            </div>\r\n          )}\r\n          \r\n          {/* EC specific fields */}\r\n          {key.kty === 'EC' && (\r\n            <>\r\n              {key.crv && (\r\n                <div className=\"mb-2\">\r\n                  <span className=\"font-medium\">Curve:</span> {key.crv}\r\n                </div>\r\n              )}\r\n              {key.x && (\r\n                <div className=\"mb-2\">\r\n                  <span className=\"font-medium\">X:</span>\r\n                  <div className=\"mt-1 font-mono text-xs bg-gray-50 dark:bg-gray-800 p-1 rounded-md break-all\">\r\n                    {key.x}\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {key.y && (\r\n                <div className=\"mb-2\">\r\n                  <span className=\"font-medium\">Y:</span>\r\n                  <div className=\"mt-1 font-mono text-xs bg-gray-50 dark:bg-gray-800 p-1 rounded-md break-all\">\r\n                    {key.y}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </>\r\n          )}\r\n          \r\n          <div className=\"mt-4 pt-3 border-t border-gray-200 dark:border-gray-700\">\r\n            <Button \r\n              variant=\"light\" \r\n              size=\"sm\"\r\n              onClick={() => handleCopy(keyJson, `key_${index}`)}\r\n            >\r\n              {copied && copiedItem === `key_${index}` ? 'Copied!' : 'Copy Key JSON'}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\r\n        <div className=\"text-center mb-8\">\r\n          <h1 className=\"text-3xl font-bold mb-2\">JWKS Probe</h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            Discover and explore JSON Web Key Sets (JWKS) to verify JWT signatures.\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-md border border-blue-200 dark:border-blue-800 mb-6\">\r\n          <div className=\"flex items-start\">\r\n            <div className=\"mr-3 text-blue-600 dark:text-blue-400 text-lg\">ℹ️</div>\r\n            <div>\r\n              <h3 className=\"font-medium text-blue-800 dark:text-blue-300 mb-1\">What is JWKS?</h3>\r\n              <p className=\"text-blue-800 dark:text-blue-200 text-sm\">\r\n                A JSON Web Key Set is a JSON document that represents a set of public keys as a JSON object. \r\n                JWKS endpoints are used to publish the public keys needed to verify JWT signatures.\r\n                This tool helps you retrieve and inspect these keys.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <Card className=\"mb-6\">\r\n          <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\r\n            <h3 className=\"text-lg font-semibold\">JWKS Endpoint Configuration</h3>\r\n          </div>\r\n          \r\n          <div className=\"p-4\">\r\n            <div className=\"mb-4\">\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                URL Type\r\n              </label>\r\n              <div className=\"flex items-center space-x-4\">\r\n                <label className=\"inline-flex items-center\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    value=\"jwks\"\r\n                    checked={urlType === 'jwks'}\r\n                    onChange={() => setUrlType('jwks')}\r\n                    className=\"form-radio h-4 w-4 text-blue-600\"\r\n                  />\r\n                  <span className=\"ml-2\">JWKS Endpoint</span>\r\n                </label>\r\n                <label className=\"inline-flex items-center\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    value=\"oidc\"\r\n                    checked={urlType === 'oidc'}\r\n                    onChange={() => setUrlType('oidc')}\r\n                    className=\"form-radio h-4 w-4 text-blue-600\"\r\n                  />\r\n                  <span className=\"ml-2\">OIDC Discovery</span>\r\n                </label>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"mb-4\">\r\n              <label htmlFor=\"jwks-url\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                {urlType === 'jwks' ? 'JWKS URL' : 'OIDC Discovery URL'}\r\n              </label>\r\n              <div className=\"flex\">\r\n                <TextInput\r\n                  id=\"jwks-url\"\r\n                  value={url}\r\n                  onChange={(e) => setUrl(e.target.value)}\r\n                  placeholder={\r\n                    urlType === 'jwks' \r\n                      ? 'https://example.com/.well-known/jwks.json' \r\n                      : 'https://example.com/.well-known/openid-configuration'\r\n                  }\r\n                  className=\"flex-grow\"\r\n                />\r\n                <Button\r\n                  onClick={getSampleUrl}\r\n                  variant=\"light\"\r\n                  className=\"ml-2\"\r\n                >\r\n                  Sample\r\n                </Button>\r\n              </div>\r\n              \r\n              <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\r\n                {urlType === 'jwks' \r\n                  ? 'Direct URL to a JWKS endpoint containing public keys' \r\n                  : 'URL to an OpenID Connect discovery document'}\r\n              </p>\r\n              \r\n              {decoded?.payload?.iss && (\r\n                <div className=\"mt-2 p-2 bg-green-50 dark:bg-green-900/20 text-green-800 dark:text-green-200 text-sm rounded-md\">\r\n                  Token issuer detected: <span className=\"font-medium\">{decoded.payload.iss}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n            \r\n            <div className=\"flex justify-end\">\r\n              <Button\r\n                onClick={handleFetch}\r\n                variant=\"primary\"\r\n                disabled={!url || isLoading}\r\n              >\r\n                {isLoading ? (\r\n                  <>\r\n                    <LoadingSpinner size=\"sm\" className=\"mr-2\" />\r\n                    Fetching...\r\n                  </>\r\n                ) : (\r\n                  'Fetch Keys'\r\n                )}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n        \r\n        {error && (\r\n          <Alert type=\"error\" className=\"mb-6\">{error}</Alert>\r\n        )}\r\n        \r\n        {oidcConfig && (\r\n          <Card className=\"mb-6\">\r\n            <div className=\"p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center\">\r\n              <h3 className=\"text-lg font-semibold\">OIDC Configuration</h3>\r\n              <Button \r\n                variant=\"light\"\r\n                size=\"sm\"\r\n                onClick={() => {\r\n                  const configJson = JSON.stringify(oidcConfig, null, 2);\r\n                  handleCopy(configJson, 'oidc_config');\r\n                }}\r\n              >\r\n                {copied && copiedItem === 'oidc_config' ? 'Copied!' : 'Copy Full Config'}\r\n              </Button>\r\n            </div>\r\n            <div className=\"p-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                {oidcConfig.issuer && (\r\n                  <div>\r\n                    <span className=\"font-medium\">Issuer:</span> {oidcConfig.issuer}\r\n                  </div>\r\n                )}\r\n                {oidcConfig.jwks_uri && (\r\n                  <div>\r\n                    <span className=\"font-medium\">JWKS URI:</span> {oidcConfig.jwks_uri}\r\n                  </div>\r\n                )}\r\n                {oidcConfig.token_endpoint && (\r\n                  <div>\r\n                    <span className=\"font-medium\">Token Endpoint:</span> {oidcConfig.token_endpoint}\r\n                  </div>\r\n                )}\r\n                {oidcConfig.authorization_endpoint && (\r\n                  <div>\r\n                    <span className=\"font-medium\">Authorization Endpoint:</span> {oidcConfig.authorization_endpoint}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n                <h4 className=\"font-medium mb-2\">Available Scopes:</h4>\r\n                <div className=\"flex flex-wrap gap-2\">\r\n                  {oidcConfig.scopes_supported?.slice(0, 8).map((scope: string) => (\r\n                    <Badge key={scope} color=\"info\">{scope}</Badge>\r\n                  ))}\r\n                  {oidcConfig.scopes_supported?.length > 8 && (\r\n                    <Badge color=\"light\">+{oidcConfig.scopes_supported.length - 8} more</Badge>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        )}\r\n        \r\n        {jwksList.length > 0 && (\r\n          <div className=\"mb-6\">\r\n            <div className=\"mb-4 flex justify-between items-center\">\r\n              <h3 className=\"text-lg font-semibold\">Keys Found ({jwksList.length})</h3>\r\n              {matchedKey && decoded?.header?.kid && (\r\n                <Badge color=\"success\">\r\n                  Found matching key for KID: {decoded.header.kid}\r\n                </Badge>\r\n              )}\r\n            </div>\r\n            \r\n            {decoded?.header?.kid && !matchedKey && jwksList.length > 0 && (\r\n              <Alert type=\"warning\" className=\"mb-4\">\r\n                No key matching the token's kid \"{decoded.header.kid}\" was found in the JWKS.\r\n              </Alert>\r\n            )}\r\n            \r\n            {jwksList.map((key, index) => renderKeyCard(key, index))}\r\n          </div>\r\n        )}\r\n        \r\n        {jwksList.length > 0 && (\r\n          <Card>\r\n            <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\r\n              <h3 className=\"text-lg font-semibold\">JWKS Usage Guide</h3>\r\n            </div>\r\n            <div className=\"p-4\">\r\n              <div className=\"space-y-4\">\r\n                <h4 className=\"font-medium\">How to use a JWKS to verify a JWT:</h4>\r\n                <ol className=\"list-decimal pl-5 space-y-2 text-sm\">\r\n                  <li>Decode the JWT to extract the header and identify the key ID (kid)</li>\r\n                  <li>Find the matching key in the JWKS with the same kid</li>\r\n                  <li>Extract the public key components from the JWK (modulus, exponent for RSA)</li>\r\n                  <li>Use the public key to verify the JWT signature with the algorithm specified in the header</li>\r\n                </ol>\r\n                \r\n                <h4 className=\"font-medium mt-4\">Security Best Practices:</h4>\r\n                <ul className=\"list-disc pl-5 space-y-2 text-sm\">\r\n                  <li>Always validate the signature of JWTs using the public keys from the JWKS</li>\r\n                  <li>Check that the key's intended use (if specified) matches your use case</li>\r\n                  <li>Consider caching the JWKS to improve performance, but refresh regularly</li>\r\n                  <li>Always use HTTPS when fetching JWKS endpoints</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Card, Button, Alert, Badge } from '../../../design-system';\r\nimport { useJwt } from '../context/JwtContext';\r\n\r\n// List of algorithms to benchmark\r\nconst ALGORITHMS = [\r\n  'HS256', 'HS384', 'HS512',\r\n  'RS256', 'RS384', 'RS512',\r\n  'ES256', 'ES384', 'ES512',\r\n  'PS256', 'PS384', 'PS512'\r\n];\r\n\r\n// Algorithm family descriptions\r\nconst algFamilyDescriptions: Record<string, string> = {\r\n  HS: 'HMAC with SHA-2 - Symmetric key signatures using a shared secret',\r\n  RS: 'RSASSA-PKCS1-v1_5 - RSA signatures with PKCS#1 v1.5 padding',\r\n  ES: 'ECDSA - Elliptic Curve Digital Signature Algorithm',\r\n  PS: 'RSASSA-PSS - RSA signatures with Probabilistic Signature Scheme'\r\n};\r\n\r\n// Define algorithm color groups\r\nconst getAlgorithmColor = (alg: string): string => {\r\n  if (alg.startsWith('HS')) return 'bg-blue-500';\r\n  if (alg.startsWith('RS')) return 'bg-green-500';\r\n  if (alg.startsWith('ES')) return 'bg-purple-500';\r\n  if (alg.startsWith('PS')) return 'bg-orange-500';\r\n  return 'bg-gray-500';\r\n};\r\n\r\n// Format numbers for display\r\nconst formatNumber = (num: number): string => {\r\n  return num.toLocaleString(undefined, { maximumFractionDigits: 2 });\r\n};\r\n\r\ninterface BenchmarkResult {\r\n  algorithm: string;\r\n  operationsPerSecond: number;\r\n  averageTime: number;\r\n  totalOperations: number;\r\n  color: string;\r\n}\r\n\r\n/**\r\n * JWT Algorithm Benchmark Component\r\n * Tests the performance of various JWT algorithms in the current browser\r\n */\r\nexport const BenchResult: React.FC = () => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [currentAlgorithm, setCurrentAlgorithm] = useState<string | null>(null);\r\n  const [progress, setProgress] = useState(0);\r\n  const [results, setResults] = useState<BenchmarkResult[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [showDetailedResults, setShowDetailedResults] = useState(false);\r\n  const [sortBy, setSortBy] = useState<'algorithm' | 'performance'>('performance');\r\n  \r\n  // We'll import the crypto worker directly instead of using it from context\r\n  const benchmarkAlgorithm = useCallback(async (algorithm: string): Promise<BenchmarkResult> => {\r\n    try {\r\n      const start = performance.now();\r\n      const iterations = algorithm.startsWith('ES') ? 50 : 100; // Fewer iterations for slower EC algorithms\r\n      \r\n      // Import crypto worker directly\r\n      const cryptoWorker = await import('../workers/cryptoWorker');\r\n      const opsPerSecond = await cryptoWorker.bench(algorithm);\r\n      \r\n      const end = performance.now();\r\n      const totalTime = end - start;\r\n      \r\n      return {\r\n        algorithm,\r\n        operationsPerSecond: opsPerSecond,\r\n        averageTime: iterations > 0 ? totalTime / iterations : 0,\r\n        totalOperations: iterations,\r\n        color: getAlgorithmColor(algorithm)\r\n      };\r\n    } catch (e) {\r\n      console.error(`Error benchmarking ${algorithm}:`, e);\r\n      return {\r\n        algorithm,\r\n        operationsPerSecond: 0,\r\n        averageTime: 0,\r\n        totalOperations: 0,\r\n        color: getAlgorithmColor(algorithm)\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  // Run all benchmarks sequentially\r\n  const runBenchmarks = useCallback(async () => {\r\n    setIsRunning(true);\r\n    setResults([]);\r\n    setError(null);\r\n    setProgress(0);\r\n    \r\n    try {\r\n      const newResults: BenchmarkResult[] = [];\r\n      \r\n      for (let i = 0; i < ALGORITHMS.length; i++) {\r\n        const algorithm = ALGORITHMS[i];\r\n        setCurrentAlgorithm(algorithm);\r\n        \r\n        // Add delay to allow UI updates\r\n        await new Promise(resolve => setTimeout(resolve, 100));\r\n        \r\n        const result = await benchmarkAlgorithm(algorithm);\r\n        newResults.push(result);\r\n        \r\n        // Update progress\r\n        setProgress(((i + 1) / ALGORITHMS.length) * 100);\r\n      }\r\n      \r\n      // Sort results by operations per second (descending)\r\n      const sortedResults = [...newResults].sort((a, b) => b.operationsPerSecond - a.operationsPerSecond);\r\n      setResults(sortedResults);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'An error occurred during benchmarking');\r\n    } finally {\r\n      setCurrentAlgorithm(null);\r\n      setIsRunning(false);\r\n    }\r\n  }, [benchmarkAlgorithm]);\r\n\r\n  // Sort results when sort method changes\r\n  useEffect(() => {\r\n    if (results.length > 0) {\r\n      const sortedResults = [...results].sort((a, b) => {\r\n        if (sortBy === 'algorithm') {\r\n          return a.algorithm.localeCompare(b.algorithm);\r\n        } else {\r\n          return b.operationsPerSecond - a.operationsPerSecond;\r\n        }\r\n      });\r\n      setResults(sortedResults);\r\n    }\r\n  }, [sortBy]);\r\n\r\n  // Get the fastest algorithm from results\r\n  const getFastestAlgorithm = useCallback(() => {\r\n    if (results.length === 0) return null;\r\n    return results.reduce((fastest, current) => \r\n      current.operationsPerSecond > fastest.operationsPerSecond ? current : fastest\r\n    );\r\n  }, [results]);\r\n\r\n  // Group results by algorithm family\r\n  const getResultsByFamily = useCallback(() => {\r\n    const families: Record<string, BenchmarkResult[]> = {};\r\n    \r\n    results.forEach(result => {\r\n      const family = result.algorithm.substring(0, 2);\r\n      if (!families[family]) {\r\n        families[family] = [];\r\n      }\r\n      families[family].push(result);\r\n    });\r\n    \r\n    return families;\r\n  }, [results]);\r\n\r\n  // Render benchmark chart with scalable bars\r\n  const renderChart = useCallback(() => {\r\n    if (results.length === 0) return null;\r\n    \r\n    const maxOps = Math.max(...results.map(r => r.operationsPerSecond));\r\n    \r\n    return (\r\n      <div className=\"mt-4\">\r\n        {results.map((result, index) => {\r\n          const widthPercentage = (result.operationsPerSecond / maxOps) * 100;\r\n          const isFastest = result.operationsPerSecond === maxOps;\r\n          \r\n          return (\r\n            <div key={result.algorithm} className=\"mb-3\">\r\n              <div className=\"flex justify-between items-center mb-1\">\r\n                <div className=\"flex items-center\">\r\n                  <span className=\"font-medium w-16\">{result.algorithm}</span>\r\n                  {isFastest && <Badge color=\"success\" className=\"ml-2\">Fastest</Badge>}\r\n                </div>\r\n                <span className=\"text-sm\">{formatNumber(result.operationsPerSecond)} op/s</span>\r\n              </div>\r\n              <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded-md overflow-hidden\">\r\n                <div \r\n                  className={`h-full ${result.color} transition-all duration-1000 ease-out`}\r\n                  style={{ \r\n                    width: `${widthPercentage}%`,\r\n                    animationDelay: `${index * 0.1}s`,\r\n                    opacity: isRunning ? 0.7 : 1\r\n                  }}\r\n                ></div>\r\n              </div>\r\n              {showDetailedResults && (\r\n                <div className=\"text-xs text-gray-600 dark:text-gray-400 mt-1 flex justify-between\">\r\n                  <span>Avg: {formatNumber(result.averageTime)} ms/op</span>\r\n                  <span>Total: {result.totalOperations} operations</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }, [results, isRunning, showDetailedResults]);\r\n\r\n  // Render family group results\r\n  const renderFamilyGroups = useCallback(() => {\r\n    const families = getResultsByFamily();\r\n    \r\n    return (\r\n      <div className=\"mt-6 space-y-6\">\r\n        {Object.entries(families).map(([family, algResults]) => (\r\n          <div key={family} className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-md\">\r\n            <h4 className=\"font-medium mb-2\">{family} Family</h4>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\r\n              {algFamilyDescriptions[family] || 'JWT signature algorithm family'}\r\n            </p>\r\n            \r\n            <div className=\"space-y-3\">\r\n              {algResults.map(result => (\r\n                <div key={result.algorithm} className=\"flex justify-between items-center\">\r\n                  <span>{result.algorithm}</span>\r\n                  <div className=\"font-mono\">\r\n                    {formatNumber(result.operationsPerSecond)} op/s\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }, [getResultsByFamily]);\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\r\n      <div className=\"text-center mb-8\">\r\n        <h1 className=\"text-3xl font-bold mb-2\">JWT Algorithm Performance</h1>\r\n        <p className=\"text-gray-600 dark:text-gray-400\">\r\n          Benchmark JWT signing algorithms in your browser to determine the best performance.\r\n        </p>\r\n      </div>\r\n\r\n      <Card className=\"mb-6\">\r\n        <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\r\n          <h3 className=\"text-lg font-semibold\">Performance Benchmark</h3>\r\n        </div>\r\n        \r\n        <div className=\"p-4\">\r\n          <div className=\"bg-yellow-50 dark:bg-yellow-900/20 p-3 rounded-md border border-yellow-200 dark:border-yellow-800 mb-4\">\r\n            <p className=\"text-yellow-800 dark:text-yellow-200 text-sm flex items-center\">\r\n              <span className=\"mr-2\">⚡</span>\r\n              This tool tests JWT algorithm performance in your browser. Results may vary based on device capabilities and browser implementation.\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <Button\r\n              onClick={runBenchmarks}\r\n              variant=\"primary\"\r\n              disabled={isRunning}\r\n            >\r\n              {isRunning ? 'Benchmarking...' : 'Run Benchmark'}\r\n            </Button>\r\n            \r\n            {results.length > 0 && (\r\n              <div className=\"flex items-center\">\r\n                <label className=\"mr-2 text-sm\">Sort by:</label>\r\n                <select\r\n                  value={sortBy}\r\n                  onChange={(e) => setSortBy(e.target.value as 'algorithm' | 'performance')}\r\n                  className=\"border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-sm p-1\"\r\n                >\r\n                  <option value=\"performance\">Speed (fastest first)</option>\r\n                  <option value=\"algorithm\">Algorithm name</option>\r\n                </select>\r\n              </div>\r\n            )}\r\n          </div>\r\n          \r\n          {isRunning && currentAlgorithm && (\r\n            <div className=\"mb-4\">\r\n              <div className=\"flex justify-between items-center mb-1\">\r\n                <span className=\"text-sm\">Testing algorithm: <strong>{currentAlgorithm}</strong></span>\r\n                <span className=\"text-sm\">{Math.round(progress)}%</span>\r\n              </div>\r\n              <div className=\"h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\r\n                <div \r\n                  className=\"h-full bg-blue-500 transition-all duration-300 ease-out\"\r\n                  style={{ width: `${progress}%` }}\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {error && (\r\n            <Alert type=\"error\" className=\"mb-4\">{error}</Alert>\r\n          )}\r\n          \r\n          {results.length > 0 && (\r\n            <>\r\n              <div className=\"mb-2 flex justify-between items-center\">\r\n                <h4 className=\"font-medium\">Results</h4>\r\n                <div className=\"flex items-center\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id=\"show-details\"\r\n                    checked={showDetailedResults}\r\n                    onChange={() => setShowDetailedResults(!showDetailedResults)}\r\n                    className=\"mr-2\"\r\n                  />\r\n                  <label htmlFor=\"show-details\" className=\"text-sm\">Show detailed metrics</label>\r\n                </div>\r\n              </div>\r\n              \r\n              {renderChart()}\r\n              \r\n              {!isRunning && getFastestAlgorithm() && (\r\n                <div className=\"mt-6 p-4 bg-green-50 dark:bg-green-900/20 rounded-md border border-green-200 dark:border-green-800\">\r\n                  <div className=\"font-medium text-green-800 dark:text-green-300 mb-1\">\r\n                    Performance Summary\r\n                  </div>\r\n                  <p className=\"text-green-800 dark:text-green-200 text-sm\">\r\n                    <span className=\"font-medium\">{getFastestAlgorithm()?.algorithm}</span> is the fastest algorithm in your browser,\r\n                    performing {formatNumber(getFastestAlgorithm()?.operationsPerSecond || 0)} operations per second.\r\n                  </p>\r\n                </div>\r\n              )}\r\n              \r\n              <div className=\"mt-6 border-t border-gray-200 dark:border-gray-700 pt-4\">\r\n                <h4 className=\"font-medium mb-3\">Algorithm Family Comparison</h4>\r\n                {renderFamilyGroups()}\r\n              </div>\r\n              \r\n              <div className=\"mt-6 pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <div>\r\n                    <span className=\"text-sm font-medium\">System:</span>\r\n                    <span className=\"ml-2 text-sm\">{navigator.userAgent}</span>\r\n                  </div>\r\n                  <div>\r\n                    <Badge color=\"info\">\r\n                      {new Date().toLocaleString()}\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n          \r\n          {!isRunning && results.length === 0 && (\r\n            <div className=\"py-8 text-center text-gray-500 dark:text-gray-400\">\r\n              Click \"Run Benchmark\" to test JWT algorithm performance in your browser.\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Card>\r\n      \r\n      <Card>\r\n        <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\r\n          <h3 className=\"text-lg font-semibold\">About JWT Algorithms</h3>\r\n        </div>\r\n        <div className=\"p-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div>\r\n              <h4 className=\"font-medium mb-2\">Symmetric Algorithms (HS*)</h4>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\r\n                HMAC with SHA-2 algorithms use a shared secret key for both signing and verification.\r\n                They are typically faster but require secure key distribution.\r\n              </p>\r\n              <ul className=\"list-disc pl-5 text-sm space-y-1 text-gray-600 dark:text-gray-400\">\r\n                <li>HS256: HMAC using SHA-256</li>\r\n                <li>HS384: HMAC using SHA-384</li>\r\n                <li>HS512: HMAC using SHA-512</li>\r\n              </ul>\r\n            </div>\r\n            \r\n            <div>\r\n              <h4 className=\"font-medium mb-2\">Asymmetric Algorithms (RS*, ES*, PS*)</h4>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\r\n                Asymmetric algorithms use a private key for signing and a public key for verification.\r\n                They are typically slower but provide better security separation.\r\n              </p>\r\n              <ul className=\"list-disc pl-5 text-sm space-y-1 text-gray-600 dark:text-gray-400\">\r\n                <li>RS256: RSA Signature with SHA-256</li>\r\n                <li>ES256: ECDSA Signature with SHA-256</li>\r\n                <li>PS256: RSA-PSS Signature with SHA-256</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"mt-6 pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n            <h4 className=\"font-medium mb-2\">Choosing the Right Algorithm</h4>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\r\n              When selecting a JWT signing algorithm, consider these factors:\r\n            </p>\r\n            <ul className=\"list-disc pl-5 text-sm space-y-2 text-gray-600 dark:text-gray-400\">\r\n              <li>\r\n                <span className=\"font-medium\">Performance</span>: HMAC algorithms (HS*) are typically faster \r\n                than RSA (RS*/PS*) and ECDSA (ES*).\r\n              </li>\r\n              <li>\r\n                <span className=\"font-medium\">Security</span>: ES256 offers similar security to RS256 with \r\n                smaller signatures and better performance.\r\n              </li>\r\n              <li>\r\n                <span className=\"font-medium\">Key Management</span>: Asymmetric algorithms allow public key \r\n                distribution without exposing signing capabilities.\r\n              </li>\r\n              <li>\r\n                <span className=\"font-medium\">Standards Compliance</span>: Some standards require specific \r\n                algorithms (e.g., OIDC prefers RS256).\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { Route, Routes, Navigate } from 'react-router-dom';\r\nimport JwtDecoder from './JwtDecoder';\r\nimport { BuilderWizard } from './components/BuilderWizard';\r\nimport { InspectorPane } from './components/InspectorPane';\r\nimport { JwksProbe } from './components/JwksProbe';\r\nimport { BenchResult } from './components/BenchResult';\r\nimport { JwtProvider } from './context/JwtContext';\r\n\r\n/**\r\n * JWT Toolkit Routes Component\r\n * \r\n * Defines the routes for the JWT toolkit:\r\n * - /jwt (default) - The main decoder interface\r\n * - /jwt/build - JWT Builder for creating tokens\r\n * - /jwt/inspect - Detailed token inspection and verification\r\n * - /jwt/jwks - JWKS analysis tool\r\n * - /jwt/benchmark - Performance benchmarking for algorithms\r\n */\r\nexport const JwtRoutes: React.FC = () => (\r\n  <JwtProvider>\r\n    <Routes>\r\n      <Route path=\"/\" element={<JwtDecoder />} />\r\n      <Route path=\"/build\" element={<BuilderWizard />} />\r\n      <Route path=\"/inspect\" element={<InspectorPane />} />\r\n      <Route path=\"/jwks\" element={<JwksProbe />} />\r\n      <Route path=\"/benchmark\" element={<BenchResult />} />\r\n      {/* Redirect any other routes to the main JWT decoder */}\r\n      <Route path=\"*\" element={<Navigate to=\"/jwt\" replace />} />\r\n    </Routes>\r\n  </JwtProvider>\r\n);\r\n\r\nexport default JwtRoutes;","import React, { lazy } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport Card from '../../design-system/components/layout/Card';\r\nimport { TabGroup, Tab } from '../../design-system/components/navigation/TabGroup';\r\nimport ToolLayout from '../../design-system/components/layout/ToolLayout';\r\nimport JwtRoutes from './routes';\r\nimport { Tool, ToolCategory } from '../../tools';\r\n\r\n// Create a mock tool object to provide to ToolLayout\r\nconst jwtTool: Tool = {\r\n  id: 'jwt',\r\n  title: 'JWT Toolkit',\r\n  description: 'Comprehensive tool suite for JSON Web Tokens',\r\n  route: '/jwt',\r\n  icon: () => <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\"><path d=\"M12 0L1.604 6v12L12 24l10.396-6V6L12 0zm-1 20.5v-17l9 5.2v6.6l-9 5.2z\"/></svg>,\r\n  component: lazy(() => Promise.resolve({ default: () => <></> })),\r\n  category: 'Security' as ToolCategory,\r\n  metadata: {\r\n    keywords: ['jwt', 'token', 'authentication', 'json web token'],\r\n  },\r\n  uiOptions: {\r\n    fullWidth: true\r\n  }\r\n};\r\n\r\nconst JwtToolkit: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const path = location.pathname.split('/jwt')[1] || '/';\r\n\r\n  const tabItems = [\r\n    { id: '/', label: 'Decoder', title: 'Decode & Verify JWT Tokens' },\r\n    { id: '/inspect', label: 'Inspector', title: 'Deep Inspection & Security Analysis' },\r\n    { id: '/build', label: 'Builder', title: 'Create & Sign JWT Tokens' },\r\n    { id: '/jwks', label: 'JWKS', title: 'JWKS Tool & Public Key Discovery' },\r\n    { id: '/benchmark', label: 'Performance', title: 'Algorithm Performance Benchmarks' },\r\n  ];\r\n\r\n  const handleTabChange = (tabId: string) => {\r\n    navigate(`/jwt${tabId}`);\r\n  };\r\n  \r\n  // SEO metadata\r\n  const pageTitle = \"JWT Toolkit | MyDebugger\";\r\n  const pageDescription = \"Complete JWT toolkit for developers: decode, create, inspect, verify and benchmark JSON Web Tokens with our comprehensive suite of JWT tools.\";\r\n  \r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{pageTitle}</title>\r\n        <meta name=\"description\" content={pageDescription} />\r\n        <meta property=\"og:title\" content={pageTitle} />\r\n        <meta property=\"og:description\" content={pageDescription} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:url\" content=\"https://mydebugger.vercel.app/jwt\" />\r\n        <meta name=\"twitter:card\" content=\"summary\" />\r\n        <meta name=\"twitter:title\" content={pageTitle} />\r\n        <meta name=\"twitter:description\" content={pageDescription} />\r\n        <link rel=\"canonical\" href=\"https://mydebugger.vercel.app/jwt\" />\r\n      </Helmet>\r\n      \r\n      <ToolLayout tool={jwtTool}>\r\n        <Card className=\"p-0 overflow-visible\">\r\n          <div className=\"border-b border-gray-200 dark:border-gray-700\">\r\n            <TabGroup \r\n              activeTab={path}\r\n              onChange={handleTabChange}\r\n            >\r\n              {tabItems.map(tab => (\r\n                <Tab \r\n                  key={tab.id}\r\n                  id={tab.id}\r\n                  isActive={path === tab.id}\r\n                >\r\n                  {tab.label}\r\n                </Tab>\r\n              ))}\r\n            </TabGroup>\r\n          </div>\r\n          \r\n          <div className=\"p-5\">\r\n            <JwtRoutes />\r\n          </div>\r\n        </Card>\r\n      </ToolLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JwtToolkit;"],"file":"assets/JwtToolkit-0fe0f27f.js"}