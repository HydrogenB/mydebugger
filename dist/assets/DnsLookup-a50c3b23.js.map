{"version":3,"file":"DnsLookup-a50c3b23.js","sources":["../../src/tools/dns/DnsLookup.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { getToolByRoute } from '../index';\r\nimport { ToolLayout } from '../../design-system/components/layout';\r\nimport { Card } from '../../design-system/components/layout';\r\nimport { Button } from '../../design-system/components/inputs';\r\nimport { LoadingSpinner } from '../../design-system/components/feedback';\r\n\r\ninterface DnsRecord {\r\n  type: string;\r\n  name: string;\r\n  value: string;\r\n  ttl: number;\r\n}\r\n\r\ninterface DnsResult {\r\n  domain: string;\r\n  records: DnsRecord[];\r\n}\r\n\r\nconst DnsLookup: React.FC = () => {\r\n  const tool = getToolByRoute('/dns-check');\r\n  const [domain, setDomain] = useState<string>('');\r\n  const [dnsResults, setDnsResults] = useState<DnsResult | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedRecordType, setSelectedRecordType] = useState<string>('ALL');\r\n  \r\n  // DNS record types\r\n  const recordTypes = ['ALL', 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'];\r\n  \r\n  // API endpoint URL - replace with your actual deployed API URL\r\n  const API_URL = '/api/dns-lookup';\r\n  \r\n  const handleLookup = async () => {\r\n    if (!domain) {\r\n      setError('Please enter a domain name');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    setDnsResults(null);\r\n\r\n    try {\r\n      // Format domain (remove protocol if present)\r\n      let formattedDomain = domain.replace(/^(https?:\\/\\/)?(www\\.)?/, '');\r\n      \r\n      // Remove path and query parameters if present\r\n      formattedDomain = formattedDomain.split('/')[0];\r\n      \r\n      // Call the real DNS API\r\n      const response = await fetchDnsRecords(formattedDomain);\r\n      \r\n      if (response.error) {\r\n        throw new Error(response.error);\r\n      }\r\n      \r\n      setDnsResults(response);\r\n      \r\n    } catch (err) {\r\n      setError(`Error performing DNS lookup: ${err instanceof Error ? err.message : 'Unknown error'}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchDnsRecords = async (domain: string): Promise<any> => {\r\n    try {\r\n      const url = new URL(API_URL, window.location.origin);\r\n      url.searchParams.append('domain', domain);\r\n      url.searchParams.append('recordType', selectedRecordType);\r\n      \r\n      const response = await fetch(url.toString());\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch DNS records');\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('DNS Lookup Error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      handleLookup();\r\n    }\r\n  };\r\n  \r\n  // Function to handle record type change\r\n  const handleRecordTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setSelectedRecordType(e.target.value);\r\n    \r\n    // If results already exist, refresh with new record type\r\n    if (dnsResults) {\r\n      handleLookup();\r\n    }\r\n  };\r\n\r\n  // Filter records based on selected type\r\n  const filteredRecords = dnsResults?.records.filter(\r\n    record => selectedRecordType === 'ALL' || record.type === selectedRecordType\r\n  ) || [];\r\n\r\n  // SEO metadata\r\n  const pageTitle = \"DNS Lookup Tool | MyDebugger\";\r\n  const pageDescription = \"Query DNS records for any domain name.\";\r\n  \r\n  return (\r\n    <ToolLayout tool={tool!}>\r\n      <Helmet>\r\n        <title>{pageTitle}</title>\r\n        <meta name=\"description\" content={pageDescription} />\r\n        <meta property=\"og:title\" content={pageTitle} />\r\n        <meta property=\"og:description\" content={pageDescription} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:url\" content=\"https://mydebugger.vercel.app/dns-check\" />\r\n        <meta name=\"twitter:card\" content=\"summary\" />\r\n        <meta name=\"twitter:title\" content={pageTitle} />\r\n        <meta name=\"twitter:description\" content={pageDescription} />\r\n        <link rel=\"canonical\" href=\"https://mydebugger.vercel.app/dns-check\" />\r\n      </Helmet>\r\n      \r\n      <div className=\"space-y-6\">\r\n        <Card isElevated>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label htmlFor=\"domain-input\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                Enter domain name\r\n              </label>\r\n              <div className=\"flex\">\r\n                <input\r\n                  id=\"domain-input\"\r\n                  type=\"text\"\r\n                  className=\"flex-grow rounded-l-md border-gray-300 dark:border-gray-700 dark:bg-gray-800 dark:text-white shadow-sm focus:border-primary-500 focus:ring focus:ring-primary-200 dark:focus:ring-primary-900 focus:ring-opacity-50\"\r\n                  placeholder=\"example.com\"\r\n                  value={domain}\r\n                  onChange={(e) => setDomain(e.target.value)}\r\n                  onKeyPress={handleKeyPress}\r\n                  disabled={loading}\r\n                />\r\n                <Button\r\n                  onClick={handleLookup}\r\n                  isLoading={loading}\r\n                  disabled={loading || !domain}\r\n                  className=\"rounded-l-none\"\r\n                >\r\n                  Lookup\r\n                </Button>\r\n              </div>\r\n              <p className=\"mt-2 text-sm text-gray-500 dark:text-gray-400\">\r\n                Enter a domain name to query its DNS records (e.g., example.com, google.com)\r\n              </p>\r\n            </div>\r\n\r\n            {error && (\r\n              <div className=\"p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md text-red-700 dark:text-red-400 text-sm\">\r\n                {error}\r\n              </div>\r\n            )}\r\n\r\n            {loading && (\r\n              <div className=\"flex justify-center py-12\">\r\n                <LoadingSpinner />\r\n              </div>\r\n            )}\r\n\r\n            {dnsResults && !loading && (\r\n              <div className=\"animate-fade-in space-y-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <h2 className=\"text-xl font-medium text-gray-900 dark:text-white\">\r\n                    DNS Records for <span className=\"text-primary-600 dark:text-primary-400\">{dnsResults.domain}</span>\r\n                  </h2>\r\n                  <div>\r\n                    <label htmlFor=\"record-type\" className=\"sr-only\">Record Type</label>\r\n                    <select\r\n                      id=\"record-type\"\r\n                      value={selectedRecordType}\r\n                      onChange={handleRecordTypeChange}\r\n                      className=\"rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-800 dark:text-white shadow-sm focus:border-primary-500 focus:ring focus:ring-primary-200 dark:focus:ring-primary-900 focus:ring-opacity-50 text-sm\"\r\n                    >\r\n                      {recordTypes.map(type => (\r\n                        <option key={type} value={type}>{type}</option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n\r\n                {filteredRecords.length === 0 ? (\r\n                  <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\r\n                    No {selectedRecordType} records found for {dnsResults.domain}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"bg-gray-50 dark:bg-gray-900 rounded-md overflow-hidden\">\r\n                    <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n                      <thead className=\"bg-gray-100 dark:bg-gray-800\">\r\n                        <tr>\r\n                          <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                            Type\r\n                          </th>\r\n                          <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                            Name\r\n                          </th>\r\n                          <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                            Value\r\n                          </th>\r\n                          <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                            TTL\r\n                          </th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n                        {filteredRecords.map((record, index) => (\r\n                          <tr key={index} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                            <td className=\"px-4 py-3 text-sm font-medium text-gray-900 dark:text-gray-100\">\r\n                              <span className=\"px-2 py-1 text-xs font-medium rounded bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200\">\r\n                                {record.type}\r\n                              </span>\r\n                            </td>\r\n                            <td className=\"px-4 py-3 text-sm text-gray-700 dark:text-gray-300 font-mono\">\r\n                              {record.name}\r\n                            </td>\r\n                            <td className=\"px-4 py-3 text-sm text-gray-700 dark:text-gray-300 font-mono break-all\">\r\n                              {record.value}\r\n                            </td>\r\n                            <td className=\"px-4 py-3 text-sm text-gray-700 dark:text-gray-300\">\r\n                              {record.ttl > 0 ? `${record.ttl}s` : '-'}\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Card>\r\n\r\n        <Card title=\"DNS Record Types\" isElevated>\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n            <div className=\"border border-gray-200 dark:border-gray-700 rounded-md p-3\">\r\n              <h3 className=\"font-medium text-gray-900 dark:text-white mb-1\">A (Address) Record</h3>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Maps a domain name to an IPv4 address.</p>\r\n            </div>\r\n            <div className=\"border border-gray-200 dark:border-gray-700 rounded-md p-3\">\r\n              <h3 className=\"font-medium text-gray-900 dark:text-white mb-1\">AAAA Record</h3>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Maps a domain name to an IPv6 address.</p>\r\n            </div>\r\n            <div className=\"border border-gray-200 dark:border-gray-700 rounded-md p-3\">\r\n              <h3 className=\"font-medium text-gray-900 dark:text-white mb-1\">CNAME Record</h3>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Canonical name record that maps an alias to another domain name.</p>\r\n            </div>\r\n            <div className=\"border border-gray-200 dark:border-gray-700 rounded-md p-3\">\r\n              <h3 className=\"font-medium text-gray-900 dark:text-white mb-1\">MX Record</h3>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Mail exchange record that specifies mail servers for a domain.</p>\r\n            </div>\r\n            <div className=\"border border-gray-200 dark:border-gray-700 rounded-md p-3\">\r\n              <h3 className=\"font-medium text-gray-900 dark:text-white mb-1\">NS Record</h3>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Name server records that delegate a domain to DNS servers.</p>\r\n            </div>\r\n            <div className=\"border border-gray-200 dark:border-gray-700 rounded-md p-3\">\r\n              <h3 className=\"font-medium text-gray-900 dark:text-white mb-1\">TXT Record</h3>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Text records that store text data, often used for verification.</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n    </ToolLayout>\r\n  );\r\n};\r\n\r\nexport default DnsLookup;"],"names":["DnsLookup","tool","getToolByRoute","domain","setDomain","useState","dnsResults","setDnsResults","loading","setLoading","error","setError","selectedRecordType","setSelectedRecordType","recordTypes","API_URL","handleLookup","formattedDomain","response","fetchDnsRecords","err","url","errorData","handleKeyPress","e","handleRecordTypeChange","filteredRecords","record","pageTitle","pageDescription","jsxs","ToolLayout","Helmet","jsx","Card","Button","LoadingSpinner","type","index"],"mappings":"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"}