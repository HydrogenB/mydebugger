{"version":3,"file":"TabGroup-d322985a.js","sources":["../../src/design-system/components/navigation/TabGroup.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect, createContext, useContext } from 'react';\r\n\r\n// Types\r\ntype TabVariant = 'underlined' | 'pills' | 'boxed' | 'buttons';\r\ntype TabSize = 'sm' | 'md' | 'lg';\r\ntype TabAlignment = 'left' | 'center' | 'right' | 'fullWidth';\r\n\r\n// Context type\r\ntype TabContextType = {\r\n  activeTab: string;\r\n  setActiveTab: (id: string) => void;\r\n  variant: TabVariant;\r\n  size: TabSize;\r\n  alignment: TabAlignment;\r\n};\r\n\r\n// Create tab context\r\nconst TabContext = createContext<TabContextType | undefined>(undefined);\r\n\r\n// Properties\r\nexport interface TabGroupProps {\r\n  /** ID for the tab group */\r\n  id?: string;\r\n  /** Default active tab */\r\n  defaultTab?: string;\r\n  /** Tab variant style */\r\n  variant?: TabVariant;\r\n  /** Size of the tabs */\r\n  size?: TabSize;\r\n  /** Tab alignment */\r\n  alignment?: TabAlignment;\r\n  /** Whether to animate indicator */\r\n  animateIndicator?: boolean;\r\n  /** Custom class for the tab list */\r\n  className?: string;\r\n  /** Children tabs & panels */\r\n  children: React.ReactNode;\r\n  /** Allow manual control of active tab */\r\n  activeTab?: string;\r\n  /** Callback when tab changes */\r\n  onChange?: (id: string) => void;\r\n}\r\n\r\nexport interface TabItemProps {\r\n  /** Unique ID for the tab */\r\n  id: string;\r\n  /** Tab label */\r\n  label?: React.ReactNode;\r\n  /** Icon to show before label */\r\n  icon?: React.ReactNode;\r\n  /** Badge content */\r\n  badge?: React.ReactNode;\r\n  /** Whether tab is disabled */\r\n  disabled?: boolean;\r\n  /** Custom classes */\r\n  className?: string;\r\n  /** Children content (alternative to label) */\r\n  children?: React.ReactNode;\r\n  /** Whether the tab is active */\r\n  isActive?: boolean;\r\n  /** Callback when tab is clicked */\r\n  onClick?: () => void;\r\n}\r\n\r\nexport interface TabPanelProps {\r\n  /** ID matching the tab */\r\n  id: string;\r\n  /** Panel content */\r\n  children: React.ReactNode;\r\n  /** Whether to keep unmounted tabs in DOM */\r\n  keepMounted?: boolean;\r\n  /** When true, this panel is active */\r\n  active?: boolean;\r\n  /** Alias for active prop */\r\n  isActive?: boolean;\r\n}\r\n\r\n/**\r\n * TabGroup - A component that organizes content into multiple selectable tabs\r\n * \r\n * @description\r\n * TabGroup organizes content into multiple tabs, showing one panel at a time.\r\n * This component improves UI organization for complex interfaces by separating\r\n * content into logical sections that users can switch between. TabGroup supports\r\n * different visual styles, sizes, and alignments to match design requirements.\r\n * \r\n * TabGroup consists of Tab components for navigation and TabPanel components for content,\r\n * and can be controlled (external state) or uncontrolled (internal state).\r\n * \r\n * @accessibility\r\n * - Implements ARIA roles (tablist, tab, tabpanel) for proper screen reader navigation\r\n * - Manages keyboard focus and tabIndex for keyboard navigation\r\n * - Includes proper ARIA relationships between tabs and panels\r\n * - Provides visible active states with appropriate color contrast\r\n * - Supports disabled tabs with proper styling and ARIA attributes\r\n * - Includes smooth animations with reduced motion support\r\n * \r\n * @example\r\n * ```tsx\r\n * // Basic tab group\r\n * <TabGroup>\r\n *   <Tab id=\"tab1\" label=\"Details\" />\r\n *   <Tab id=\"tab2\" label=\"Settings\" />\r\n *   <Tab id=\"tab3\" label=\"History\" disabled />\r\n *   \r\n *   <TabPanel id=\"tab1\">\r\n *     <p>Details content goes here</p>\r\n *   </TabPanel>\r\n *   <TabPanel id=\"tab2\">\r\n *     <p>Settings content goes here</p>\r\n *   </TabPanel>\r\n *   <TabPanel id=\"tab3\">\r\n *     <p>History content goes here</p>\r\n *   </TabPanel>\r\n * </TabGroup>\r\n * \r\n * // Custom styled tab group\r\n * <TabGroup \r\n *   variant=\"pills\" \r\n *   size=\"lg\"\r\n *   alignment=\"center\"\r\n *   defaultTab=\"settings\"\r\n * >\r\n *   <Tab id=\"account\" label=\"Account\" icon={<UserIcon />} />\r\n *   <Tab id=\"settings\" label=\"Settings\" icon={<GearIcon />} />\r\n *   <TabPanel id=\"account\">{accountContent}</TabPanel>\r\n *   <TabPanel id=\"settings\">{settingsContent}</TabPanel>\r\n * </TabGroup>\r\n * \r\n * // Controlled tab group\r\n * const [activeTab, setActiveTab] = useState(\"tab1\");\r\n * \r\n * <TabGroup \r\n *   activeTab={activeTab} \r\n *   onChange={setActiveTab}\r\n * >\r\n *   {tabs.map(tab => (\r\n *     <Tab key={tab.id} id={tab.id} label={tab.label} />\r\n *   ))}\r\n *   \r\n *   {tabs.map(tab => (\r\n *     <TabPanel key={tab.id} id={tab.id}>\r\n *       {tab.content}\r\n *     </TabPanel>\r\n *   ))}\r\n * </TabGroup>\r\n * ```\r\n */\r\nexport const TabGroup: React.FC<TabGroupProps> = ({\r\n  id = 'tab-group',\r\n  defaultTab,\r\n  variant = 'underlined',\r\n  size = 'md',\r\n  alignment = 'left',\r\n  animateIndicator = true,\r\n  className = '',\r\n  children,\r\n  activeTab: controlledActiveTab,\r\n  onChange,\r\n}) => {\r\n  // Find the ID of the first non-disabled tab for the default tab\r\n  const getFirstEnabledTabId = (): string | undefined => {\r\n    let firstTabId: string | undefined;\r\n  \r\n    React.Children.forEach(children, (child) => {\r\n      if (React.isValidElement(child) && child.type === Tab && !child.props.disabled && !firstTabId) {\r\n        firstTabId = child.props.id;\r\n      }\r\n    });\r\n  \r\n    return firstTabId;\r\n  };\r\n\r\n  // Initialize active tab state\r\n  const [internalActiveTab, setInternalActiveTab] = useState<string>(() => {\r\n    // If there's a controlled value or default, use it, otherwise find first enabled tab\r\n    return controlledActiveTab || defaultTab || getFirstEnabledTabId() || '';\r\n  });\r\n  \r\n  // Get actual active tab (controlled or internal)\r\n  const activeTab = controlledActiveTab !== undefined ? controlledActiveTab : internalActiveTab;\r\n  \r\n  // Handle active tab change\r\n  const handleTabChange = (tabId: string) => {\r\n    if (controlledActiveTab === undefined) {\r\n      setInternalActiveTab(tabId);\r\n    }\r\n    \r\n    if (onChange) {\r\n      onChange(tabId);\r\n    }\r\n  };\r\n  \r\n  // Update internal state when controlled value changes\r\n  useEffect(() => {\r\n    if (controlledActiveTab !== undefined) {\r\n      setInternalActiveTab(controlledActiveTab);\r\n    }\r\n  }, [controlledActiveTab]);\r\n\r\n  // Prepare context value\r\n  const contextValue: TabContextType = {\r\n    activeTab,\r\n    setActiveTab: handleTabChange,\r\n    variant,\r\n    size,\r\n    alignment\r\n  };\r\n\r\n  // Filter and organize children into tabs and panels\r\n  const tabs: React.ReactElement[] = [];\r\n  const panels: React.ReactElement[] = [];\r\n  \r\n  React.Children.forEach(children, (child) => {\r\n    if (!React.isValidElement(child)) return;\r\n    \r\n    if (child.type === Tab) {\r\n      tabs.push(child);\r\n    } else if (child.type === TabPanel) {\r\n      panels.push(child);\r\n    }\r\n  });\r\n\r\n  // Tab list classes based on variant and alignment\r\n  const getTabListClasses = () => {\r\n    const classes = [\r\n      'flex relative',\r\n      className,\r\n    ];\r\n    \r\n    // Alignment classes\r\n    switch (alignment) {\r\n      case 'center':\r\n        classes.push('justify-center');\r\n        break;\r\n      case 'right':\r\n        classes.push('justify-end');\r\n        break;\r\n      case 'fullWidth':\r\n        classes.push('w-full');\r\n        break;\r\n      default: // left\r\n        classes.push('justify-start');\r\n    }\r\n    \r\n    // Variant-specific classes\r\n    switch (variant) {\r\n      case 'pills':\r\n        classes.push('gap-2 p-1');\r\n        break;\r\n      case 'boxed':\r\n        classes.push('rounded-md border border-gray-200 dark:border-gray-700 gap-0 p-0');\r\n        break;\r\n      case 'buttons':\r\n        classes.push('gap-1 p-0');\r\n        break;\r\n      default: // underlined\r\n        classes.push('border-b border-gray-200 dark:border-gray-700 gap-4');\r\n    }\r\n    \r\n    return classes.filter(Boolean).join(' ');\r\n  };\r\n\r\n  return (\r\n    <TabContext.Provider value={contextValue}>\r\n      <div id={id} className=\"w-full\">\r\n        {/* Tab list */}\r\n        <div\r\n          role=\"tablist\"\r\n          aria-label={id}\r\n          className={getTabListClasses()}\r\n        >\r\n          {tabs}\r\n        </div>\r\n        \r\n        {/* Tab panels */}\r\n        <div className=\"mt-4\">\r\n          {panels}\r\n        </div>\r\n      </div>\r\n    </TabContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * Tab - Individual selectable tab button within a TabGroup\r\n * \r\n * @description\r\n * Tab represents a single selectable option within a TabGroup.\r\n * When selected, it displays its corresponding TabPanel content.\r\n * \r\n * Tabs can include text labels, icons, and status badges, and can be\r\n * enabled or disabled based on application needs.\r\n * \r\n * @example\r\n * ```tsx\r\n * // Basic tab\r\n * <Tab id=\"profile\" label=\"User Profile\" />\r\n * \r\n * // Tab with icon and badge\r\n * <Tab \r\n *   id=\"notifications\" \r\n *   label=\"Notifications\" \r\n *   icon={<BellIcon />} \r\n *   badge={<Badge>3</Badge>}\r\n * />\r\n * \r\n * // Disabled tab\r\n * <Tab id=\"admin\" label=\"Admin Settings\" disabled />\r\n * ```\r\n */\r\nexport const Tab: React.FC<TabItemProps> = ({\r\n  id,\r\n  label,\r\n  icon,\r\n  badge,\r\n  disabled = false,\r\n  className = '',\r\n  children,\r\n  isActive: propIsActive,\r\n  onClick,\r\n}) => {\r\n  // Get tab context\r\n  const context = useContext(TabContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('Tab must be used within a TabGroup');\r\n  }\r\n  \r\n  const { activeTab, setActiveTab, variant, size, alignment } = context;\r\n  // Use prop-defined isActive if provided, otherwise use context\r\n  const isActive = propIsActive !== undefined ? propIsActive : activeTab === id;\r\n  const buttonRef = useRef<HTMLButtonElement>(null);\r\n  \r\n  const handleClick = () => {\r\n    if (!disabled) {\r\n      if (onClick) {\r\n        onClick();\r\n      } else {\r\n        setActiveTab(id);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Size classes\r\n  const sizeClasses = {\r\n    sm: 'text-sm py-1 px-2',\r\n    md: 'text-base py-2 px-3',\r\n    lg: 'text-lg py-2 px-4',\r\n  };\r\n  \r\n  // Get classes based on variant\r\n  const getTabClasses = () => {\r\n    const classes = [\r\n      'focus:outline-none transition-all duration-200 motion-reduce:transition-none font-medium',\r\n      sizeClasses[size],\r\n      disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer',\r\n      className,\r\n    ];\r\n    \r\n    if (alignment === 'fullWidth') {\r\n      classes.push('flex-1 text-center');\r\n    }\r\n    \r\n    switch (variant) {\r\n      case 'pills':\r\n        classes.push(\r\n          'rounded-md transform transition-transform duration-150 motion-reduce:transform-none',\r\n          isActive\r\n            ? 'bg-primary-600 text-white dark:bg-primary-500 shadow-sm scale-105'\r\n            : 'text-gray-600 hover:text-gray-800 dark:text-gray-300 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-700 active:scale-95'\r\n        );\r\n        break;\r\n        \r\n      case 'boxed':\r\n        classes.push(\r\n          'transition-colors duration-200 motion-reduce:transition-none',\r\n          isActive\r\n            ? 'bg-white dark:bg-gray-800 border-b-2 border-primary-500 dark:border-primary-400'\r\n            : 'bg-gray-50 dark:bg-gray-900 hover:bg-gray-100 dark:hover:bg-gray-750'\r\n        );\r\n        \r\n        if (alignment === 'fullWidth') {\r\n          classes.push(\r\n            'first:rounded-tl-md last:rounded-tr-md border-r border-gray-200 dark:border-gray-700 last:border-r-0'\r\n          );\r\n        }\r\n        break;\r\n        \r\n      case 'buttons':\r\n        classes.push(\r\n          'border rounded-md transform transition-transform duration-150 motion-reduce:transform-none',\r\n          isActive\r\n            ? 'bg-primary-50 dark:bg-primary-900/20 border-primary-500 dark:border-primary-500 text-primary-700 dark:text-primary-300 shadow-sm'\r\n            : 'border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:border-gray-400 dark:hover:border-gray-500 active:scale-95'\r\n        );\r\n        break;\r\n        \r\n      default: // underlined\r\n        classes.push(\r\n          'pb-2 border-b-2 transition-all duration-200 motion-reduce:transition-none',\r\n          isActive\r\n            ? 'border-primary-500 dark:border-primary-400 text-primary-600 dark:text-primary-400'\r\n            : 'border-transparent text-gray-600 dark:text-gray-300 hover:text-gray-800 hover:border-gray-300 dark:hover:text-gray-100 dark:hover:border-gray-600'\r\n        );\r\n    }\r\n    \r\n    return classes.filter(Boolean).join(' ');\r\n  };\r\n  \r\n  // Use children if provided, otherwise use label\r\n  const displayContent = children || label;\r\n  \r\n  return (\r\n    <button\r\n      ref={buttonRef}\r\n      id={`tab-${id}`}\r\n      role=\"tab\"\r\n      aria-selected={isActive}\r\n      aria-controls={`tabpanel-${id}`}\r\n      tabIndex={isActive ? 0 : -1}\r\n      className={getTabClasses()}\r\n      onClick={handleClick}\r\n      disabled={disabled}\r\n    >\r\n      <div className=\"flex items-center\">\r\n        {icon && <span className=\"mr-2 transition-transform duration-200 group-hover:translate-y-0.5 motion-reduce:transform-none\">{icon}</span>}\r\n        {displayContent}\r\n        {badge && (\r\n          <span className=\"ml-2 transition-transform duration-200 motion-reduce:transform-none\">{badge}</span>\r\n        )}\r\n      </div>\r\n    </button>\r\n  );\r\n};\r\n\r\n/**\r\n * TabPanel - Content container that corresponds to a Tab\r\n * \r\n * @description\r\n * TabPanel contains the content associated with a specific Tab.\r\n * It's shown when its corresponding tab is active and hidden otherwise.\r\n * \r\n * TabPanels can optionally be kept mounted in the DOM even when hidden,\r\n * which preserves state but may impact performance.\r\n * \r\n * @example\r\n * ```tsx\r\n * <TabPanel id=\"profile\">\r\n *   <UserProfileForm />\r\n * </TabPanel>\r\n * \r\n * <TabPanel id=\"settings\" keepMounted>\r\n *   <SettingsForm />\r\n * </TabPanel>\r\n * ```\r\n */\r\nexport const TabPanel: React.FC<TabPanelProps> = ({\r\n  id,\r\n  children,\r\n  keepMounted = false,\r\n  active = false,\r\n  isActive: propIsActive,\r\n}) => {\r\n  // Get tab context\r\n  const context = useContext(TabContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('TabPanel must be used within a TabGroup');\r\n  }\r\n  \r\n  const { activeTab } = context;\r\n  // Use propIsActive or active prop if provided, otherwise use context\r\n  const isActive = propIsActive !== undefined ? propIsActive : (active || activeTab === id);\r\n  \r\n  if (!keepMounted && !isActive) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      id={`tabpanel-${id}`}\r\n      role=\"tabpanel\"\r\n      aria-labelledby={`tab-${id}`}\r\n      className={isActive ? 'animate-fadeIn motion-reduce:animate-none' : 'hidden'}\r\n      tabIndex={0}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};"],"names":["TabContext","createContext","TabGroup","id","defaultTab","variant","size","alignment","animateIndicator","className","children","controlledActiveTab","onChange","getFirstEnabledTabId","firstTabId","React","child","Tab","internalActiveTab","setInternalActiveTab","useState","activeTab","handleTabChange","tabId","useEffect","contextValue","tabs","panels","TabPanel","getTabListClasses","classes","jsx","jsxs","label","icon","badge","disabled","propIsActive","onClick","context","useContext","setActiveTab","isActive","buttonRef","useRef","handleClick","sizeClasses","getTabClasses","displayContent","keepMounted","active"],"mappings":"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"}