/**
 * © 2025 MyDebugger Contributors – MIT License
 */
import React from 'react';
import { Badge } from '../../../design-system/components/display/Badge';
import { Button } from '../../../design-system/components/inputs/Button';
import { Card } from '../../../design-system/components/layout/Card';
import { Collapsible } from '../../../design-system/components/layout/Collapsible';
import { TextInput } from '../../../design-system/components/inputs/TextInput';
import { SelectInput } from '../../../design-system/components/inputs/SelectInput';
import { InfoBox } from '../../../design-system/components/display/InfoBox';
import { TabGroup } from '../../../design-system/components/navigation/TabGroup';
import { PentestResult } from '../../../design-system/components/display/PentestResult';
const PreviewIframe = (props: any) => null;
import { ValidationStatus } from '../lib/pentest';

interface WindowState {
  id: string;
  title: string;
  url: string;
  status: 'loading' | 'loaded' | 'error' | 'blocked';
  dimensions: { width: number; height: number };
  isResizable: boolean;
  isMinimized: boolean;
  lastActivity: number;
  errorDetails?: string;
}

interface PayloadTest {
  name: string;
  payload: string;
  category: 'xss' | 'sqli' | 'command' | 'path' | 'header';
  riskLevel: 'low' | 'medium' | 'high';
  description: string;
}

interface Props {
  url: string;
  setUrl: (v: string) => void;
  results: {
    https?: { status: ValidationStatus; details?: string };
    cors?: { status: ValidationStatus; details?: string };
    openRedirect?: { status: ValidationStatus; details?: string };
    xss?: { status: ValidationStatus; details?: string };
    clickjacking?: ValidationStatus;
  };
  redirectUrl: string;
  xssUrl: string;
  httpUrl: string;
  redirectParam: string;
  setRedirectParam: (v: string) => void;
  xssPayload: string;
  setXssPayload: (v: string) => void;
  history: string[];
  runTests: () => void;
  runId: number;
  setClickjacking: (s: ValidationStatus) => void;
  loading: boolean;
  // Enhanced interactive features
  windows: WindowState[];
  payloadTests: PayloadTest[];
  isAdvancedMode: boolean;
  setIsAdvancedMode: (v: boolean) => void;
  autoResize: boolean;
  setAutoResize: (v: boolean) => void;
  realPayloadMode: boolean;
  setRealPayloadMode: (v: boolean) => void;
  edgeCaseResults: Record<string, unknown>;
  activeWindow: string | null;
  setActiveWindow: (id: string | null) => void;
  createWindow: (id: string, title: string, url: string) => void;
  updateWindowStatus: (id: string, status: WindowState['status'], errorDetails?: string) => void;
  resizeWindow: (id: string, dimensions: { width: number; height: number }) => void;
  minimizeWindow: (id: string) => void;
  closeWindow: (id: string) => void;
  runEdgeCaseTests: (url: string) => Promise<Record<string, unknown>>;
  runPayloadTest: (payload: PayloadTest, url: string) => Promise<unknown>;
}

export function PentestSuiteView(props: Props) {
  const {
    url, setUrl, results, redirectUrl, xssUrl, httpUrl, redirectParam, setRedirectParam,
    xssPayload, setXssPayload, history, runTests, setClickjacking, loading,
    payloadTests, isAdvancedMode, setIsAdvancedMode, autoResize, setAutoResize,
    realPayloadMode, setRealPayloadMode, edgeCaseResults, runPayloadTest
  } = props;

  const handleLoad = () => {
    setClickjacking('failed'); // If iframe loads, site is vulnerable to clickjacking
  };

  const handleError = () => {
    setClickjacking('passed'); // If iframe fails to load, site is protected
  };

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-6">
      {/* Enhanced Control Panel */}
      <Card className="p-4">
        <div className="space-y-4">
          {/* Main URL Input */}
          <div className="flex flex-col md:flex-row gap-4 items-start">
            <div className="flex-grow w-full">
              <TextInput
                label="Target URL"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                fullWidth
                list="pentest-history"
                autoFocus
                clearable
                placeholder="https://example.com"
              />
              <datalist id="pentest-history">
                {history.map((h) => (
                  <option key={h} value={h} />
                ))}
              </datalist>
            </div>
            <Button onClick={runTests} isLoading={loading} disabled={loading} className="w-full md:w-auto">
              Run All Tests
            </Button>
          </div>

          {/* Advanced Mode Controls */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 pt-4 border-t">
            <div className="flex items-center gap-2">
              <input
                type="checkbox"
                id="advanced-mode"
                checked={isAdvancedMode}
                onChange={(e) => setIsAdvancedMode(e.target.checked)}
                className="rounded"
              />
              <label htmlFor="advanced-mode" className="text-sm font-medium">
                Advanced Mode
              </label>
            </div>
            
            <div className="flex items-center gap-2">
              <input
                type="checkbox"
                id="auto-resize"
                checked={autoResize}
                onChange={(e) => setAutoResize(e.target.checked)}
                className="rounded"
              />
              <label htmlFor="auto-resize" className="text-sm font-medium">
                Auto-resize Windows
              </label>
            </div>
            
            <div className="flex items-center gap-2">
              <input
                type="checkbox"
                id="real-payload"
                checked={realPayloadMode}
                onChange={(e) => setRealPayloadMode(e.target.checked)}
                className="rounded"
              />
              <label htmlFor="real-payload" className="text-sm font-medium text-red-600">
                Real Payload Mode
              </label>
            </div>
          </div>

          {/* Advanced Mode Info */}
          {isAdvancedMode && (
            <InfoBox variant="info" title="Advanced Mode Enabled">
              Real-time test windows, edge case testing, and enhanced payload analysis are now active.
              Tests will run with comprehensive edge case coverage and detailed logging.
            </InfoBox>
          )}

          {realPayloadMode && (
            <InfoBox variant="warning" title="Real Payload Mode">
              This mode uses actual attack payloads for testing. Only use on sites you own or have permission to test.
              Real payloads may trigger security systems and should be used responsibly.
            </InfoBox>
          )}
        </div>
      </Card>

      {/* Edge Case Results */}
      {isAdvancedMode && Object.keys(edgeCaseResults).length > 0 && (
        <Card className="p-4">
          <Collapsible title="Edge Case Test Results" className="w-full">
            <div className="space-y-2 max-h-60 overflow-y-auto">
              {Object.entries(edgeCaseResults).map(([testUrl, result]) => (
                <div key={testUrl} className="text-sm border-b pb-2">
                  <div className="font-mono text-xs truncate">{testUrl}</div>
                  <div className="text-gray-600">
                    {typeof result === 'object' && result !== null 
                      ? `${JSON.stringify(result, null, 2).slice(0, 100)}...`
                      : String(result)
                    }
                  </div>
                </div>
              ))}
            </div>
          </Collapsible>
        </Card>
      )}

      {/* Real Payload Testing Panel */}
      {realPayloadMode && (
        <Card className="p-4">
          <h3 className="text-lg font-medium mb-4">Real Payload Testing</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {payloadTests.map((payload) => (
              <div key={payload.name} className="border rounded p-3">
                <div className="flex items-center justify-between mb-2">
                  <span className="font-medium text-sm">{payload.name}</span>
                  {(() => {
                    if (payload.riskLevel === 'high') return <Badge variant="danger">{payload.riskLevel}</Badge>;
                    if (payload.riskLevel === 'medium') return <Badge variant="warning">{payload.riskLevel}</Badge>;
                    return <Badge variant="success">{payload.riskLevel}</Badge>;
                  })()}
                </div>
                <p className="text-xs text-gray-600 mb-2">{payload.description}</p>
                <div className="font-mono text-xs bg-gray-100 dark:bg-gray-800 p-2 rounded truncate">
                  {payload.payload}
                </div>
                <Button
                  size="sm"
                  className="w-full mt-2"
                  onClick={() => url && runPayloadTest(payload, url)}
                  disabled={!url}
                >
                  Test Payload
                </Button>
              </div>
            ))}
          </div>
        </Card>
      )}

      <TabGroup>
        <div className="border rounded-lg">
          <div className="border-b p-4">
            <h3 className="text-lg font-medium">Clickjacking Test</h3>
            <PentestResult 
              result={results.clickjacking} 
              title="Clickjacking Validator" 
              description="Tests if this site blocks iframe embedding." 
              logs={results.clickjacking}
            >
              <PreviewIframe 
                src={url} 
                className="w-full h-72 border mt-4" 
                title="clickjacking-test" 
                onAllowed={handleLoad} 
                onBlocked={handleError} 
              />
            </PentestResult>
          </div>
          
          <div className="border-b p-4">
            <h3 className="text-lg font-medium">HTTPS Redirect Test</h3>
            <PentestResult 
              result={results.https} 
              title="HTTPS Redirect Checker" 
              description="Detects if http:// redirects to https://" 
              logs={results.https?.details}
            >
              <a 
                href={httpUrl} 
                target="_blank" 
                rel="noopener noreferrer" 
                className="text-blue-600 text-sm mt-2 inline-block"
              >
                Open HTTP Version
              </a>
            </PentestResult>
          </div>
          
          <div className="border-b p-4">
            <h3 className="text-lg font-medium">Open Redirect Test</h3>
            <PentestResult 
              result={results.openRedirect} 
              title="Open Redirect Detector" 
              description="Checks common redirect parameters." 
              logs={results.openRedirect?.details}
            >
              <div className="flex flex-col gap-2 mt-2">
                <SelectInput 
                  value={redirectParam} 
                  onChange={setRedirectParam} 
                  options={[
                    { value: 'redirect', label: 'redirect' }, 
                    { value: 'next', label: 'next' }, 
                    { value: 'url', label: 'url' }, 
                    { value: 'to', label: 'to' }
                  ]} 
                  className="w-40" 
                />
                <PreviewIframe 
                  src={redirectUrl} 
                  className="w-full h-64 border" 
                  title="open-redirect-test" 
                />
              </div>
            </PentestResult>
          </div>
          
          <div className="border-b p-4">
            <h3 className="text-lg font-medium">XSS Reflection Test</h3>
            <PentestResult 
              result={results.xss} 
              title="XSS Reflection Tester" 
              description="Injects a basic payload via query string." 
              logs={results.xss?.details}
            >
              <div className="flex flex-col gap-2 mt-2">
                <TextInput 
                  label="Payload" 
                  value={xssPayload} 
                  onChange={(e) => setXssPayload(e.target.value)} 
                  fullWidth 
                />
                <PreviewIframe 
                  src={xssUrl} 
                  className="w-full h-64 border" 
                  title="xss-test" 
                />
              </div>
            </PentestResult>
          </div>
          
          <div className="border-b p-4">
            <h3 className="text-lg font-medium">CORS Test</h3>
            <PentestResult 
              result={results.cors} 
              title="CORS Validator" 
              description="Attempts cross-origin fetch to the target." 
              logs={results.cors?.details} 
            />
          </div>
          
          <div className="p-4">
            <h3 className="text-lg font-medium">Spoofing POC</h3>
            <PentestResult 
              title="Spoofing POC" 
              description="This demonstrates a simple spoofing attack where a malicious link is disguised as a legitimate one."
            >
              <div className="flex flex-col gap-2 mt-2">
                <p className="text-sm">Click the link below to see the POC:</p>
                <a 
                  href="https://www.google.com" 
                  onMouseOver={(e) => { 
                    e.currentTarget.href = 'https://www.bing.com'; 
                  }}
                  onFocus={(e) => { 
                    e.currentTarget.href = 'https://www.bing.com'; 
                  }}
                  className="text-blue-600"
                >
                  https://www.google.com
                </a>
                <Collapsible title="Remediation" className="mt-2">
                  <p className="text-sm">
                    To prevent this, always verify the URL in the browser&apos;s status bar before clicking. 
                    On the server side, implement Content Security Policy (CSP) to restrict where resources can be loaded from.
                  </p>
                </Collapsible>
              </div>
            </PentestResult>
          </div>
        </div>
      </TabGroup>

      <InfoBox variant="warning" title="Aggressive tests">
        Some validators use iframes and redirects which may trigger network requests. Manual review is recommended for XSS payloads.
        {isAdvancedMode && ' Advanced mode provides enhanced edge case testing and comprehensive payload analysis.'}
      </InfoBox>
      
      <div className="text-sm text-right text-gray-500 dark:text-gray-400">
        🧪 {isAdvancedMode ? '8+' : '5'}/5 Tests Available | 🧩 Coming Soon: CSRF, CSP Scanner
      </div>
    </div>
  );
}

export default PentestSuiteView;
