import React from 'react';
import { Badge, BadgeVariant } from './Badge';
import { Card } from '../layout/Card';
import { CodeBlock } from './CodeBlock';
import { Collapsible } from '../layout/Collapsible';
import { ValidationStatus } from '../../../tools/pentest/lib/pentest';

interface PentestResultProps {
  result?: { status: ValidationStatus; details?: string } | ValidationStatus;
  title: string;
  description: string;
  logs?: string;
  children?: React.ReactNode;
}

const statusColor: Record<ValidationStatus, BadgeVariant> = {
  passed: 'success',
  failed: 'danger',
  inconclusive: 'warning',
};

export function PentestResult({ result, title, description, logs, children }: PentestResultProps) {
  const status = typeof result === 'string' ? result : result?.status;

  return (
    <Card isElevated>
      <Card.Header
        title={<span className="flex items-center gap-2">{title}</span>}
        actions={status && <Badge variant={statusColor[status]}>{status}</Badge>}
      />
      <Card.Body className="space-y-3">
        <p className="text-sm text-gray-500">{description}</p>
        {children}
        {logs && (
          <Collapsible title="Details" className="mt-2">
            <CodeBlock>{logs}</CodeBlock>
          </Collapsible>
        )}
      </Card.Body>
    </Card>
  );
}
