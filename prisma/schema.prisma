generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  vcard         VCard?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VCard {
  id                String         @id @default(cuid())
  username          String         @unique
  displayName       String
  title             String?
  profileImage      String?
  coverImage        String?
  company           String?
  bio               String?
  email             String?
  phone             String?
  whatsapp          String?
  website           String?
  address           String?
  socialLinks       SocialLink[]
  customLinks       CustomLink[]
  skills            Skill[]
  services          Service[]
  portfolio         PortfolioItem[]
  testimonials      Testimonial[]
  appearances       Appearance     @relation(fields: [appearanceId], references: [id])
  appearanceId      String
  qrDownloads       Int            @default(0)
  viewCount         Int            @default(0)
  totalContacts     Int            @default(0)
  clickCount        Json           @default("{}")
  isPublic          Boolean        @default(true)
  metaTitle         String?
  metaDescription   String?
  googleAnalyticsId String?
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String         @unique
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model SocialLink {
  id        String   @id @default(cuid())
  platform  String
  url       String
  vcardId   String
  vcard     VCard    @relation(fields: [vcardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomLink {
  id        String   @id @default(cuid())
  title     String
  url       String
  icon      String?
  vcardId   String
  vcard     VCard    @relation(fields: [vcardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  vcardId   String
  vcard     VCard    @relation(fields: [vcardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String?
  vcardId     String
  vcard       VCard    @relation(fields: [vcardId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model PortfolioItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  link        String?
  vcardId     String
  vcard       VCard    @relation(fields: [vcardId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  position  String?
  content   String
  avatar    String?
  vcardId   String
  vcard     VCard    @relation(fields: [vcardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Appearance {
  id        String   @id @default(cuid())
  name      String   @unique
  theme     String   @default("light")
  primary   String   @default("#3B82F6") // Default blue
  secondary String   @default("#10B981") // Default green
  font      String   @default("Inter")
  vcards    VCard[]
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
