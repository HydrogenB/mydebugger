import { normalizeUrl, buildRedirectTestUrl, buildXssTestUrl, checkHttpsRedirect, checkCors, checkOpenRedirect, checkXssReflection } from '../model/pentest';

describe('normalizeUrl', () => {
  it('adds http scheme when missing', () => {
    expect(normalizeUrl('example.com')).toBe('http://example.com/');
  });
});

describe('buildRedirectTestUrl', () => {
  it('appends redirect param', () => {
    expect(buildRedirectTestUrl('https://a.com', 'next')).toBe('https://a.com/?next=https%3A%2F%2Fexample.com');
  });
});

describe('buildXssTestUrl', () => {
  it('adds payload parameter', () => {
    expect(buildXssTestUrl('https://x.com', '<svg>', 'payload')).toBe('https://x.com/?payload=%3Csvg%3E');
  });
});

describe('checkHttpsRedirect', () => {
  it('passes when redirected to https', async () => {
    (global.fetch as any) = jest.fn(() => Promise.resolve({
      redirected: true,
      url: 'https://example.com',
      type: 'basic',
      headers: new Headers(),
      status: 200,
    }));
    const res = await checkHttpsRedirect('http://a.com');
    expect(res.status).toBe('passed');
  });

  it('fails when not redirected', async () => {
    (global.fetch as any) = jest.fn(() => Promise.resolve({
      redirected: false,
      url: 'http://a.com',
      type: 'basic',
      headers: new Headers(),
      status: 200,
    }));
    const res = await checkHttpsRedirect('http://a.com');
    expect(res.status).toBe('failed');
  });
});

describe('checkCors', () => {
  it('reports passed when opaque', async () => {
    (global.fetch as any) = jest.fn(() => Promise.resolve({ type: 'opaque' }));
    const res = await checkCors('https://a.com');
    expect(res.status).toBe('passed');
  });

  it('reports failed when CORS open', async () => {
    (global.fetch as any) = jest.fn(() => Promise.resolve({ type: 'basic' }));
    const res = await checkCors('https://a.com');
    expect(res.status).toBe('failed');
  });
});

describe('checkOpenRedirect', () => {
  it('fails when location header points to attacker', async () => {
    (global.fetch as any) = jest.fn(() => Promise.resolve({
      type: 'basic',
      status: 302,
      headers: new Headers({ location: 'https://example.com' }),
    }));
    const res = await checkOpenRedirect('https://vuln.com', 'next');
    expect(res.status).toBe('failed');
  });

  it('passes when no redirect', async () => {
    (global.fetch as any) = jest.fn(() => Promise.resolve({
      type: 'basic',
      status: 200,
      headers: new Headers(),
    }));
    const res = await checkOpenRedirect('https://safe.com', 'next');
    expect(res.status).toBe('passed');
  });
});

describe('checkXssReflection', () => {
  it('fails when payload reflected', async () => {
    (global.fetch as any) = jest.fn(() => Promise.resolve({
      type: 'basic',
      text: () => Promise.resolve('test <svg>'),
    }));
    const res = await checkXssReflection('https://site.com', '<svg>', 'payload');
    expect(res.status).toBe('failed');
  });
});
