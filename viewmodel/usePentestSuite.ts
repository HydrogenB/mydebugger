/**
 * © 2025 MyDebugger Contributors – MIT License
 */
import { useEffect, useState } from 'react';
import {
  ValidationStatus,
  TestResult,
  normalizeUrl,
  buildRedirectTestUrl,
  buildXssTestUrl,
  checkHttpsRedirect,
  checkCors,
  checkOpenRedirect,
  checkXssReflection,
} from '../model/pentest';

interface Results {
  https?: TestResult;
  cors?: TestResult;
  openRedirect?: TestResult;
  xss?: TestResult;
  clickjacking?: ValidationStatus;
}

export const usePentestSuite = () => {
  const [url, setUrl] = useState('');
  const [results, setResults] = useState<Results>({});
  const [redirectUrl, setRedirectUrl] = useState('');
  const [xssUrl, setXssUrl] = useState('');
  const [httpUrl, setHttpUrl] = useState('');
  const [redirectParam, setRedirectParam] = useState('redirect');
  const [xssPayload, setXssPayload] = useState('<img src=x onerror=alert(1)>');
  const [history, setHistory] = useState<string[]>([]);
  const [runId, setRunId] = useState(0);

  useEffect(() => {
    const saved = localStorage.getItem('MyDebugger:pentest-history');
    if (saved) setHistory(JSON.parse(saved));
  }, []);

  const saveHistory = (u: string) => {
    setHistory((prev) => {
      const updated = [u, ...prev.filter((v) => v !== u)].slice(0, 5);
      localStorage.setItem('MyDebugger:pentest-history', JSON.stringify(updated));
      return updated;
    });
  };

  const runTests = async () => {
    if (!url) return;
    const target = normalizeUrl(url.trim());
    saveHistory(target);
    setRunId((id) => id + 1);
    setRedirectUrl(buildRedirectTestUrl(target, redirectParam));
    setXssUrl(buildXssTestUrl(target, xssPayload));
    setHttpUrl(target.replace(/^https:/, 'http:'));
    const https = await checkHttpsRedirect(target);
    const cors = await checkCors(target);
    const openRedirect = await checkOpenRedirect(target, redirectParam);
    const xss = await checkXssReflection(target, xssPayload);
    setResults({ https, cors, openRedirect, xss, clickjacking: 'inconclusive' });
  };

  const setClickjacking = (status: ValidationStatus) => {
    setResults((prev) => ({ ...prev, clickjacking: status }));
  };

  return {
    url,
    setUrl,
    results,
    redirectUrl,
    xssUrl,
    httpUrl,
    redirectParam,
    setRedirectParam,
    xssPayload,
    setXssPayload,
    runTests,
    history,
    runId,
    setClickjacking,
  };
};

export default usePentestSuite;
